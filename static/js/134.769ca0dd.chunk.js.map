{"version":3,"file":"static/js/134.769ca0dd.chunk.js","mappings":"gPAgCIA,EAAY,MACdC,WAAAA,GACEC,KAAKC,MAAQ,GACbD,KAAKE,OAAyB,IAAIC,IAClCH,KAAKI,WAAa,GAClBJ,KAAKK,QAA0B,IAAIF,IACnCH,KAAKM,YAAcA,EAAAA,GACnBN,KAAKO,YAAcA,EAAAA,GACnBP,KAAKQ,gBAAkBA,EAAAA,GACvBR,KAAKS,gBAAkBA,EAAAA,GACvBT,KAAKU,kBAAoBA,EAAAA,GACzBV,KAAKW,kBAAoBA,EAAAA,EAC3B,CAAC,eAECC,EAAAA,EAAAA,IAAOZ,KAAM,aAFd,GAIDa,QAAAA,GACE,OAAOb,KAAKC,KACd,CACAa,SAAAA,GACE,MAAMC,EAAgBC,EAAAA,GAChBC,GAAaH,EAAAA,EAAAA,MACnB,OAAOI,EAAAA,EAAAA,IAAc,IAChBH,EAAcI,WACdF,EAAWE,SAAW,CAAC,GAE9B,CACAC,OAAAA,CAAQC,EAAMC,GACZtB,KAAKC,MAAMsB,KAAKF,GAChBrB,KAAKE,OAAOsB,IAAIH,EAAMC,GACR,IAAVA,IACFtB,KAAKI,WAAWmB,KAAKF,GACrBrB,KAAKyB,OAASJ,EAElB,CACAK,OAAAA,GACE,MAAO,CAAEC,KAAM,GAAIC,SAAU5B,KAAKI,WACpC,CACAyB,QAAAA,CAASC,EAAIC,GACX,MAAMC,EAAahC,KAAKK,QAAQ4B,IAAIH,IAAO,CAAEA,KAAII,OAAQ,GAAIC,WAAY,IACnED,EAASH,EAAOK,QAAQ,OAAQ,gBAAgBA,QAAQ,KAAM,KAAKA,QAAQ,gBAAQ,KAAKC,MAAM,KAChGH,GACFA,EAAOI,QAASC,KACVC,EAAAA,EAAAA,IAAaD,KACXP,GAAYG,WACdH,EAAWG,WAAWZ,KAAKgB,GAE3BP,EAAWG,WAAa,CAACI,IAGzBP,GAAYE,OACdF,EAAWE,OAAOX,KAAKgB,GAEvBP,EAAWE,OAAS,CAACK,KAI3BvC,KAAKK,QAAQmB,IAAIM,EAAIE,EACvB,CACAS,UAAAA,GACE,OAAOzC,KAAKK,OACd,CACAqC,iBAAAA,CAAkBC,GAChB,OAAO3C,KAAKK,QAAQ4B,IAAIU,IAAgBT,QAAU,EACpD,CACAU,KAAAA,IACEA,EAAAA,EAAAA,MACA5C,KAAKC,MAAQ,GACbD,KAAKE,OAAyB,IAAIC,IAClCH,KAAKI,WAAa,GAClBJ,KAAKK,QAA0B,IAAIF,IACnCH,KAAKyB,UAAO,CACd,GAOF,SAASoB,EAAeC,GACtB,IAAKA,EAAMC,OACT,MAAO,GAET,MAAMtB,EAAO,GACPuB,EAAQ,GA8Bd,OA7BAF,EAAMR,QAASW,IACb,MAAM5B,EAAO,CACXM,KAAMsB,EAAKtB,KACXC,SAAwB,SAAdqB,EAAKC,UAAkB,EAAS,IAS5C,IAPA7B,EAAKsB,cAAgBM,GAAMN,cACvBM,GAAME,oBACR9B,EAAK8B,kBAAoB,CAACF,EAAKE,oBAEf,SAAdF,EAAKC,WAAkC,IAAfD,EAAKG,QAC/B/B,EAAK+B,MAAQH,EAAKG,OAEbJ,EAAMD,OAAS,GAAKC,EAAMA,EAAMD,OAAS,GAAGzB,OAAS2B,EAAK3B,OAC/D0B,EAAMK,MAER,GAAqB,IAAjBL,EAAMD,OACRtB,EAAKF,KAAKF,OACL,CACL,MAAMiC,EAASN,EAAMA,EAAMD,OAAS,GAAG1B,KACnCiC,EAAO1B,SACT0B,EAAO1B,SAASL,KAAKF,GAErBiC,EAAO1B,SAAW,CAACP,EAEvB,CACkB,SAAd4B,EAAKC,MACPF,EAAMzB,KAAK,CAAEF,OAAMC,MAAO2B,EAAK3B,UAG5BG,CACT,EACAb,EAAAA,EAAAA,IAAOiC,EAAgB,kBAGvB,IAAIU,GAA2B3C,EAAAA,EAAAA,IAAO,CAAC4C,EAAKC,MAC1CC,EAAAA,EAAAA,GAAiBF,EAAKC,GACtB,MAAMX,EAAQ,GACd,IAAK,MAAMa,KAAOH,EAAII,aAAe,GACjB,sBAAdD,EAAIE,OACNJ,EAAG5B,SAAS8B,EAAIG,WAAa,GAAIH,EAAII,WAAa,IAGtD,IAAK,MAAMJ,KAAOH,EAAII,aAAe,GAAI,CACvC,MAAMX,EAAOU,EAAIV,KACjB,IAAKA,EACH,SAEF,MAAM3B,EAAQqC,EAAIK,OAASC,SAASN,EAAIK,QAAU,EAC5CrC,EAAOuC,EAAYjB,GACnBf,EAASe,EAAKN,cAAgBc,EAAGf,kBAAkBO,EAAKN,eAAiB,GACzEQ,EAAoBjB,EAAOa,OAAS,EAAIb,EAAOiC,KAAK,UAAO,EAC3DC,EAAW,CACf9C,QACAK,OACAuB,KAAMD,EAAKY,MACXT,MAAOH,EAAKG,MACZT,cAAeM,EAAKN,cACpBQ,qBAEFL,EAAMvB,KAAK6C,EACb,CACA,MAAMC,EAAiBxB,EAAeC,GAChCwB,GAAsC1D,EAAAA,EAAAA,IAAO,CAACX,EAAOqB,KACzD,IAAK,MAAMD,KAAQpB,EACjBwD,EAAGrC,QAAQC,EAAMC,GACbD,EAAKO,UAAYP,EAAKO,SAASmB,OAAS,GAC1CuB,EAAoBjD,EAAKO,SAAUN,EAAQ,IAG9C,uBACHgD,EAAoBD,EAAgB,IACnC,YACCH,GAA8BtD,EAAAA,EAAAA,IAAQqC,GACjCA,EAAKtB,KAAO4C,OAAOtB,EAAKtB,MAAQ,GACtC,eACC6C,EAAS,CAEXA,OAAQ,CAAEC,QAAI,GACdC,OAAuB9D,EAAAA,EAAAA,IAAO+D,UAC5B,IACE,MAAMC,EAAYF,EAAAA,GACZlB,QAAYoB,EAAU,UAAWC,GACvCC,EAAAA,GAAIC,MAAM,eAAgBvB,GAC1B,MAAMC,EAAKe,EAAOA,QAAQC,GAC1B,KAAMhB,aAAc3D,GAClB,MAAM,IAAIkF,MACR,yJAGJzB,EAASC,EAAKC,EAChB,CAAE,MAAOwB,GAEP,MADAH,EAAAA,GAAIG,MAAM,yBAA0BA,GAC9BA,CACR,GACC,UAMDC,EAAwB,GA6RxBC,EAAW,CAAEC,MA3RUxE,EAAAA,EAAAA,IAAO,CAACyE,EAAOvD,EAAIwD,EAAUC,KACtD,MAAMC,EAAYD,EAAS9B,GACrBgC,EAASD,EAAU1E,YACnB4E,EAAsBD,EAAOE,SANT,GAOpBC,EAAQJ,EAAU/E,kBAClBgB,EAAO+D,EAAU9D,WACjB,eAAEmE,IAAmB/E,EAAAA,EAAAA,MAC3B,IAAKW,EACH,OAEF,MAAMqE,EAAcF,EAAQ,GAAK,EAC3BG,GAAMC,EAAAA,EAAAA,GAAiBlE,GACvBmE,EAAQR,EAAOS,UAAYT,EAAOS,UAAYhB,EAAwB,IACtEiB,EAASV,EAAOW,WAAaX,EAAOW,WAAalB,EAAwB,IACzEmB,EAAWJ,EACXK,EAAYH,EAASL,EAG3B,IAAIS,EAFJR,EAAIS,KAAK,UAAW,OAAOH,KAAYC,MACvCG,EAAAA,EAAAA,IAAiBV,EAAKO,EAAWD,EAAUZ,EAAOiB,aAElD,IACE,MAAMC,EAAYlB,EAAOc,aAAe,IACxC,GAAkB,SAAdI,EACFJ,GAA8B3F,EAAAA,EAAAA,IAAQwC,GAAU,KAAMwD,EAAAA,EAAAA,KAAO,IAAPA,CAAYxD,GAAQ,oBACrE,GAAIuD,EAAUE,WAAW,MAAQF,EAAUG,SAAS,KAAM,CAC/D,MAAMC,EAAY,QAAQC,KAAKL,GACzBM,EAAeF,EAAYA,EAAU,GAAK,GAChDR,GAA8B3F,EAAAA,EAAAA,IAAQwC,GAAU,KAAMwD,EAAAA,EAAAA,KAAO,IAAMK,EAAbL,CAA2BxD,GAAQ,cAC3F,MAAO,GAAIuD,EAAUE,WAAW,KAAM,CACpC,MAAMK,EAAeP,EAAUQ,UAAU,GACzCZ,GAA8B3F,EAAAA,EAAAA,IAAQwC,GAAU,KAAMwD,EAAAA,EAAAA,KAAOM,GAAgB,GAAvBN,CAA2BxD,GAAQ,cAC3F,MACEmD,GAAcK,EAAAA,EAAAA,KAAOD,EAEzB,CAAE,MAAO1B,GACPH,EAAAA,GAAIG,MAAM,kCAAmCA,GAC7CsB,GAAcK,EAAAA,EAAAA,KAAO,IACvB,CACA,MAAMQ,GAAaC,EAAAA,EAAAA,OAAeC,MAAM,CACtC,cACAzB,EAAe0B,QACf1B,EAAe2B,QACf3B,EAAe4B,QACf5B,EAAe6B,QACf7B,EAAe8B,QACf9B,EAAe+B,QACf/B,EAAegC,QACfhC,EAAeiC,QACfjC,EAAekC,QACflC,EAAemC,QACfnC,EAAeoC,SACfpC,EAAeqC,WAEXC,GAAiBd,EAAAA,EAAAA,OAAeC,MAAM,CAC1C,cACAzB,EAAeuC,YACfvC,EAAewC,YACfxC,EAAeyC,YACfzC,EAAe0C,YACf1C,EAAe2C,YACf3C,EAAe4C,YACf5C,EAAe6C,YACf7C,EAAe8C,YACf9C,EAAe+C,YACf/C,EAAegD,YACfhD,EAAeiD,aACfjD,EAAekD,eAEXC,GAAkB3B,EAAAA,EAAAA,OAAeC,MAAM,CAC3CzB,EAAeoD,aACfpD,EAAeqD,aACfrD,EAAesD,aACftD,EAAeuD,aACfvD,EAAewD,aACfxD,EAAeyD,aACfzD,EAAe0D,aACf1D,EAAe2D,aACf3D,EAAe4D,aACf5D,EAAe6D,aACf7D,EAAe8D,cACf9D,EAAe+D,gBAEbhE,GACFG,EAAI8D,OAAO,QAAQrD,KAAK,IAAKH,EAAW,GAAGG,KAAK,IAAKV,EAAc,GAAGU,KAAK,QAAS,gBAAgBA,KAAK,cAAe,UAAUA,KAAK,oBAAqB,UAAU3B,KAAKe,GAE7K,MAAMkE,EAAI/D,EAAI8D,OAAO,KAAKrD,KAAK,YAAa,gBAAgBV,MAAgBU,KAAK,QAAS,oBACpFuD,GAAgBC,EAAAA,EAAAA,KAAUvI,GAAMwI,IAAKC,GAAMA,EAAE9G,OAAS,GAAG+G,KAAK,CAACC,EAAGC,KAAOA,EAAEjH,OAAS,IAAMgH,EAAEhH,OAAS,IAIrGkH,GAHgBnJ,EAAAA,EAAAA,OAAUoJ,KAAK,CAACtE,EAAOE,IAASqE,WACnDN,GAAMA,EAAEtI,UAAYsI,EAAEtI,SAASmB,OAAS,EAAI0H,GAAgD,GAC7FC,aAAahF,GAAqBiF,YAAaT,GAAMA,EAAEtI,UAAYsI,EAAEtI,SAASmB,OAAS,EAAImC,EAAwB,GAAG0F,aAAcV,GAAMA,EAAEtI,UAAYsI,EAAEtI,SAASmB,OAAS,EAAImC,EAAwB,GAAG2F,cAAeX,GAAMA,EAAEtI,UAAYsI,EAAEtI,SAASmB,OAAS,EAAImC,EAAwB,GAAG4F,OAAM,EACrRC,CAAchB,GAC5BiB,EAAcV,EAAYW,cAAcC,OAAQhB,GAAMA,EAAEtI,UAAYsI,EAAEtI,SAASmB,OAAS,GACxFoI,EAAWrB,EAAEsB,UAAU,mBAAmBC,KAAKL,GAAaM,QAAQzB,OAAO,KAAKrD,KAAK,QAAS,kBAAkBA,KAAK,YAAc0D,GAAM,aAAaA,EAAEqB,MAAMrB,EAAEsB,OACtKL,EAAStB,OAAO,QAAQrD,KAAK,QAAU0D,GAAMA,EAAEuB,GAAKvB,EAAEqB,IAAI/E,KAAK,SA7FrC,IA6FsEA,KAAK,QAAS,wBAAwBA,KAAK,OAAQ,QAAQA,KAAK,eAAgB,IAAKA,KAAK,eAAgB,IAAKA,KAAK,QAAU0D,GAC5M,IAAZA,EAAEwB,MACG,iBAEF,IAETP,EAAStB,OAAO,YAAYrD,KAAK,KAAM,CAACmF,EAAIC,IAAM,gBAAgB9J,KAAM8J,KAAK/B,OAAO,QAAQrD,KAAK,QAAU0D,GAAM2B,KAAKC,IAAI,EAAG5B,EAAEuB,GAAKvB,EAAEqB,GAAK,KAAK/E,KAAK,SAnG3H,IAoG1B2E,EAAStB,OAAO,QAAQrD,KAAK,QAAU0D,GAAMA,EAAEuB,GAAKvB,EAAEqB,IAAI/E,KAAK,SAAW0D,GAAMA,EAAE6B,GAAK7B,EAAEsB,IAAIhF,KAAK,QAAS,CAACmF,EAAIC,IACvG,yBAAyBA,KAC/BpF,KAAK,OAAS0D,GAAM9C,EAAW8C,EAAEmB,KAAK1J,OAAO6E,KAAK,eAAgB,IAAKA,KAAK,SAAW0D,GAAM/B,EAAe+B,EAAEmB,KAAK1J,OAAO6E,KAAK,eAAgB,GAAGA,KAAK,iBAAkB,IAAKA,KAAK,QAAU0D,IAC9L,GAAgB,IAAZA,EAAEwB,MACJ,MAAO,iBAET,MAAMxJ,GAAS8J,EAAAA,EAAAA,IAAc,CAAE7I,kBAAmB+G,EAAEmB,KAAKlI,oBACzD,OAAOjB,EAAO+J,WAAa,IAAM/J,EAAOgK,aAAa/H,KAAK,OAE5DgH,EAAStB,OAAO,QAAQrD,KAAK,QAAS,uBAAuBA,KAAK,IAAK,GAAGA,KAAK,IAAKiE,MAA2BjE,KAAK,oBAAqB,UAAU3B,KAAMqF,GAAkB,IAAZA,EAAEwB,MAAc,GAAKxB,EAAEmB,KAAK1J,MAAM6E,KAAK,cAAe,QAAQA,KAAK,QAAU0D,IAC1O,GAAgB,IAAZA,EAAEwB,MACJ,MAAO,iBAIT,MAFoB,oDAAsD1C,EAAgBkB,EAAEmB,KAAK1J,MAAQ,qEAC1FqK,EAAAA,EAAAA,IAAc,CAAE7I,kBAAmB+G,EAAEmB,KAAKlI,oBAC7BgJ,YAAY/J,QAAQ,SAAU,WACzDgK,KAAK,SAASlC,GACf,GAAgB,IAAZA,EAAEwB,MACJ,OAEF,MAAMW,GAAOC,EAAAA,EAAAA,KAAOtM,MACduM,EAAerC,EAAEmB,KAAK1J,KAC5B0K,EAAKxH,KAAK0H,GACV,MAAMC,EAAmBtC,EAAEuB,GAAKvB,EAAEqB,GAElC,IAAIkB,EACJ,IAA0B,IAAtBhH,EAAOiH,YAAwBxC,EAAE9G,MAAO,CAK1CqJ,EAJ6BD,EAAmB,GACV,GACN,GALX,CAQvB,KAAO,CAELC,EAAsBD,EAVD,EASQ,CAE/B,CACA,MACMG,EAAuBd,KAAKC,IADJ,GAC+BW,GACvDG,EAAWP,EAAKhL,OAEtB,GADiCuL,EAASC,wBACXF,EAAsB,CACnD,MAAMG,EAAW,MACjB,IAAIC,EAAuBR,EAC3B,KAAOQ,EAAqBhK,OAAS,GAAG,CAEtC,GADAgK,EAAuBR,EAAapF,UAAU,EAAG4F,EAAqBhK,OAAS,GAC3C,IAAhCgK,EAAqBhK,OAAc,CACrCsJ,EAAKxH,KAAKiI,GACNF,EAASC,wBAA0BF,GACrCN,EAAKxH,KAAK,IAEZ,KACF,CAEA,GADAwH,EAAKxH,KAAKkI,EAAuBD,GAC7BF,EAASC,yBAA2BF,EACtC,KAEJ,CACF,CACF,IAC0B,IAAtBlH,EAAOiH,YACTvB,EAAStB,OAAO,QAAQrD,KAAK,QAAS,uBAAuBA,KAAK,IAAM0D,GAAMA,EAAEuB,GAAKvB,EAAEqB,GAAK,IAAI/E,KAAK,IAAKiE,MAA2BjE,KAAK,cAAe,OAAOA,KAAK,oBAAqB,UAAU3B,KAAMqF,GAAMA,EAAE9G,MAAQmD,EAAY2D,EAAE9G,OAAS,IAAIoD,KAAK,aAAc,UAAUA,KAAK,QAAU0D,IAC/R,GAAgB,IAAZA,EAAEwB,MACJ,MAAO,iBAIT,MAFoB,sEAAwE1C,EAAgBkB,EAAEmB,KAAK1J,MAAQ,qEAC5GqK,EAAAA,EAAAA,IAAc,CAAE7I,kBAAmB+G,EAAEmB,KAAKlI,oBAC7BgJ,YAAY/J,QAAQ,SAAU,WAG9D,MAAM4K,EAAY1C,EAAY2C,SACxBC,EAAOpD,EAAEsB,UAAU,qBAAqBC,KAAK2B,GAAW1B,QAAQzB,OAAO,KAAKrD,KAAK,QAAS,CAAC0D,EAAG0B,IAC3F,oCAAoCA,IAAI1B,EAAEmB,KAAK1I,cAAgB,IAAIuH,EAAEmB,KAAK1I,gBAAkB,OAClG6D,KAAK,YAAc0D,GAAM,aAAaA,EAAEqB,MAAMrB,EAAEsB,OACnD0B,EAAKrD,OAAO,QAAQrD,KAAK,QAAU0D,GAAMA,EAAEuB,GAAKvB,EAAEqB,IAAI/E,KAAK,SAAW0D,GAAMA,EAAE6B,GAAK7B,EAAEsB,IAAIhF,KAAK,QAAS,eAAeA,KAAK,OAAS0D,GAC3HA,EAAE5G,OAAS8D,EAAW8C,EAAE5G,OAAO+H,KAAK1J,MAAQyF,EAAW8C,EAAEmB,KAAK1J,OACpE6E,KAAK,QAAU0D,IACD8B,EAAAA,EAAAA,IAAc,CAAE7I,kBAAmB+G,EAAEmB,KAAKlI,oBAC3C8I,YACbzF,KAAK,eAAgB,IAAKA,KAAK,SAAW0D,GACpCA,EAAE5G,OAAS8D,EAAW8C,EAAE5G,OAAO+H,KAAK1J,MAAQyF,EAAW8C,EAAEmB,KAAK1J,OACpE6E,KAAK,eAAgB,GACxB0G,EAAKrD,OAAO,YAAYrD,KAAK,KAAM,CAACmF,EAAIC,IAAM,QAAQ9J,KAAM8J,KAAK/B,OAAO,QAAQrD,KAAK,QAAU0D,GAAM2B,KAAKC,IAAI,EAAG5B,EAAEuB,GAAKvB,EAAEqB,GAAK,IAAI/E,KAAK,SAAW0D,GAAM2B,KAAKC,IAAI,EAAG5B,EAAE6B,GAAK7B,EAAEsB,GAAK,IAoDnL,GAnDmB0B,EAAKrD,OAAO,QAAQrD,KAAK,QAAS,gBAAgBA,KAAK,IAAM0D,IAAOA,EAAEuB,GAAKvB,EAAEqB,IAAM,GAAG/E,KAAK,IAAM0D,IAAOA,EAAE6B,GAAK7B,EAAEsB,IAAM,GAAGhF,KAAK,QAAU0D,GACtI,wEAA0ElB,EAAgBkB,EAAEmB,KAAK1J,MAAQ,KAC9GqK,EAAAA,EAAAA,IAAc,CAAE7I,kBAAmB+G,EAAEmB,KAAKlI,oBAC7BgJ,YAAY/J,QAAQ,SAAU,UACzDoE,KAAK,YAAa,CAACmF,EAAIC,IAAM,aAAa9J,KAAM8J,MAAM/G,KAAMqF,GAAMA,EAAEmB,KAAK1J,MACjEyK,KAAK,SAASlC,GACvB,MAAMmC,GAAOC,EAAAA,EAAAA,KAAOtM,MACdkG,EAAYgE,EAAEuB,GAAKvB,EAAEqB,GACrBnF,EAAa8D,EAAE6B,GAAK7B,EAAEsB,GACtBoB,EAAWP,EAAKhL,OAEhB8L,EAAiBjH,EAAY,EAC7BkH,EAAkBhH,EAAa,EACrC,GAAI+G,EAAiB,IAAMC,EAAkB,GAE3C,YADAf,EAAKgB,MAAM,UAAW,QAGxB,IAAIC,EAAuBrJ,SAASoI,EAAKgB,MAAM,aAAc,IAM7D,KAAOT,EAASC,wBAA0BM,GAAkBG,EALnC,GAMvBA,IACAjB,EAAKgB,MAAM,YAAa,GAAGC,OAE7B,IAAIC,EAA2B1B,KAAKC,IANX,EAQvBD,KAAK2B,IAV0B,GAUI3B,KAAKf,MATjB,GASuBwC,KAE5CG,EAAiBH,EATe,EASsCC,EAC1E,KAAOE,EAAiBL,GAAmBE,EAdlB,IAevBA,IACAC,EAA2B1B,KAAKC,IAbT,EAerBD,KAAK2B,IAjBwB,GAiBM3B,KAAKf,MAhBnB,GAgByBwC,OAE5CC,EAjBmB,GAHA,IAoB4BD,KAGnDjB,EAAKgB,MAAM,YAAa,GAAGC,OAC3BG,EAAiBH,EApBiB,EAoBoCC,EAIxElB,EAAKgB,MAAM,YAAa,GAAGC,QACvBV,EAASC,wBAA0BM,GAAkBG,EA7BhC,GA6B2EF,EAAkBE,IACpHjB,EAAKgB,MAAM,UAAW,OAE1B,IAC0B,IAAtB5H,EAAOiH,WAAsB,CACZQ,EAAKrD,OAAO,QAAQrD,KAAK,QAAS,gBAAgBA,KAAK,IAAM0D,IAAOA,EAAEuB,GAAKvB,EAAEqB,IAAM,GAAG/E,KAAK,IAAK,SAAS0D,GAC1H,OAAQA,EAAE6B,GAAK7B,EAAEsB,IAAM,CACzB,GAAGhF,KAAK,QAAU0D,GACI,yEAA2ElB,EAAgBkB,EAAEmB,KAAK1J,MAAQ,KAC/GqK,EAAAA,EAAAA,IAAc,CAAE7I,kBAAmB+G,EAAEmB,KAAKlI,oBAC7BgJ,YAAY/J,QAAQ,SAAU,UACzDoE,KAAK,YAAa,CAACmF,EAAIC,IAAM,aAAa9J,KAAM8J,MAAM/G,KAAMqF,GAAMA,EAAE9G,MAAQmD,EAAY2D,EAAE9G,OAAS,IAC3FgJ,KAAK,SAASlC,GACvB,MAAMwD,GAAmBpB,EAAAA,EAAAA,KAAOtM,MAC1B2N,EAAiB3N,KAAK4N,WAC5B,IAAKD,EAEH,YADAD,EAAiBL,MAAM,UAAW,QAGpC,MAAMQ,GAAevB,EAAAA,EAAAA,KAAOqB,GAAgBrB,OAAO,iBACnD,GAAIuB,EAAaC,SAA6C,SAAlCD,EAAaR,MAAM,WAE7C,YADAK,EAAiBL,MAAM,UAAW,QAGpC,MAAMU,EAAqBC,WAAWH,EAAaR,MAAM,cAKnDY,EAAsBpC,KAAKC,IAFR,EAIvBD,KAAK2B,IANuB,GAMI3B,KAAKf,MALd,GAKoBiD,KAE7CL,EAAiBL,MAAM,YAAa,GAAGY,OACvC,MACMC,GADgBhE,EAAE6B,GAAK7B,EAAEsB,IAAM,EACEuC,EAAqB,EAPxB,EAQpCL,EAAiBlH,KAAK,IAAK0H,GAC3B,MAAMhI,EAAYgE,EAAEuB,GAAKvB,EAAEqB,GAGrB4C,EAFkBjE,EAAE6B,GAAK7B,EAAEsB,GACP,EAEpB4C,EAAyBlI,EAAY,EACvCwH,EAAiBrM,OAAOwL,wBAA0BuB,GAA0BF,EAAkBD,EAAsBE,GAAmBF,EAflH,EAgBvBP,EAAiBL,MAAM,UAAW,QAElCK,EAAiBL,MAAM,UAAW,KAEtC,EACF,CACA,MAAMgB,EAAiB5I,EAAO4I,gBAAkB,GAChDC,EAAAA,EAAAA,GAAoBvI,EAAKsI,EAAgB,YAAa5I,GAAQiB,cAAe,IAC5E,QAIoBjE,YAHU7B,EAAAA,EAAAA,IAAO,SAASyE,EAAOkJ,GACtD,OAAOA,EAAW9K,GAAGhB,YACvB,EAAG,eAIC+L,EAA6B,CAC/BC,mBAAoB,QACpBC,mBAAoB,IACpBC,iBAAkB,UAClBC,gBAAiB,QACjBC,gBAAiB,IACjBC,cAAe,UACfC,WAAY,QACZC,cAAe,OACfC,cAAe,OACfC,WAAY,QACZC,WAAY,QACZC,cAAe,QA+BbC,GA7B4BzO,EAAAA,EAAAA,IAAO,WAE5B,IADTO,QAASmO,GACVC,UAAAxM,OAAA,QAAAyM,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACH,MAAME,GAAUvO,EAAAA,EAAAA,IAAcsN,EAA4Bc,GAC1D,MAAO,2CAEKG,EAAQhB,0CACFgB,EAAQf,kCAChBe,EAAQd,8DAGNc,EAAQb,uCACFa,EAAQZ,+BAChBY,EAAQX,qDAGRW,EAAQV,+BACHU,EAAQT,qDAGbS,EAAQP,+BACHO,EAAQR,qDAGbQ,EAAQN,+BACHM,EAAQL,yBAGzB,EAAG,aAICM,EAAU,CACZlL,SACA,MAAIf,GACF,OAAO,IAAI3D,CACb,EACAqF,WACAjD,OAAQmN,E,kDCtiBNf,GAAsC1N,EAAAA,EAAAA,IAAO,CAACmF,EAAKJ,EAASgK,EAAYjJ,KAC1EX,EAAIS,KAAK,QAASmJ,GAClB,MAAM,MAAE1J,EAAK,OAAEE,EAAM,EAAEyJ,EAAC,EAAEC,GAAMC,EAA+B/J,EAAKJ,IACpEc,EAAAA,EAAAA,IAAiBV,EAAKI,EAAQF,EAAOS,GACrC,MAAMqJ,EAAUC,EAAcJ,EAAGC,EAAG5J,EAAOE,EAAQR,GACnDI,EAAIS,KAAK,UAAWuJ,GACpBjL,EAAAA,GAAIC,MAAM,uBAAuBgL,mBAAyBpK,MACzD,uBACCmK,GAAiDlP,EAAAA,EAAAA,IAAO,CAACmF,EAAKJ,KAChE,MAAMsK,EAASlK,EAAI1E,QAAQ6O,WAAa,CAAEjK,MAAO,EAAGE,OAAQ,EAAGyJ,EAAG,EAAGC,EAAG,GACxE,MAAO,CACL5J,MAAOgK,EAAOhK,MAAkB,EAAVN,EACtBQ,OAAQ8J,EAAO9J,OAAmB,EAAVR,EACxBiK,EAAGK,EAAOL,EACVC,EAAGI,EAAOJ,IAEX,kCACCG,GAAgCpP,EAAAA,EAAAA,IAAO,CAACgP,EAAGC,EAAG5J,EAAOE,EAAQR,IACxD,GAAGiK,EAAIjK,KAAWkK,EAAIlK,KAAWM,KAASE,IAChD,gB,kBCrBH,SAASzC,EAAiBF,EAAKC,GACzBD,EAAI2M,UACN1M,EAAG9C,oBAAoB6C,EAAI2M,UAEzB3M,EAAI4M,UACN3M,EAAGnD,cAAckD,EAAI4M,UAEnB5M,EAAIoC,OACNnC,EAAGjD,kBAAkBgD,EAAIoC,MAE7B,C,kBACAhF,E,SAAAA,IAAO8C,EAAkB,mB","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/diagram-VMROVX33.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-SKB7J2MH.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-353BL4L5.mjs"],"sourcesContent":["import {\n  setupViewPortForSVG\n} from \"./chunk-SKB7J2MH.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-UWXLY5YG.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-353BL4L5.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-55PJQP7W.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-P3VETL53.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar TreeMapDB = class {\n  constructor() {\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.setAccTitle = setAccTitle;\n    this.getAccTitle = getAccTitle;\n    this.setDiagramTitle = setDiagramTitle;\n    this.getDiagramTitle = getDiagramTitle;\n    this.getAccDescription = getAccDescription;\n    this.setAccDescription = setAccDescription;\n  }\n  static {\n    __name(this, \"TreeMapDB\");\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getConfig() {\n    const defaultConfig = defaultConfig_default;\n    const userConfig = getConfig();\n    return cleanAndMerge({\n      ...defaultConfig.treemap,\n      ...userConfig.treemap ?? {}\n    });\n  }\n  addNode(node, level) {\n    this.nodes.push(node);\n    this.levels.set(node, level);\n    if (level === 0) {\n      this.outerNodes.push(node);\n      this.root ??= node;\n    }\n  }\n  getRoot() {\n    return { name: \"\", children: this.outerNodes };\n  }\n  addClass(id, _style) {\n    const styleClass = this.classes.get(id) ?? { id, styles: [], textStyles: [] };\n    const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n    if (styles) {\n      styles.forEach((s) => {\n        if (isLabelStyle(s)) {\n          if (styleClass?.textStyles) {\n            styleClass.textStyles.push(s);\n          } else {\n            styleClass.textStyles = [s];\n          }\n        }\n        if (styleClass?.styles) {\n          styleClass.styles.push(s);\n        } else {\n          styleClass.styles = [s];\n        }\n      });\n    }\n    this.classes.set(id, styleClass);\n  }\n  getClasses() {\n    return this.classes;\n  }\n  getStylesForClass(classSelector) {\n    return this.classes.get(classSelector)?.styles ?? [];\n  }\n  clear() {\n    clear();\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.root = void 0;\n  }\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast, db) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  // @ts-expect-error - TreeMapDB is not assignable to DiagramDB\n  parser: { yy: void 0 },\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      const db = parser.parser?.yy;\n      if (!(db instanceof TreeMapDB)) {\n        throw new Error(\n          \"parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.\"\n        );\n      }\n      populate(ast, db);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  get db() {\n    return new TreeMapDB();\n  },\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n","import {\n  __name,\n  configureSvgSize,\n  log\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/rendering-util/setupViewPortForSVG.ts\nvar setupViewPortForSVG = /* @__PURE__ */ __name((svg, padding, cssDiagram, useMaxWidth) => {\n  svg.attr(\"class\", cssDiagram);\n  const { width, height, x, y } = calculateDimensionsWithPadding(svg, padding);\n  configureSvgSize(svg, height, width, useMaxWidth);\n  const viewBox = createViewBox(x, y, width, height, padding);\n  svg.attr(\"viewBox\", viewBox);\n  log.debug(`viewBox configured: ${viewBox} with padding: ${padding}`);\n}, \"setupViewPortForSVG\");\nvar calculateDimensionsWithPadding = /* @__PURE__ */ __name((svg, padding) => {\n  const bounds = svg.node()?.getBBox() || { width: 0, height: 0, x: 0, y: 0 };\n  return {\n    width: bounds.width + padding * 2,\n    height: bounds.height + padding * 2,\n    x: bounds.x,\n    y: bounds.y\n  };\n}, \"calculateDimensionsWithPadding\");\nvar createViewBox = /* @__PURE__ */ __name((x, y, width, height, padding) => {\n  return `${x - padding} ${y - padding} ${width} ${height}`;\n}, \"createViewBox\");\n\nexport {\n  setupViewPortForSVG\n};\n","import {\n  __name\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n"],"names":["TreeMapDB","constructor","this","nodes","levels","Map","outerNodes","classes","setAccTitle","getAccTitle","setDiagramTitle","getDiagramTitle","getAccDescription","setAccDescription","__name","getNodes","getConfig","defaultConfig","defaultConfig_default","userConfig","cleanAndMerge","treemap","addNode","node","level","push","set","root","getRoot","name","children","addClass","id","_style","styleClass","get","styles","textStyles","replace","split","forEach","s","isLabelStyle","getClasses","getStylesForClass","classSelector","clear","buildHierarchy","items","length","stack","item","type","cssCompiledStyles","value","pop","parent","populate","ast","db","populateCommonDb","row","TreemapRows","$type","className","styleText","indent","parseInt","getItemName","join","itemData","hierarchyNodes","addNodesRecursively","String","parser","yy","parse","async","parseFunc","text","log","debug","Error","error","SECTION_INNER_PADDING","renderer","draw","_text","_version","diagram2","treemapDb","config","treemapInnerPadding","padding","title","themeVariables","titleHeight","svg","selectSvgElement","width","nodeWidth","height","nodeHeight","svgWidth","svgHeight","valueFormat","attr","configureSvgSize","useMaxWidth","formatStr","format","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","scaleOrdinal","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","hierarchy","sum","d","sort","a","b","treemapData","size","paddingTop","SECTION_HEADER_HEIGHT","paddingInner","paddingLeft","paddingRight","paddingBottom","round","treemapLayout","branchNodes","descendants","filter","sections","selectAll","data","enter","x0","y0","x1","depth","_d","i","Math","max","y1","styles2String","nodeStyles","borderStyles","labelStyles","each","self","select","originalText","totalHeaderWidth","spaceForTextContent","showValues","actualAvailableWidth","textNode","getComputedTextLength","ellipsis","currentTruncatedText","leafNodes","leaves","cell","availableWidth","availableHeight","style","currentLabelFontSize","prospectiveValueFontSize","min","combinedHeight","valueTextElement","parentCellNode","parentNode","labelElement","empty","finalLabelFontSize","parseFloat","actualValueFontSize","valueTopActualY","maxValueBottomY","availableWidthForValue","diagramPadding","setupViewPortForSVG","diagramObj","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","styles_default","treemap2","arguments","undefined","options","diagram","cssDiagram","x","y","calculateDimensionsWithPadding","viewBox","createViewBox","bounds","getBBox","accDescr","accTitle"],"sourceRoot":""}