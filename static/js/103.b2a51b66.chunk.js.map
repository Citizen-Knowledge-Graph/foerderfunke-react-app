{"version":3,"file":"static/js/103.b2a51b66.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/chunk-AACKK3MU.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-SKB7J2MH.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-353BL4L5.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/diagram-3EMPZRKU.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/utils/imperativeState.ts\nvar ImperativeState = class {\n  /**\n   * @param init - Function that creates the default state.\n   */\n  constructor(init) {\n    this.init = init;\n    this.records = this.init();\n  }\n  static {\n    __name(this, \"ImperativeState\");\n  }\n  reset() {\n    this.records = this.init();\n  }\n};\n\nexport {\n  ImperativeState\n};\n","import {\n  __name,\n  configureSvgSize,\n  log\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/rendering-util/setupViewPortForSVG.ts\nvar setupViewPortForSVG = /* @__PURE__ */ __name((svg, padding, cssDiagram, useMaxWidth) => {\n  svg.attr(\"class\", cssDiagram);\n  const { width, height, x, y } = calculateDimensionsWithPadding(svg, padding);\n  configureSvgSize(svg, height, width, useMaxWidth);\n  const viewBox = createViewBox(x, y, width, height, padding);\n  svg.attr(\"viewBox\", viewBox);\n  log.debug(`viewBox configured: ${viewBox} with padding: ${padding}`);\n}, \"setupViewPortForSVG\");\nvar calculateDimensionsWithPadding = /* @__PURE__ */ __name((svg, padding) => {\n  const bounds = svg.node()?.getBBox() || { width: 0, height: 0, x: 0, y: 0 };\n  return {\n    width: bounds.width + padding * 2,\n    height: bounds.height + padding * 2,\n    x: bounds.x,\n    y: bounds.y\n  };\n}, \"calculateDimensionsWithPadding\");\nvar createViewBox = /* @__PURE__ */ __name((x, y, width, height, padding) => {\n  return `${x - padding} ${y - padding} ${width} ${height}`;\n}, \"createViewBox\");\n\nexport {\n  setupViewPortForSVG\n};\n","import {\n  __name\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  setupViewPortForSVG\n} from \"./chunk-SKB7J2MH.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-UWXLY5YG.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-353BL4L5.mjs\";\nimport {\n  ImperativeState\n} from \"./chunk-AACKK3MU.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-55PJQP7W.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-P3VETL53.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-3XYRH5AP.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar defaultTreemapData = {\n  nodes: [],\n  levels: /* @__PURE__ */ new Map(),\n  outerNodes: [],\n  classes: /* @__PURE__ */ new Map()\n};\nvar state = new ImperativeState(() => structuredClone(defaultTreemapData));\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const defaultConfig = defaultConfig_default;\n  const userConfig = getConfig();\n  return cleanAndMerge({\n    ...defaultConfig.treemap,\n    ...userConfig.treemap ?? {}\n  });\n}, \"getConfig\");\nvar getNodes = /* @__PURE__ */ __name(() => state.records.nodes, \"getNodes\");\nvar addNode = /* @__PURE__ */ __name((node, level) => {\n  const data = state.records;\n  data.nodes.push(node);\n  data.levels.set(node, level);\n  if (level === 0) {\n    data.outerNodes.push(node);\n  }\n  if (level === 0 && !data.root) {\n    data.root = node;\n  }\n}, \"addNode\");\nvar getRoot = /* @__PURE__ */ __name(() => ({ name: \"\", children: state.records.outerNodes }), \"getRoot\");\nvar addClass = /* @__PURE__ */ __name((id, _style) => {\n  const classes = state.records.classes;\n  const styleClass = classes.get(id) ?? { id, styles: [], textStyles: [] };\n  classes.set(id, styleClass);\n  const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n  if (styles) {\n    styles.forEach((s) => {\n      if (isLabelStyle(s)) {\n        if (styleClass?.textStyles) {\n          styleClass.textStyles.push(s);\n        } else {\n          styleClass.textStyles = [s];\n        }\n      }\n      if (styleClass?.styles) {\n        styleClass.styles.push(s);\n      } else {\n        styleClass.styles = [s];\n      }\n    });\n  }\n  classes.set(id, styleClass);\n}, \"addClass\");\nvar getClasses = /* @__PURE__ */ __name(() => {\n  return state.records.classes;\n}, \"getClasses\");\nvar getStylesForClass = /* @__PURE__ */ __name((classSelector) => {\n  return state.records.classes.get(classSelector)?.styles ?? [];\n}, \"getStylesForClass\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  state.reset();\n}, \"clear\");\nvar db = {\n  getNodes,\n  addNode,\n  getRoot,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n  addClass,\n  getClasses,\n  getStylesForClass\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      populate(ast);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses2 = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses: getClasses2 };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n"],"names":["ImperativeState","constructor","init","this","records","__name","reset","setupViewPortForSVG","svg","padding","cssDiagram","useMaxWidth","attr","width","height","x","y","calculateDimensionsWithPadding","configureSvgSize","viewBox","createViewBox","log","debug","bounds","node","getBBox","populateCommonDb","ast","db","accDescr","setAccDescription","accTitle","setAccTitle","title","setDiagramTitle","defaultTreemapData","nodes","levels","Map","outerNodes","classes","state","structuredClone","getConfig2","defaultConfig","defaultConfig_default","userConfig","getConfig","cleanAndMerge","treemap","getNodes","addNode","level","data","push","set","root","getRoot","name","children","addClass","id","_style","styleClass","get","styles","textStyles","replace","split","forEach","s","isLabelStyle","getClasses","getStylesForClass","classSelector","clear","getAccTitle","getDiagramTitle","getAccDescription","buildHierarchy","items","length","stack","item","type","cssCompiledStyles","value","pop","parent","populate","row","TreemapRows","$type","className","styleText","indent","parseInt","getItemName","join","itemData","hierarchyNodes","addNodesRecursively","String","SECTION_INNER_PADDING","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","diagram","parser","parse","async","parseFunc","text","error","renderer","draw","_text","_version","diagram2","treemapDb","config","treemapInnerPadding","themeVariables","titleHeight","selectSvgElement","nodeWidth","nodeHeight","svgWidth","svgHeight","valueFormat","formatStr","format","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","scaleOrdinal","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","hierarchy","sum","d","sort","a","b","treemapData","size","paddingTop","SECTION_HEADER_HEIGHT","paddingInner","paddingLeft","paddingRight","paddingBottom","round","treemapLayout","branchNodes","descendants","filter","sections","selectAll","enter","x0","y0","x1","depth","_d","i","Math","max","y1","styles2String","nodeStyles","borderStyles","labelStyles","each","self","select","originalText","totalHeaderWidth","spaceForTextContent","showValues","actualAvailableWidth","textNode","getComputedTextLength","ellipsis","currentTruncatedText","leafNodes","leaves","cell","availableWidth","availableHeight","style","currentLabelFontSize","prospectiveValueFontSize","min","combinedHeight","valueTextElement","parentCellNode","parentNode","labelElement","empty","finalLabelFontSize","parseFloat","actualValueFontSize","valueTopActualY","maxValueBottomY","availableWidthForValue","diagramPadding","diagramObj","treemap2","arguments","undefined","options"],"sourceRoot":""}