{"version":3,"file":"static/js/502.78d3c43d.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-VX7I4HLL.mjs","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/lodash-es/map.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/lodash-es/_baseExtremum.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-PYI2724P.mjs","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-YAJQ3QCK.mjs","../node_modules/langium/src/parser/value-converter.ts","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/toInteger.js","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/langium/src/parser/token-builder.ts","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/last.js","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-6MM43HOH.mjs","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/clone.js","../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/lodash-es/flatten.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-DI7F6ITA.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-4D64QAKS.mjs","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FHLWH6W2.mjs","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/defaults.js","../node_modules/langium/src/dependency-injection.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-BFZLARZY.mjs"],"sourcesContent":["import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\r\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\r\n\r\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\r\n\r\nconst regexpParser = new RegExpParser();\r\n\r\n/**\r\n * This class is in charge of heuristically identifying start/end tokens of terminals.\r\n *\r\n * The way this works is by doing the following:\r\n * 1. Traverse the regular expression in the \"start state\"\r\n * 2. Add any encountered sets/single characters to the \"start regexp\"\r\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\r\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\r\n * 5. If we re-encounter any variable-length content we reset the end stack\r\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\r\n *\r\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\r\n */\r\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\r\n\r\n    private isStarting = true;\r\n    startRegexp: string;\r\n    private endRegexpStack: string[] = [];\r\n    multiline = false;\r\n    regex: string;\r\n\r\n    get endRegex(): string {\r\n        return this.endRegexpStack.join('');\r\n    }\r\n\r\n    reset(regex: string): void {\r\n        this.multiline = false;\r\n        this.regex = regex;\r\n        this.startRegexp = '';\r\n        this.isStarting = true;\r\n        this.endRegexpStack = [];\r\n    }\r\n\r\n    override visitGroup(node: Group) {\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        }\r\n    }\r\n\r\n    override visitCharacter(node: Character): void {\r\n        const char = String.fromCharCode(node.value);\r\n        if (!this.multiline && char === '\\n') {\r\n            this.multiline = true;\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const escapedChar = escapeRegExp(char);\r\n            this.endRegexpStack.push(escapedChar);\r\n            if (this.isStarting) {\r\n                this.startRegexp += escapedChar;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitSet(node: Set): void {\r\n        if (!this.multiline) {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            const regex = new RegExp(set);\r\n            this.multiline = Boolean('\\n'.match(regex));\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            this.endRegexpStack.push(set);\r\n            if (this.isStarting) {\r\n                this.startRegexp += set;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitChildren(node: IRegExpAST): void {\r\n        if (node.type === 'Group') {\r\n            // Ignore children of groups with quantifier (+/*/?)\r\n            // These groups are unrelated to start/end tokens of terminals\r\n            const group = node as Group;\r\n            if (group.quantifier) {\r\n                return;\r\n            }\r\n        }\r\n        super.visitChildren(node);\r\n    }\r\n}\r\n\r\nconst visitor = new TerminalRegExpVisitor();\r\n\r\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\r\n    try {\r\n        if (typeof regexp !== 'string') {\r\n            regexp = regexp.source;\r\n        }\r\n        regexp = `/${regexp}/`;\r\n        const pattern = regexpParser.pattern(regexp);\r\n        const parts: Array<{ start: string, end: string }> = [];\r\n        for (const alternative of pattern.value.value) {\r\n            visitor.reset(regexp);\r\n            visitor.visit(alternative);\r\n            parts.push({\r\n                start: visitor.startRegexp,\r\n                end: visitor.endRegex\r\n            });\r\n        }\r\n        return parts;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function isMultilineComment(regexp: RegExp | string): boolean {\r\n    try {\r\n        if (typeof regexp === 'string') {\r\n            regexp = new RegExp(regexp);\r\n        }\r\n        regexp = regexp.toString();\r\n        visitor.reset(regexp);\r\n        // Parsing the pattern might fail (since it's user code)\r\n        visitor.visit(regexpParser.pattern(regexp));\r\n        return visitor.multiline;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\r\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\r\n */\r\nexport const whitespaceCharacters = (\r\n    '\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\r\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\r\n\r\nexport function isWhitespace(value: RegExp | string): boolean {\r\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\r\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\r\n}\r\n\r\nexport function escapeRegExp(value: string): string {\r\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport function getCaseInsensitivePattern(keyword: string): string {\r\n    return Array.prototype.map.call(keyword, letter =>\r\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\r\n    ).join('');\r\n}\r\n\r\n/**\r\n * Determines whether the given input has a partial match with the specified regex.\r\n * @param regex The regex to partially match against\r\n * @param input The input string\r\n * @returns Whether any match exists.\r\n */\r\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\r\n    const partial = partialRegExp(regex);\r\n    const match = input.match(partial);\r\n    return !!match && match[0].length > 0;\r\n}\r\n\r\n/**\r\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\r\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\r\n * @param regex The input regex to be converted.\r\n * @returns A partial regex constructed from the input regex.\r\n */\r\nexport function partialRegExp(regex: RegExp | string): RegExp {\r\n    if (typeof regex === 'string') {\r\n        regex = new RegExp(regex);\r\n    }\r\n    const re = regex, source = regex.source;\r\n    let i = 0;\r\n\r\n    function process() {\r\n        let result = '',\r\n            tmp;\r\n\r\n        function appendRaw(nbChars: number) {\r\n            result += source.substr(i, nbChars);\r\n            i += nbChars;\r\n        }\r\n\r\n        function appendOptional(nbChars: number) {\r\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\r\n            i += nbChars;\r\n        }\r\n\r\n        while (i < source.length) {\r\n            switch (source[i]) {\r\n                case '\\\\':\r\n                    switch (source[i + 1]) {\r\n                        case 'c':\r\n                            appendOptional(3);\r\n                            break;\r\n                        case 'x':\r\n                            appendOptional(4);\r\n                            break;\r\n                        case 'u':\r\n                            if (re.unicode) {\r\n                                if (source[i + 2] === '{') {\r\n                                    appendOptional(source.indexOf('}', i) - i + 1);\r\n                                } else {\r\n                                    appendOptional(6);\r\n                                }\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'p':\r\n                        case 'P':\r\n                            if (re.unicode) {\r\n                                appendOptional(source.indexOf('}', i) - i + 1);\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'k':\r\n                            appendOptional(source.indexOf('>', i) - i + 1);\r\n                            break;\r\n                        default:\r\n                            appendOptional(2);\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                case '[':\r\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source) || [];\r\n                    appendOptional(tmp[0].length);\r\n                    break;\r\n\r\n                case '|':\r\n                case '^':\r\n                case '$':\r\n                case '*':\r\n                case '+':\r\n                case '?':\r\n                    appendRaw(1);\r\n                    break;\r\n                case '{':\r\n                    tmp = /\\{\\d+,?\\d*\\}/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source);\r\n                    if (tmp) {\r\n                        appendRaw(tmp[0].length);\r\n                    } else {\r\n                        appendOptional(1);\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    if (source[i + 1] === '?') {\r\n                        switch (source[i + 2]) {\r\n                            case ':':\r\n                                result += '(?:';\r\n                                i += 3;\r\n                                result += process() + '|$)';\r\n                                break;\r\n                            case '=':\r\n                                result += '(?=';\r\n                                i += 3;\r\n                                result += process() + ')';\r\n                                break;\r\n                            case '!':\r\n                                tmp = i;\r\n                                i += 3;\r\n                                process();\r\n                                result += source.substr(tmp, i - tmp);\r\n                                break;\r\n                            case '<':\r\n                                switch (source[i + 3]) {\r\n                                    case '=':\r\n                                    case '!':\r\n                                        tmp = i;\r\n                                        i += 4;\r\n                                        process();\r\n                                        result += source.substr(tmp, i - tmp);\r\n                                        break;\r\n                                    default:\r\n                                        appendRaw(source.indexOf('>', i) - i + 1);\r\n                                        result += process() + '|$)';\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        appendRaw(1);\r\n                        result += process() + '|$)';\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    ++i;\r\n                    return result;\r\n                default:\r\n                    appendOptional(1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return new RegExp(process(), regex.flags);\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  TreemapGeneratedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/treemap/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      Treemap: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 && // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */ __name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Treemap = inject(\n    createDefaultCoreModule({ shared }),\n    TreemapGeneratedModule,\n    TreemapModule\n  );\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return { shared, Treemap };\n}\n__name(createTreemapServices, \"createTreemapServices\");\n\nexport {\n  TreemapModule,\n  createTreemapServices\n};\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { assertUnreachable } from '../utils/errors.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { isCompositeCstNode } from '../syntax-tree.js';\r\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\r\nimport { streamCst } from './cst-utils.js';\r\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\r\n\r\n/**\r\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\r\n * the result is `undefined`.\r\n */\r\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\r\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\r\n}\r\n\r\n/**\r\n * Returns all hidden terminal rules of the given grammar, if any.\r\n */\r\nexport function getHiddenRules(grammar: ast.Grammar) {\r\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\r\n}\r\n\r\n/**\r\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\r\n *\r\n * @param grammar The grammar that contains all rules\r\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\r\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\r\n *      this function returns all rules of the specified grammar.\r\n */\r\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\r\n    const ruleNames = new Set<string>();\r\n    const entryRule = getEntryRule(grammar);\r\n    if (!entryRule) {\r\n        return new Set(grammar.rules);\r\n    }\r\n\r\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\r\n    for (const rule of topMostRules) {\r\n        ruleDfs(rule, ruleNames, allTerminals);\r\n    }\r\n\r\n    const rules = new Set<ast.AbstractRule>();\r\n    for (const rule of grammar.rules) {\r\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\r\n            rules.add(rule);\r\n        }\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\r\n    visitedSet.add(rule.name);\r\n    streamAllContents(rule).forEach(node => {\r\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\r\n            const refRule = node.rule.ref;\r\n            if (refRule && !visitedSet.has(refRule.name)) {\r\n                ruleDfs(refRule, visitedSet, allTerminals);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\r\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\r\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\r\n *\r\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\r\n * and cannot be inferred.\r\n */\r\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\r\n    if (crossRef.terminal) {\r\n        return crossRef.terminal;\r\n    } else if (crossRef.type.ref) {\r\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\r\n        return nameAssigment?.terminal;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\r\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\r\n * that contains visible characters is considered a comment.\r\n */\r\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\r\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that contribute to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\r\n */\r\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\r\n    if (!node || !property) {\r\n        return [];\r\n    }\r\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that contributes to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\r\n    if (!node || !property) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\r\n    if (!first) {\r\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\r\n        if (nodeFeature && nodeFeature.feature === property) {\r\n            return [node];\r\n        }\r\n    }\r\n    if (isCompositeCstNode(node) && node.astNode === element) {\r\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that correspond to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\r\n * @param keyword A keyword as specified in the grammar.\r\n */\r\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\r\n    if (!node) {\r\n        return [];\r\n    }\r\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that corresponds to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\r\n * @param keyword A keyword as specified in the grammar.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\r\n    if (node.astNode !== element) {\r\n        return [];\r\n    }\r\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\r\n        return [node];\r\n    }\r\n    const treeIterator = streamCst(node).iterator();\r\n    let result: IteratorResult<CstNode>;\r\n    const keywordNodes: CstNode[] = [];\r\n    do {\r\n        result = treeIterator.next();\r\n        if (!result.done) {\r\n            const childNode = result.value;\r\n            if (childNode.astNode === element) {\r\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\r\n                    keywordNodes.push(childNode);\r\n                }\r\n            } else {\r\n                treeIterator.prune();\r\n            }\r\n        }\r\n    } while (!result.done);\r\n    return keywordNodes;\r\n}\r\n\r\n/**\r\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\r\n * node is returned. If no assignment is found, the result is `undefined`.\r\n *\r\n * @param cstNode A CST node for which to find a property assignment.\r\n */\r\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\r\n    const astNode = cstNode.astNode;\r\n    // Only search until the ast node of the parent cst node is no longer the original ast node\r\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\r\n    while (astNode === cstNode.container?.astNode) {\r\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\r\n        if (assignment) {\r\n            return assignment;\r\n        }\r\n        cstNode = cstNode.container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\r\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\r\n * this function returns `undefined`.\r\n */\r\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\r\n    let startNode: AstNode = type;\r\n    if (ast.isInferredType(startNode)) {\r\n        // for inferred types, the location to start searching for the name-assignment is different\r\n        if (ast.isAction(startNode.$container)) {\r\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\r\n            startNode = startNode.$container.$container!;\r\n        } else if (ast.isParserRule(startNode.$container)) {\r\n            // investigate the parser rule with the explicitly inferred type\r\n            startNode = startNode.$container;\r\n        } else {\r\n            assertUnreachable(startNode.$container);\r\n        }\r\n    }\r\n    return findNameAssignmentInternal(type, startNode, new Map());\r\n}\r\n\r\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\r\n    // the cache is only required to prevent infinite loops\r\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\r\n        let childAssignment: ast.Assignment | undefined = undefined;\r\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\r\n        // No parent assignment implies unassigned rule call\r\n        if (!parentAssignment) {\r\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\r\n        }\r\n        cache.set(type, childAssignment);\r\n        return childAssignment;\r\n    }\r\n\r\n    if (cache.has(type)) {\r\n        return cache.get(type);\r\n    }\r\n    cache.set(type, undefined);\r\n    for (const node of streamAllContents(startNode)) {\r\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\r\n            cache.set(type, node);\r\n            return node;\r\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\r\n            return go(node, node.rule.ref);\r\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\r\n            return go(node, node.typeRef.ref);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\r\n    const parent = element.$container;\r\n    if (ast.isGroup(parent)) {\r\n        const elements = parent.elements;\r\n        const index = elements.indexOf(element);\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            const item = elements[i];\r\n            if (ast.isAction(item)) {\r\n                return item;\r\n            } else {\r\n                const action = streamAllContents(elements[i]).find(ast.isAction);\r\n                if (action) {\r\n                    return action;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ast.isAbstractElement(parent)) {\r\n        return getActionAtElement(parent);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type Cardinality = '?' | '*' | '+' | undefined;\r\nexport type Operator = '=' | '+=' | '?=' | undefined;\r\n\r\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\r\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\r\n}\r\n\r\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\r\n    return cardinality === '*' || cardinality === '+';\r\n}\r\n\r\nexport function isArrayOperator(operator?: Operator): boolean {\r\n    return operator === '+=';\r\n}\r\n\r\n/**\r\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\r\n * primitive return type like `number`, `boolean`, etc.\r\n */\r\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\r\n    return isDataTypeRuleInternal(rule, new Set());\r\n}\r\n\r\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\r\n    if (visited.has(rule)) {\r\n        return true;\r\n    } else {\r\n        visited.add(rule);\r\n    }\r\n    for (const node of streamAllContents(rule)) {\r\n        if (ast.isRuleCall(node)) {\r\n            if (!node.rule.ref) {\r\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\r\n                return false;\r\n            }\r\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\r\n                return false;\r\n            }\r\n        } else if (ast.isAssignment(node)) {\r\n            return false;\r\n        } else if (ast.isAction(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return Boolean(rule.definition);\r\n}\r\n\r\nexport function isDataType(type: ast.Type): boolean {\r\n    return isDataTypeInternal(type.type, new Set());\r\n}\r\n\r\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\r\n    if (visited.has(type)) {\r\n        return true;\r\n    } else {\r\n        visited.add(type);\r\n    }\r\n    if (ast.isArrayType(type)) {\r\n        return false;\r\n    } else if (ast.isReferenceType(type)) {\r\n        return false;\r\n    } else if (ast.isUnionType(type)) {\r\n        return type.types.every(e => isDataTypeInternal(e, visited));\r\n    } else if (ast.isSimpleType(type)) {\r\n        if (type.primitiveType !== undefined) {\r\n            return true;\r\n        } else if (type.stringType !== undefined) {\r\n            return true;\r\n        } else if (type.typeRef !== undefined) {\r\n            const ref = type.typeRef.ref;\r\n            if (ast.isType(ref)) {\r\n                return isDataTypeInternal(ref.type, visited);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\r\n    if (rule.inferredType) {\r\n        return rule.inferredType.name;\r\n    } else if (rule.dataType) {\r\n        return rule.dataType;\r\n    } else if (rule.returnType) {\r\n        const refType = rule.returnType.ref;\r\n        if (refType) {\r\n            // check if we need to check Action as return type\r\n            if (ast.isParserRule(refType)) {\r\n                return refType.name;\r\n            } else if (ast.isInterface(refType) || ast.isType(refType)) {\r\n                return refType.name;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\r\n    if (ast.isParserRule(type)) {\r\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\r\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\r\n        return type.name;\r\n    } else if (ast.isAction(type)) {\r\n        const actionType = getActionType(type);\r\n        if (actionType) {\r\n            return actionType;\r\n        }\r\n    } else if (ast.isInferredType(type)) {\r\n        return type.name;\r\n    }\r\n    throw new Error('Cannot get name of Unknown Type');\r\n}\r\n\r\nexport function getActionType(action: ast.Action): string | undefined {\r\n    if (action.inferredType) {\r\n        return action.inferredType.name;\r\n    } else if (action.type?.ref) {\r\n        return getTypeName(action.type.ref);\r\n    }\r\n    return undefined; // not inferring and not referencing a valid type\r\n}\r\n\r\n/**\r\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\r\n * For data type rules, the name of the rule is returned,\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\r\n * @param rule the given rule\r\n * @returns the name of the AST node type of the rule\r\n */\r\nexport function getRuleTypeName(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\n/**\r\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\r\n * For data type rules, the name of the declared return type of the rule is returned (if any),\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\r\n * @param rule the given rule\r\n * @returns the name of the type of the produced values of the rule at runtime\r\n */\r\nexport function getRuleType(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\r\n    const flags: Flags = {\r\n        s: false,\r\n        i: false,\r\n        u: false\r\n    };\r\n    const source = abstractElementToRegex(terminalRule.definition, flags);\r\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\r\n    return new RegExp(source, flagText);\r\n}\r\n\r\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\r\nconst WILDCARD = /[\\s\\S]/.source;\r\n\r\ntype Flags = {\r\n    s: boolean;\r\n    i: boolean;\r\n    u: boolean;\r\n}\r\n\r\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\r\n    if (ast.isTerminalAlternatives(element)) {\r\n        return terminalAlternativesToRegex(element);\r\n    } else if (ast.isTerminalGroup(element)) {\r\n        return terminalGroupToRegex(element);\r\n    } else if (ast.isCharacterRange(element)) {\r\n        return characterRangeToRegex(element);\r\n    } else if (ast.isTerminalRuleCall(element)) {\r\n        const rule = element.rule.ref;\r\n        if (!rule) {\r\n            throw new Error('Missing rule reference.');\r\n        }\r\n        return withCardinality(abstractElementToRegex(rule.definition), {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else if (ast.isNegatedToken(element)) {\r\n        return negateTokenToRegex(element);\r\n    } else if (ast.isUntilToken(element)) {\r\n        return untilTokenToRegex(element);\r\n    } else if (ast.isRegexToken(element)) {\r\n        const lastSlash = element.regex.lastIndexOf('/');\r\n        const source = element.regex.substring(1, lastSlash);\r\n        const regexFlags = element.regex.substring(lastSlash + 1);\r\n        if (flags) {\r\n            flags.i = regexFlags.includes('i');\r\n            flags.s = regexFlags.includes('s');\r\n            flags.u = regexFlags.includes('u');\r\n        }\r\n        return withCardinality(source, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead,\r\n            wrap: false\r\n        });\r\n    } else if (ast.isWildcard(element)) {\r\n        return withCardinality(WILDCARD, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else {\r\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\r\n    }\r\n}\r\n\r\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\r\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\r\n        cardinality: alternatives.cardinality,\r\n        lookahead: alternatives.lookahead\r\n    });\r\n}\r\n\r\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\r\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\r\n        cardinality: group.cardinality,\r\n        lookahead: group.lookahead\r\n    });\r\n}\r\n\r\nfunction untilTokenToRegex(until: ast.UntilToken): string {\r\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\r\n        cardinality: until.cardinality,\r\n        lookahead: until.lookahead\r\n    });\r\n}\r\n\r\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\r\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\r\n        cardinality: negate.cardinality,\r\n        lookahead: negate.lookahead\r\n    });\r\n}\r\n\r\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\r\n    if (range.right) {\r\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\r\n            cardinality: range.cardinality,\r\n            lookahead: range.lookahead,\r\n            wrap: false\r\n        });\r\n    }\r\n    return withCardinality(keywordToRegex(range.left), {\r\n        cardinality: range.cardinality,\r\n        lookahead: range.lookahead,\r\n        wrap: false\r\n    });\r\n}\r\n\r\nfunction keywordToRegex(keyword: ast.Keyword): string {\r\n    return escapeRegExp(keyword.value);\r\n}\r\n\r\nfunction withCardinality(regex: string, options: {\r\n    cardinality?: string\r\n    wrap?: boolean\r\n    lookahead?: string\r\n}): string {\r\n    if (options.wrap !== false || options.lookahead) {\r\n        regex = `(${options.lookahead ?? ''}${regex})`;\r\n    }\r\n    if (options.cardinality) {\r\n        return `${regex}${options.cardinality}`;\r\n    }\r\n    return regex;\r\n}\r\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.3.0.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\r\nimport { AbstractAstReflection } from '../../syntax-tree.js';\r\n\r\nexport const LangiumGrammarTerminals = {\r\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\r\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\r\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\r\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\r\n    WS: /\\s+/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type LangiumGrammarTerminalNames = keyof typeof LangiumGrammarTerminals;\r\n\r\nexport type LangiumGrammarKeywordNames = \r\n    | \"!\"\r\n    | \"&\"\r\n    | \"(\"\r\n    | \")\"\r\n    | \"*\"\r\n    | \"+\"\r\n    | \"+=\"\r\n    | \",\"\r\n    | \"->\"\r\n    | \".\"\r\n    | \"..\"\r\n    | \":\"\r\n    | \";\"\r\n    | \"<\"\r\n    | \"=\"\r\n    | \"=>\"\r\n    | \">\"\r\n    | \"?\"\r\n    | \"?!\"\r\n    | \"?<!\"\r\n    | \"?<=\"\r\n    | \"?=\"\r\n    | \"@\"\r\n    | \"Date\"\r\n    | \"EOF\"\r\n    | \"[\"\r\n    | \"]\"\r\n    | \"bigint\"\r\n    | \"boolean\"\r\n    | \"current\"\r\n    | \"entry\"\r\n    | \"extends\"\r\n    | \"false\"\r\n    | \"fragment\"\r\n    | \"grammar\"\r\n    | \"hidden\"\r\n    | \"import\"\r\n    | \"infer\"\r\n    | \"infers\"\r\n    | \"interface\"\r\n    | \"number\"\r\n    | \"returns\"\r\n    | \"string\"\r\n    | \"terminal\"\r\n    | \"true\"\r\n    | \"type\"\r\n    | \"with\"\r\n    | \"{\"\r\n    | \"|\"\r\n    | \"}\";\r\n\r\nexport type LangiumGrammarTokenNames = LangiumGrammarTerminalNames | LangiumGrammarKeywordNames;\r\n\r\nexport type AbstractRule = ParserRule | TerminalRule;\r\n\r\nexport const AbstractRule = 'AbstractRule';\r\n\r\nexport function isAbstractRule(item: unknown): item is AbstractRule {\r\n    return reflection.isInstance(item, AbstractRule);\r\n}\r\n\r\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\r\n\r\nexport const AbstractType = 'AbstractType';\r\n\r\nexport function isAbstractType(item: unknown): item is AbstractType {\r\n    return reflection.isInstance(item, AbstractType);\r\n}\r\n\r\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\r\n\r\nexport const Condition = 'Condition';\r\n\r\nexport function isCondition(item: unknown): item is Condition {\r\n    return reflection.isInstance(item, Condition);\r\n}\r\n\r\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\r\n\r\nexport function isFeatureName(item: unknown): item is FeatureName {\r\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\r\n}\r\n\r\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\r\n\r\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\r\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\r\n}\r\n\r\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\r\n\r\nexport const TypeDefinition = 'TypeDefinition';\r\n\r\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\r\n    return reflection.isInstance(item, TypeDefinition);\r\n}\r\n\r\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\r\n\r\nexport const ValueLiteral = 'ValueLiteral';\r\n\r\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\r\n    return reflection.isInstance(item, ValueLiteral);\r\n}\r\n\r\nexport interface AbstractElement extends AstNode {\r\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\r\n    cardinality?: '*' | '+' | '?';\r\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\r\n}\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport interface ArrayLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'ArrayLiteral';\r\n    elements: Array<ValueLiteral>;\r\n}\r\n\r\nexport const ArrayLiteral = 'ArrayLiteral';\r\n\r\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\r\n    return reflection.isInstance(item, ArrayLiteral);\r\n}\r\n\r\nexport interface ArrayType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ArrayType';\r\n    elementType: TypeDefinition;\r\n}\r\n\r\nexport const ArrayType = 'ArrayType';\r\n\r\nexport function isArrayType(item: unknown): item is ArrayType {\r\n    return reflection.isInstance(item, ArrayType);\r\n}\r\n\r\nexport interface BooleanLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\r\n    readonly $type: 'BooleanLiteral';\r\n    true: boolean;\r\n}\r\n\r\nexport const BooleanLiteral = 'BooleanLiteral';\r\n\r\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\r\n    return reflection.isInstance(item, BooleanLiteral);\r\n}\r\n\r\nexport interface Conjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Conjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Conjunction = 'Conjunction';\r\n\r\nexport function isConjunction(item: unknown): item is Conjunction {\r\n    return reflection.isInstance(item, Conjunction);\r\n}\r\n\r\nexport interface Disjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Disjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Disjunction = 'Disjunction';\r\n\r\nexport function isDisjunction(item: unknown): item is Disjunction {\r\n    return reflection.isInstance(item, Disjunction);\r\n}\r\n\r\nexport interface Grammar extends AstNode {\r\n    readonly $type: 'Grammar';\r\n    definesHiddenTokens: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    imports: Array<GrammarImport>;\r\n    interfaces: Array<Interface>;\r\n    isDeclared: boolean;\r\n    name?: string;\r\n    rules: Array<AbstractRule>;\r\n    types: Array<Type>;\r\n    usedGrammars: Array<Reference<Grammar>>;\r\n}\r\n\r\nexport const Grammar = 'Grammar';\r\n\r\nexport function isGrammar(item: unknown): item is Grammar {\r\n    return reflection.isInstance(item, Grammar);\r\n}\r\n\r\nexport interface GrammarImport extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'GrammarImport';\r\n    path: string;\r\n}\r\n\r\nexport const GrammarImport = 'GrammarImport';\r\n\r\nexport function isGrammarImport(item: unknown): item is GrammarImport {\r\n    return reflection.isInstance(item, GrammarImport);\r\n}\r\n\r\nexport interface InferredType extends AstNode {\r\n    readonly $container: Action | ParserRule;\r\n    readonly $type: 'InferredType';\r\n    name: string;\r\n}\r\n\r\nexport const InferredType = 'InferredType';\r\n\r\nexport function isInferredType(item: unknown): item is InferredType {\r\n    return reflection.isInstance(item, InferredType);\r\n}\r\n\r\nexport interface Interface extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Interface';\r\n    attributes: Array<TypeAttribute>;\r\n    name: string;\r\n    superTypes: Array<Reference<AbstractType>>;\r\n}\r\n\r\nexport const Interface = 'Interface';\r\n\r\nexport function isInterface(item: unknown): item is Interface {\r\n    return reflection.isInstance(item, Interface);\r\n}\r\n\r\nexport interface NamedArgument extends AstNode {\r\n    readonly $container: RuleCall;\r\n    readonly $type: 'NamedArgument';\r\n    calledByName: boolean;\r\n    parameter?: Reference<Parameter>;\r\n    value: Condition;\r\n}\r\n\r\nexport const NamedArgument = 'NamedArgument';\r\n\r\nexport function isNamedArgument(item: unknown): item is NamedArgument {\r\n    return reflection.isInstance(item, NamedArgument);\r\n}\r\n\r\nexport interface Negation extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Negation';\r\n    value: Condition;\r\n}\r\n\r\nexport const Negation = 'Negation';\r\n\r\nexport function isNegation(item: unknown): item is Negation {\r\n    return reflection.isInstance(item, Negation);\r\n}\r\n\r\nexport interface NumberLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'NumberLiteral';\r\n    value: number;\r\n}\r\n\r\nexport const NumberLiteral = 'NumberLiteral';\r\n\r\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\r\n    return reflection.isInstance(item, NumberLiteral);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: ParserRule;\r\n    readonly $type: 'Parameter';\r\n    name: string;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface ParameterReference extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'ParameterReference';\r\n    parameter: Reference<Parameter>;\r\n}\r\n\r\nexport const ParameterReference = 'ParameterReference';\r\n\r\nexport function isParameterReference(item: unknown): item is ParameterReference {\r\n    return reflection.isInstance(item, ParameterReference);\r\n}\r\n\r\nexport interface ParserRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'ParserRule';\r\n    dataType?: PrimitiveType;\r\n    definesHiddenTokens: boolean;\r\n    definition: AbstractElement;\r\n    entry: boolean;\r\n    fragment: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    inferredType?: InferredType;\r\n    name: string;\r\n    parameters: Array<Parameter>;\r\n    returnType?: Reference<AbstractType>;\r\n    wildcard: boolean;\r\n}\r\n\r\nexport const ParserRule = 'ParserRule';\r\n\r\nexport function isParserRule(item: unknown): item is ParserRule {\r\n    return reflection.isInstance(item, ParserRule);\r\n}\r\n\r\nexport interface ReferenceType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ReferenceType';\r\n    referenceType: TypeDefinition;\r\n}\r\n\r\nexport const ReferenceType = 'ReferenceType';\r\n\r\nexport function isReferenceType(item: unknown): item is ReferenceType {\r\n    return reflection.isInstance(item, ReferenceType);\r\n}\r\n\r\nexport interface ReturnType extends AstNode {\r\n    readonly $container: TerminalRule;\r\n    readonly $type: 'ReturnType';\r\n    name: PrimitiveType | string;\r\n}\r\n\r\nexport const ReturnType = 'ReturnType';\r\n\r\nexport function isReturnType(item: unknown): item is ReturnType {\r\n    return reflection.isInstance(item, ReturnType);\r\n}\r\n\r\nexport interface SimpleType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'SimpleType';\r\n    primitiveType?: PrimitiveType;\r\n    stringType?: string;\r\n    typeRef?: Reference<AbstractType>;\r\n}\r\n\r\nexport const SimpleType = 'SimpleType';\r\n\r\nexport function isSimpleType(item: unknown): item is SimpleType {\r\n    return reflection.isInstance(item, SimpleType);\r\n}\r\n\r\nexport interface StringLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'StringLiteral';\r\n    value: string;\r\n}\r\n\r\nexport const StringLiteral = 'StringLiteral';\r\n\r\nexport function isStringLiteral(item: unknown): item is StringLiteral {\r\n    return reflection.isInstance(item, StringLiteral);\r\n}\r\n\r\nexport interface TerminalRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'TerminalRule';\r\n    definition: AbstractElement;\r\n    fragment: boolean;\r\n    hidden: boolean;\r\n    name: string;\r\n    type?: ReturnType;\r\n}\r\n\r\nexport const TerminalRule = 'TerminalRule';\r\n\r\nexport function isTerminalRule(item: unknown): item is TerminalRule {\r\n    return reflection.isInstance(item, TerminalRule);\r\n}\r\n\r\nexport interface Type extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Type';\r\n    name: string;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const Type = 'Type';\r\n\r\nexport function isType(item: unknown): item is Type {\r\n    return reflection.isInstance(item, Type);\r\n}\r\n\r\nexport interface TypeAttribute extends AstNode {\r\n    readonly $container: Interface;\r\n    readonly $type: 'TypeAttribute';\r\n    defaultValue?: ValueLiteral;\r\n    isOptional: boolean;\r\n    name: FeatureName;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const TypeAttribute = 'TypeAttribute';\r\n\r\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\r\n    return reflection.isInstance(item, TypeAttribute);\r\n}\r\n\r\nexport interface UnionType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'UnionType';\r\n    types: Array<TypeDefinition>;\r\n}\r\n\r\nexport const UnionType = 'UnionType';\r\n\r\nexport function isUnionType(item: unknown): item is UnionType {\r\n    return reflection.isInstance(item, UnionType);\r\n}\r\n\r\nexport interface Action extends AbstractElement {\r\n    readonly $type: 'Action';\r\n    feature?: FeatureName;\r\n    inferredType?: InferredType;\r\n    operator?: '+=' | '=';\r\n    type?: Reference<AbstractType>;\r\n}\r\n\r\nexport const Action = 'Action';\r\n\r\nexport function isAction(item: unknown): item is Action {\r\n    return reflection.isInstance(item, Action);\r\n}\r\n\r\nexport interface Alternatives extends AbstractElement {\r\n    readonly $type: 'Alternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const Alternatives = 'Alternatives';\r\n\r\nexport function isAlternatives(item: unknown): item is Alternatives {\r\n    return reflection.isInstance(item, Alternatives);\r\n}\r\n\r\nexport interface Assignment extends AbstractElement {\r\n    readonly $type: 'Assignment';\r\n    feature: FeatureName;\r\n    operator: '+=' | '=' | '?=';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const Assignment = 'Assignment';\r\n\r\nexport function isAssignment(item: unknown): item is Assignment {\r\n    return reflection.isInstance(item, Assignment);\r\n}\r\n\r\nexport interface CharacterRange extends AbstractElement {\r\n    readonly $type: 'CharacterRange';\r\n    left: Keyword;\r\n    right?: Keyword;\r\n}\r\n\r\nexport const CharacterRange = 'CharacterRange';\r\n\r\nexport function isCharacterRange(item: unknown): item is CharacterRange {\r\n    return reflection.isInstance(item, CharacterRange);\r\n}\r\n\r\nexport interface CrossReference extends AbstractElement {\r\n    readonly $type: 'CrossReference';\r\n    deprecatedSyntax: boolean;\r\n    terminal?: AbstractElement;\r\n    type: Reference<AbstractType>;\r\n}\r\n\r\nexport const CrossReference = 'CrossReference';\r\n\r\nexport function isCrossReference(item: unknown): item is CrossReference {\r\n    return reflection.isInstance(item, CrossReference);\r\n}\r\n\r\nexport interface EndOfFile extends AbstractElement {\r\n    readonly $type: 'EndOfFile';\r\n}\r\n\r\nexport const EndOfFile = 'EndOfFile';\r\n\r\nexport function isEndOfFile(item: unknown): item is EndOfFile {\r\n    return reflection.isInstance(item, EndOfFile);\r\n}\r\n\r\nexport interface Group extends AbstractElement {\r\n    readonly $type: 'Group';\r\n    elements: Array<AbstractElement>;\r\n    guardCondition?: Condition;\r\n}\r\n\r\nexport const Group = 'Group';\r\n\r\nexport function isGroup(item: unknown): item is Group {\r\n    return reflection.isInstance(item, Group);\r\n}\r\n\r\nexport interface Keyword extends AbstractElement {\r\n    readonly $container: CharacterRange;\r\n    readonly $type: 'Keyword';\r\n    value: string;\r\n}\r\n\r\nexport const Keyword = 'Keyword';\r\n\r\nexport function isKeyword(item: unknown): item is Keyword {\r\n    return reflection.isInstance(item, Keyword);\r\n}\r\n\r\nexport interface NegatedToken extends AbstractElement {\r\n    readonly $type: 'NegatedToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const NegatedToken = 'NegatedToken';\r\n\r\nexport function isNegatedToken(item: unknown): item is NegatedToken {\r\n    return reflection.isInstance(item, NegatedToken);\r\n}\r\n\r\nexport interface RegexToken extends AbstractElement {\r\n    readonly $type: 'RegexToken';\r\n    regex: string;\r\n}\r\n\r\nexport const RegexToken = 'RegexToken';\r\n\r\nexport function isRegexToken(item: unknown): item is RegexToken {\r\n    return reflection.isInstance(item, RegexToken);\r\n}\r\n\r\nexport interface RuleCall extends AbstractElement {\r\n    readonly $type: 'RuleCall';\r\n    arguments: Array<NamedArgument>;\r\n    rule: Reference<AbstractRule>;\r\n}\r\n\r\nexport const RuleCall = 'RuleCall';\r\n\r\nexport function isRuleCall(item: unknown): item is RuleCall {\r\n    return reflection.isInstance(item, RuleCall);\r\n}\r\n\r\nexport interface TerminalAlternatives extends AbstractElement {\r\n    readonly $type: 'TerminalAlternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalAlternatives = 'TerminalAlternatives';\r\n\r\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\r\n    return reflection.isInstance(item, TerminalAlternatives);\r\n}\r\n\r\nexport interface TerminalGroup extends AbstractElement {\r\n    readonly $type: 'TerminalGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalGroup = 'TerminalGroup';\r\n\r\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\r\n    return reflection.isInstance(item, TerminalGroup);\r\n}\r\n\r\nexport interface TerminalRuleCall extends AbstractElement {\r\n    readonly $type: 'TerminalRuleCall';\r\n    rule: Reference<TerminalRule>;\r\n}\r\n\r\nexport const TerminalRuleCall = 'TerminalRuleCall';\r\n\r\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\r\n    return reflection.isInstance(item, TerminalRuleCall);\r\n}\r\n\r\nexport interface UnorderedGroup extends AbstractElement {\r\n    readonly $type: 'UnorderedGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const UnorderedGroup = 'UnorderedGroup';\r\n\r\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\r\n    return reflection.isInstance(item, UnorderedGroup);\r\n}\r\n\r\nexport interface UntilToken extends AbstractElement {\r\n    readonly $type: 'UntilToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const UntilToken = 'UntilToken';\r\n\r\nexport function isUntilToken(item: unknown): item is UntilToken {\r\n    return reflection.isInstance(item, UntilToken);\r\n}\r\n\r\nexport interface Wildcard extends AbstractElement {\r\n    readonly $type: 'Wildcard';\r\n}\r\n\r\nexport const Wildcard = 'Wildcard';\r\n\r\nexport function isWildcard(item: unknown): item is Wildcard {\r\n    return reflection.isInstance(item, Wildcard);\r\n}\r\n\r\nexport type LangiumGrammarAstType = {\r\n    AbstractElement: AbstractElement\r\n    AbstractRule: AbstractRule\r\n    AbstractType: AbstractType\r\n    Action: Action\r\n    Alternatives: Alternatives\r\n    ArrayLiteral: ArrayLiteral\r\n    ArrayType: ArrayType\r\n    Assignment: Assignment\r\n    BooleanLiteral: BooleanLiteral\r\n    CharacterRange: CharacterRange\r\n    Condition: Condition\r\n    Conjunction: Conjunction\r\n    CrossReference: CrossReference\r\n    Disjunction: Disjunction\r\n    EndOfFile: EndOfFile\r\n    Grammar: Grammar\r\n    GrammarImport: GrammarImport\r\n    Group: Group\r\n    InferredType: InferredType\r\n    Interface: Interface\r\n    Keyword: Keyword\r\n    NamedArgument: NamedArgument\r\n    NegatedToken: NegatedToken\r\n    Negation: Negation\r\n    NumberLiteral: NumberLiteral\r\n    Parameter: Parameter\r\n    ParameterReference: ParameterReference\r\n    ParserRule: ParserRule\r\n    ReferenceType: ReferenceType\r\n    RegexToken: RegexToken\r\n    ReturnType: ReturnType\r\n    RuleCall: RuleCall\r\n    SimpleType: SimpleType\r\n    StringLiteral: StringLiteral\r\n    TerminalAlternatives: TerminalAlternatives\r\n    TerminalGroup: TerminalGroup\r\n    TerminalRule: TerminalRule\r\n    TerminalRuleCall: TerminalRuleCall\r\n    Type: Type\r\n    TypeAttribute: TypeAttribute\r\n    TypeDefinition: TypeDefinition\r\n    UnionType: UnionType\r\n    UnorderedGroup: UnorderedGroup\r\n    UntilToken: UntilToken\r\n    ValueLiteral: ValueLiteral\r\n    Wildcard: Wildcard\r\n}\r\n\r\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Action:\r\n            case Alternatives:\r\n            case Assignment:\r\n            case CharacterRange:\r\n            case CrossReference:\r\n            case EndOfFile:\r\n            case Group:\r\n            case Keyword:\r\n            case NegatedToken:\r\n            case RegexToken:\r\n            case RuleCall:\r\n            case TerminalAlternatives:\r\n            case TerminalGroup:\r\n            case TerminalRuleCall:\r\n            case UnorderedGroup:\r\n            case UntilToken:\r\n            case Wildcard: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ArrayLiteral:\r\n            case NumberLiteral:\r\n            case StringLiteral: {\r\n                return this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case ArrayType:\r\n            case ReferenceType:\r\n            case SimpleType:\r\n            case UnionType: {\r\n                return this.isSubtype(TypeDefinition, supertype);\r\n            }\r\n            case BooleanLiteral: {\r\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case Conjunction:\r\n            case Disjunction:\r\n            case Negation:\r\n            case ParameterReference: {\r\n                return this.isSubtype(Condition, supertype);\r\n            }\r\n            case InferredType:\r\n            case Interface:\r\n            case Type: {\r\n                return this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case ParserRule: {\r\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case TerminalRule: {\r\n                return this.isSubtype(AbstractRule, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Action:type':\r\n            case 'CrossReference:type':\r\n            case 'Interface:superTypes':\r\n            case 'ParserRule:returnType':\r\n            case 'SimpleType:typeRef': {\r\n                return AbstractType;\r\n            }\r\n            case 'Grammar:hiddenTokens':\r\n            case 'ParserRule:hiddenTokens':\r\n            case 'RuleCall:rule': {\r\n                return AbstractRule;\r\n            }\r\n            case 'Grammar:usedGrammars': {\r\n                return Grammar;\r\n            }\r\n            case 'NamedArgument:parameter':\r\n            case 'ParameterReference:parameter': {\r\n                return Parameter;\r\n            }\r\n            case 'TerminalRuleCall:rule': {\r\n                return TerminalRule;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case AbstractElement: {\r\n                return {\r\n                    name: AbstractElement,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayLiteral: {\r\n                return {\r\n                    name: ArrayLiteral,\r\n                    properties: [\r\n                        { name: 'elements', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayType: {\r\n                return {\r\n                    name: ArrayType,\r\n                    properties: [\r\n                        { name: 'elementType' }\r\n                    ]\r\n                };\r\n            }\r\n            case BooleanLiteral: {\r\n                return {\r\n                    name: BooleanLiteral,\r\n                    properties: [\r\n                        { name: 'true', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case Conjunction: {\r\n                return {\r\n                    name: Conjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Disjunction: {\r\n                return {\r\n                    name: Disjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Grammar: {\r\n                return {\r\n                    name: Grammar,\r\n                    properties: [\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'imports', defaultValue: [] },\r\n                        { name: 'interfaces', defaultValue: [] },\r\n                        { name: 'isDeclared', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'rules', defaultValue: [] },\r\n                        { name: 'types', defaultValue: [] },\r\n                        { name: 'usedGrammars', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case GrammarImport: {\r\n                return {\r\n                    name: GrammarImport,\r\n                    properties: [\r\n                        { name: 'path' }\r\n                    ]\r\n                };\r\n            }\r\n            case InferredType: {\r\n                return {\r\n                    name: InferredType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case Interface: {\r\n                return {\r\n                    name: Interface,\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'name' },\r\n                        { name: 'superTypes', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case NamedArgument: {\r\n                return {\r\n                    name: NamedArgument,\r\n                    properties: [\r\n                        { name: 'calledByName', defaultValue: false },\r\n                        { name: 'parameter' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Negation: {\r\n                return {\r\n                    name: Negation,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NumberLiteral: {\r\n                return {\r\n                    name: NumberLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Parameter: {\r\n                return {\r\n                    name: Parameter,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParameterReference: {\r\n                return {\r\n                    name: ParameterReference,\r\n                    properties: [\r\n                        { name: 'parameter' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParserRule: {\r\n                return {\r\n                    name: ParserRule,\r\n                    properties: [\r\n                        { name: 'dataType' },\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'definition' },\r\n                        { name: 'entry', defaultValue: false },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'inferredType' },\r\n                        { name: 'name' },\r\n                        { name: 'parameters', defaultValue: [] },\r\n                        { name: 'returnType' },\r\n                        { name: 'wildcard', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case ReferenceType: {\r\n                return {\r\n                    name: ReferenceType,\r\n                    properties: [\r\n                        { name: 'referenceType' }\r\n                    ]\r\n                };\r\n            }\r\n            case ReturnType: {\r\n                return {\r\n                    name: ReturnType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case SimpleType: {\r\n                return {\r\n                    name: SimpleType,\r\n                    properties: [\r\n                        { name: 'primitiveType' },\r\n                        { name: 'stringType' },\r\n                        { name: 'typeRef' }\r\n                    ]\r\n                };\r\n            }\r\n            case StringLiteral: {\r\n                return {\r\n                    name: StringLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRule: {\r\n                return {\r\n                    name: TerminalRule,\r\n                    properties: [\r\n                        { name: 'definition' },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hidden', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Type: {\r\n                return {\r\n                    name: Type,\r\n                    properties: [\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case TypeAttribute: {\r\n                return {\r\n                    name: TypeAttribute,\r\n                    properties: [\r\n                        { name: 'defaultValue' },\r\n                        { name: 'isOptional', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnionType: {\r\n                return {\r\n                    name: UnionType,\r\n                    properties: [\r\n                        { name: 'types', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case Action: {\r\n                return {\r\n                    name: Action,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'inferredType' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Alternatives: {\r\n                return {\r\n                    name: Alternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Assignment: {\r\n                return {\r\n                    name: Assignment,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case CharacterRange: {\r\n                return {\r\n                    name: CharacterRange,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'left' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case CrossReference: {\r\n                return {\r\n                    name: CrossReference,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'deprecatedSyntax', defaultValue: false },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case EndOfFile: {\r\n                return {\r\n                    name: EndOfFile,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Group: {\r\n                return {\r\n                    name: Group,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'guardCondition' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Keyword: {\r\n                return {\r\n                    name: Keyword,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NegatedToken: {\r\n                return {\r\n                    name: NegatedToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case RegexToken: {\r\n                return {\r\n                    name: RegexToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'regex' }\r\n                    ]\r\n                };\r\n            }\r\n            case RuleCall: {\r\n                return {\r\n                    name: RuleCall,\r\n                    properties: [\r\n                        { name: 'arguments', defaultValue: [] },\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalAlternatives: {\r\n                return {\r\n                    name: TerminalAlternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalGroup: {\r\n                return {\r\n                    name: TerminalGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRuleCall: {\r\n                return {\r\n                    name: TerminalRuleCall,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnorderedGroup: {\r\n                return {\r\n                    name: UnorderedGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case UntilToken: {\r\n                return {\r\n                    name: UntilToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case Wildcard: {\r\n                return {\r\n                    name: Wildcard,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new LangiumGrammarAstReflection();\r\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken, TokenType } from 'chevrotain';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AbstractElement } from '../languages/generated/ast.js';\r\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\r\nimport { Position } from 'vscode-languageserver-types';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\n\r\nexport class CstNodeBuilder {\r\n\r\n    private rootNode!: RootCstNodeImpl;\r\n    private nodeStack: CompositeCstNodeImpl[] = [];\r\n\r\n    get current(): CompositeCstNodeImpl {\r\n        return this.nodeStack[this.nodeStack.length - 1] ?? this.rootNode;\r\n    }\r\n\r\n    buildRootNode(input: string): RootCstNode {\r\n        this.rootNode = new RootCstNodeImpl(input);\r\n        this.rootNode.root = this.rootNode;\r\n        this.nodeStack = [this.rootNode];\r\n        return this.rootNode;\r\n    }\r\n\r\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\r\n        const compositeNode = new CompositeCstNodeImpl();\r\n        compositeNode.grammarSource = feature;\r\n        compositeNode.root = this.rootNode;\r\n        this.current.content.push(compositeNode);\r\n        this.nodeStack.push(compositeNode);\r\n        return compositeNode;\r\n    }\r\n\r\n    buildLeafNode(token: IToken, feature?: AbstractElement): LeafCstNode {\r\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\r\n        leafNode.grammarSource = feature;\r\n        leafNode.root = this.rootNode;\r\n        this.current.content.push(leafNode);\r\n        return leafNode;\r\n    }\r\n\r\n    removeNode(node: CstNode): void {\r\n        const parent = node.container;\r\n        if (parent) {\r\n            const index = parent.content.indexOf(node);\r\n            if (index >= 0) {\r\n                parent.content.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    addHiddenNodes(tokens: IToken[]): void {\r\n        const nodes: LeafCstNode[] = [];\r\n        for (const token of tokens) {\r\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\r\n            leafNode.root = this.rootNode;\r\n            nodes.push(leafNode);\r\n        }\r\n        let current: CompositeCstNode = this.current;\r\n        let added = false;\r\n        // If we are within a composite node, we add the hidden nodes to the content\r\n        if (current.content.length > 0) {\r\n            current.content.push(...nodes);\r\n            return;\r\n        }\r\n        // Otherwise we are at a newly created node\r\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\r\n        while (current.container) {\r\n            const index = current.container.content.indexOf(current);\r\n            if (index > 0) {\r\n                // Add the hidden nodes before the current node\r\n                current.container.content.splice(index, 0, ...nodes);\r\n                added = true;\r\n                break;\r\n            }\r\n            current = current.container;\r\n        }\r\n        // If we arrive at the root node, we add the hidden nodes at the beginning\r\n        // This is the case if the hidden nodes are the first nodes in the tree\r\n        if (!added) {\r\n            this.rootNode.content.unshift(...nodes);\r\n        }\r\n    }\r\n\r\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\r\n        const current: CstNode = this.current;\r\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\r\n        // Only if the $type is a string, we actually assign the element\r\n        if (typeof item.$type === 'string') {\r\n            this.current.astNode = <AstNode>item;\r\n        }\r\n        item.$cstNode = current;\r\n        const node = this.nodeStack.pop();\r\n        // Empty composite nodes are not valid\r\n        // Simply remove the node from the tree\r\n        if (node?.content.length === 0) {\r\n            this.removeNode(node);\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class AbstractCstNode implements CstNode {\r\n    abstract get offset(): number;\r\n    abstract get length(): number;\r\n    abstract get end(): number;\r\n    abstract get range(): Range;\r\n\r\n    container?: CompositeCstNode;\r\n    grammarSource?: AbstractElement;\r\n    root: RootCstNode;\r\n    private _astNode?: AstNode;\r\n\r\n    /** @deprecated use `container` instead. */\r\n    get parent(): CompositeCstNode | undefined {\r\n        return this.container;\r\n    }\r\n\r\n    /** @deprecated use `grammarSource` instead. */\r\n    get feature(): AbstractElement | undefined {\r\n        return this.grammarSource;\r\n    }\r\n\r\n    get hidden(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get astNode(): AstNode {\r\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\r\n        if (!node) {\r\n            throw new Error('This node has no associated AST element');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    set astNode(value: AstNode | undefined) {\r\n        this._astNode = value;\r\n    }\r\n\r\n    /** @deprecated use `astNode` instead. */\r\n    get element(): AstNode {\r\n        return this.astNode;\r\n    }\r\n\r\n    get text(): string {\r\n        return this.root.fullText.substring(this.offset, this.end);\r\n    }\r\n}\r\n\r\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\r\n    get offset(): number {\r\n        return this._offset;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._offset + this._length;\r\n    }\r\n\r\n    override get hidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    get tokenType(): TokenType {\r\n        return this._tokenType;\r\n    }\r\n\r\n    get range(): Range {\r\n        return this._range;\r\n    }\r\n\r\n    private _hidden: boolean;\r\n    private _offset: number;\r\n    private _length: number;\r\n    private _range: Range;\r\n    private _tokenType: TokenType;\r\n\r\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\r\n        super();\r\n        this._hidden = hidden;\r\n        this._offset = offset;\r\n        this._tokenType = tokenType;\r\n        this._length = length;\r\n        this._range = range;\r\n    }\r\n}\r\n\r\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\r\n    readonly content: CstNode[] = new CstNodeContainer(this);\r\n    private _rangeCache?: Range;\r\n\r\n    /** @deprecated use `content` instead. */\r\n    get children(): CstNode[] {\r\n        return this.content;\r\n    }\r\n\r\n    get offset(): number {\r\n        return this.firstNonHiddenNode?.offset ?? 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.end - this.offset;\r\n    }\r\n\r\n    get end(): number {\r\n        return this.lastNonHiddenNode?.end ?? 0;\r\n    }\r\n\r\n    get range(): Range {\r\n        const firstNode = this.firstNonHiddenNode;\r\n        const lastNode = this.lastNonHiddenNode;\r\n        if (firstNode && lastNode) {\r\n            if (this._rangeCache === undefined) {\r\n                const { range: firstRange } = firstNode;\r\n                const { range: lastRange } = lastNode;\r\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\r\n            }\r\n            return this._rangeCache;\r\n        } else {\r\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\r\n        }\r\n    }\r\n\r\n    private get firstNonHiddenNode(): CstNode | undefined {\r\n        for (const child of this.content) {\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[0];\r\n    }\r\n\r\n    private get lastNonHiddenNode(): CstNode | undefined {\r\n        for (let i = this.content.length - 1; i >= 0; i--) {\r\n            const child = this.content[i];\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[this.content.length - 1];\r\n    }\r\n}\r\n\r\nclass CstNodeContainer extends Array<CstNode> {\r\n    readonly parent: CompositeCstNode;\r\n\r\n    constructor(parent: CompositeCstNode) {\r\n        super();\r\n        this.parent = parent;\r\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\r\n    }\r\n\r\n    override push(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.push(...items);\r\n    }\r\n\r\n    override unshift(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.unshift(...items);\r\n    }\r\n\r\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\r\n        this.addParents(items);\r\n        return super.splice(start, count, ...items);\r\n    }\r\n\r\n    private addParents(items: CstNode[]): void {\r\n        for (const item of items) {\r\n            (<AbstractCstNode>item).container = this.parent;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\r\n    private _text = '';\r\n\r\n    override get text(): string {\r\n        return this._text.substring(this.offset, this.end);\r\n    }\r\n\r\n    get fullText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    constructor(input?: string) {\r\n        super();\r\n        this._text = input ?? '';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\r\nimport type { Lexer, LexerResult } from './lexer.js';\r\nimport type { IParserConfig } from './parser-config.js';\r\nimport type { ValueConverter } from './value-converter.js';\r\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\r\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\r\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\r\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\r\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\r\nimport { CstNodeBuilder } from './cst-node-builder.js';\r\nimport type { LexingReport } from './token-builder.js';\r\n\r\nexport type ParseResult<T = AstNode> = {\r\n    value: T,\r\n    parserErrors: IRecognitionException[],\r\n    lexerErrors: ILexingError[],\r\n    lexerReport?: LexingReport\r\n}\r\n\r\nexport const DatatypeSymbol = Symbol('Datatype');\r\n\r\ninterface DataTypeNode {\r\n    $cstNode: CompositeCstNode\r\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\r\n    $type: symbol\r\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\r\n    value: string\r\n}\r\n\r\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\r\n    return node.$type === DatatypeSymbol;\r\n}\r\n\r\ntype RuleResult = (args: Args) => any;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype RuleImpl = (args: Args) => any;\r\n\r\ninterface AssignmentElement {\r\n    assignment?: Assignment\r\n    isCrossRef: boolean\r\n}\r\n\r\n/**\r\n * Base interface for all parsers. Mainly used by the `parser-builder-base.ts` to perform work on different kinds of parsers.\r\n * The main use cases are:\r\n * * AST parser: Based on a string, create an AST for the current grammar\r\n * * Completion parser: Based on a partial string, identify the current position of the input within the grammar\r\n */\r\nexport interface BaseParser {\r\n    /**\r\n     * Adds a new parser rule to the parser\r\n     */\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    /**\r\n     * Returns the executable rule function for the specified rule name\r\n     */\r\n    getRule(name: string): RuleResult | undefined;\r\n    /**\r\n     * Performs alternatives parsing (the `|` operation in EBNF/Langium)\r\n     */\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\r\n    /**\r\n     * Parses the callback as optional (the `?` operation in EBNF/Langium)\r\n     */\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 0 or more times (the `*` operation in EBNF/Langium)\r\n     */\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 1 or more times (the `+` operation in EBNF/Langium)\r\n     */\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Consumes a specific token type from the token input stream.\r\n     * Requires a unique index within the rule for a specific token type.\r\n     */\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    /**\r\n     * Invokes the executable function for a given parser rule.\r\n     * Requires a unique index within the rule for a specific sub rule.\r\n     * Arguments can be supplied to the rule invocation for semantic predicates\r\n     */\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    /**\r\n     * Executes a grammar action that modifies the currently active AST node\r\n     */\r\n    action($type: string, action: Action): void;\r\n    /**\r\n     * Finishes construction of the current AST node. Only used by the AST parser.\r\n     */\r\n    construct(): unknown;\r\n    /**\r\n     * Whether the parser is currently actually in use or in \"recording mode\".\r\n     * Recording mode is activated once when the parser is analyzing itself.\r\n     * During this phase, no input exists and therefore no AST should be constructed\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Current state of the unordered groups\r\n     */\r\n    get unorderedGroups(): Map<string, boolean[]>;\r\n    /**\r\n     * The rule stack indicates the indices of rules that are currently invoked,\r\n     * in order of their invocation.\r\n     */\r\n    getRuleStack(): number[];\r\n}\r\n\r\nconst ruleSuffix = '\\u200B';\r\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\r\n\r\nexport abstract class AbstractLangiumParser implements BaseParser {\r\n\r\n    protected readonly lexer: Lexer;\r\n    protected readonly wrapper: ChevrotainWrapper;\r\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\r\n\r\n    protected allRules = new Map<string, RuleResult>();\r\n    protected mainRule!: RuleResult;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.lexer = services.parser.Lexer;\r\n        const tokens = this.lexer.definition;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.wrapper = new ChevrotainWrapper(tokens, {\r\n            ...services.parser.ParserConfig,\r\n            skipValidations: production,\r\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\r\n        });\r\n    }\r\n\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.wrapper.wrapOr(idx, choices);\r\n    }\r\n\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapOption(idx, callback);\r\n    }\r\n\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapMany(idx, callback);\r\n    }\r\n\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapAtLeastOne(idx, callback);\r\n    }\r\n\r\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    abstract subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    abstract action($type: string, action: Action): void;\r\n    abstract construct(): unknown;\r\n\r\n    getRule(name: string): RuleResult | undefined {\r\n        return this.allRules.get(name);\r\n    }\r\n\r\n    isRecording(): boolean {\r\n        return this.wrapper.IS_RECORDING;\r\n    }\r\n\r\n    get unorderedGroups(): Map<string, boolean[]> {\r\n        return this._unorderedGroups;\r\n    }\r\n\r\n    getRuleStack(): number[] {\r\n        return (this.wrapper as any).RULE_STACK;\r\n    }\r\n\r\n    finalize(): void {\r\n        this.wrapper.wrapSelfAnalysis();\r\n    }\r\n}\r\n\r\nexport interface ParserOptions {\r\n    rule?: string\r\n}\r\n\r\nexport class LangiumParser extends AbstractLangiumParser {\r\n    private readonly linker: Linker;\r\n    private readonly converter: ValueConverter;\r\n    private readonly astReflection: AstReflection;\r\n    private readonly nodeBuilder = new CstNodeBuilder();\r\n    private lexerResult?: LexerResult;\r\n    private stack: any[] = [];\r\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\r\n\r\n    private get current(): any {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        super(services);\r\n        this.linker = services.references.Linker;\r\n        this.converter = services.parser.ValueConverter;\r\n        this.astReflection = services.shared.AstReflection;\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const type = this.computeRuleType(rule);\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private computeRuleType(rule: ParserRule): string | symbol | undefined {\r\n        if (rule.fragment) {\r\n            return undefined;\r\n        } else if (isDataTypeRule(rule)) {\r\n            return DatatypeSymbol;\r\n        } else {\r\n            const explicit = getExplicitRuleType(rule);\r\n            return explicit ?? rule.name;\r\n        }\r\n    }\r\n\r\n    parse<T extends AstNode = AstNode>(input: string, options: ParserOptions = {}): ParseResult<T> {\r\n        this.nodeBuilder.buildRootNode(input);\r\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\r\n        this.wrapper.input = lexerResult.tokens;\r\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\r\n        if (!ruleMethod) {\r\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\r\n        }\r\n        const result = ruleMethod.call(this.wrapper, {});\r\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\r\n        this.unorderedGroups.clear();\r\n        this.lexerResult = undefined;\r\n        return {\r\n            value: result,\r\n            lexerErrors: lexerResult.errors,\r\n            lexerReport: lexerResult.report,\r\n            parserErrors: this.wrapper.errors\r\n        };\r\n    }\r\n\r\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            // Only create a new AST node in case the calling rule is not a fragment rule\r\n            const createNode = !this.isRecording() && $type !== undefined;\r\n            if (createNode) {\r\n                const node: any = { $type };\r\n                this.stack.push(node);\r\n                if ($type === DatatypeSymbol) {\r\n                    node.value = '';\r\n                }\r\n            }\r\n            let result: unknown;\r\n            try {\r\n                result = implementation(args);\r\n            } catch (err) {\r\n                result = undefined;\r\n            }\r\n            if (result === undefined && createNode) {\r\n                result = this.construct();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    private extractHiddenTokens(token: IToken): IToken[] {\r\n        const hiddenTokens = this.lexerResult!.hidden;\r\n        if (!hiddenTokens.length) {\r\n            return [];\r\n        }\r\n        const offset = token.startOffset;\r\n        for (let i = 0; i < hiddenTokens.length; i++) {\r\n            const token = hiddenTokens[i];\r\n            if (token.startOffset > offset) {\r\n                return hiddenTokens.splice(0, i);\r\n            }\r\n        }\r\n        return hiddenTokens.splice(0, hiddenTokens.length);\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        const token = this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording() && this.isValidToken(token)) {\r\n            const hiddenTokens = this.extractHiddenTokens(token);\r\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\r\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\r\n            const { assignment, isCrossRef } = this.getAssignment(feature);\r\n            const current = this.current;\r\n            if (assignment) {\r\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\r\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\r\n            } else if (isDataTypeNode(current)) {\r\n                let text = token.image;\r\n                if (!isKeyword(feature)) {\r\n                    text = this.converter.convert(text, leafNode).toString();\r\n                }\r\n                current.value += text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\r\n     *\r\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\r\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\r\n     */\r\n    private isValidToken(token: IToken): boolean {\r\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        let cstNode: CompositeCstNode | undefined;\r\n        if (!this.isRecording() && !fragment) {\r\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\r\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\r\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\r\n            // This is intended, as fragment rules only enrich the current AST node\r\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\r\n        }\r\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\r\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\r\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\r\n        }\r\n    }\r\n\r\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\r\n        const { assignment, isCrossRef } = this.getAssignment(feature);\r\n        if (assignment) {\r\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\r\n        } else if (!assignment) {\r\n            // If we call a subrule without an assignment we either:\r\n            // 1. append the result of the subrule (data type rule)\r\n            // 2. override the current object with the newly parsed object\r\n            // If the current element is an AST node and the result of the subrule\r\n            // is a data type rule, we can safely discard the results.\r\n            const current = this.current;\r\n            if (isDataTypeNode(current)) {\r\n                current.value += result.toString();\r\n            } else if (typeof result === 'object' && result) {\r\n                const object = this.assignWithoutOverride(result, current);\r\n                const newItem = object;\r\n                this.stack.pop();\r\n                this.stack.push(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    action($type: string, action: Action): void {\r\n        if (!this.isRecording()) {\r\n            let last = this.current;\r\n            if (action.feature && action.operator) {\r\n                last = this.construct();\r\n                this.nodeBuilder.removeNode(last.$cstNode);\r\n                const node = this.nodeBuilder.buildCompositeNode(action);\r\n                node.content.push(last.$cstNode);\r\n                const newItem = { $type };\r\n                this.stack.push(newItem);\r\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\r\n            } else {\r\n                last.$type = $type;\r\n            }\r\n        }\r\n    }\r\n\r\n    construct(): unknown {\r\n        if (this.isRecording()) {\r\n            return undefined;\r\n        }\r\n        const obj = this.current;\r\n        linkContentToContainer(obj);\r\n        this.nodeBuilder.construct(obj);\r\n        this.stack.pop();\r\n        if (isDataTypeNode(obj)) {\r\n            return this.converter.convert(obj.value, obj.$cstNode);\r\n        } else {\r\n            assignMandatoryProperties(this.astReflection, obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private getAssignment(feature: AbstractElement): AssignmentElement {\r\n        if (!this.assignmentMap.has(feature)) {\r\n            const assignment = getContainerOfType(feature, isAssignment);\r\n            this.assignmentMap.set(feature, {\r\n                assignment: assignment,\r\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\r\n            });\r\n        }\r\n        return this.assignmentMap.get(feature)!;\r\n    }\r\n\r\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\r\n        const obj = this.current;\r\n        let item: unknown;\r\n        if (isCrossRef && typeof value === 'string') {\r\n            item = this.linker.buildReference(obj, feature, cstNode, value);\r\n        } else {\r\n            item = value;\r\n        }\r\n        switch (operator) {\r\n            case '=': {\r\n                obj[feature] = item;\r\n                break;\r\n            }\r\n            case '?=': {\r\n                obj[feature] = true;\r\n                break;\r\n            }\r\n            case '+=': {\r\n                if (!Array.isArray(obj[feature])) {\r\n                    obj[feature] = [];\r\n                }\r\n                obj[feature].push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignWithoutOverride(target: any, source: any): any {\r\n        for (const [name, existingValue] of Object.entries(source)) {\r\n            const newValue = target[name];\r\n            if (newValue === undefined) {\r\n                target[name] = existingValue;\r\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\r\n                existingValue.push(...newValue);\r\n                target[name] = existingValue;\r\n            }\r\n        }\r\n        // The target was parsed from a unassigned subrule\r\n        // After the subrule construction, it received a cst node\r\n        // This CST node will later be overriden by the cst node builder\r\n        // To prevent references to stale AST nodes in the CST,\r\n        // we need to remove the reference here\r\n        const targetCstNode = target.$cstNode;\r\n        if (targetCstNode) {\r\n            targetCstNode.astNode = undefined;\r\n            target.$cstNode = undefined;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    get definitionErrors(): IParserDefinitionError[] {\r\n        return this.wrapper.definitionErrors;\r\n    }\r\n}\r\n\r\nexport interface IParserDefinitionError {\r\n    message: string\r\n    type: number\r\n    ruleName?: string\r\n}\r\n\r\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\r\n\r\n    buildMismatchTokenMessage(options: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\r\n    }\r\n\r\n    buildNotAllInputParsedMessage(options: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\r\n    }\r\n\r\n    buildNoViableAltMessage(options: {\r\n        expectedPathsPerAlt: TokenType[][][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\r\n    }\r\n\r\n    buildEarlyExitMessage(options: {\r\n        expectedIterationPaths: TokenType[][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\r\n    }\r\n\r\n}\r\n\r\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\r\n\r\n    override buildMismatchTokenMessage({ expected, actual }: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        const expectedMsg = expected.LABEL\r\n            ? '`' + expected.LABEL + '`'\r\n            : expected.name.endsWith(':KW')\r\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\r\n                : `token of type '${expected.name}'`;\r\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\r\n    }\r\n\r\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\r\n    }\r\n}\r\n\r\nexport interface CompletionParserResult {\r\n    tokens: IToken[]\r\n    elementStack: AbstractElement[]\r\n    tokenIndex: number\r\n}\r\n\r\nexport class LangiumCompletionParser extends AbstractLangiumParser {\r\n    private tokens: IToken[] = [];\r\n\r\n    private elementStack: AbstractElement[] = [];\r\n    private lastElementStack: AbstractElement[] = [];\r\n    private nextTokenIndex = 0;\r\n    private stackSize = 0;\r\n\r\n    action(): void {\r\n        // NOOP\r\n    }\r\n\r\n    construct(): unknown {\r\n        // NOOP\r\n        return undefined;\r\n    }\r\n\r\n    parse(input: string): CompletionParserResult {\r\n        this.resetState();\r\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\r\n        this.tokens = tokens.tokens;\r\n        this.wrapper.input = [...this.tokens];\r\n        this.mainRule.call(this.wrapper, {});\r\n        this.unorderedGroups.clear();\r\n        return {\r\n            tokens: this.tokens,\r\n            elementStack: [...this.lastElementStack],\r\n            tokenIndex: this.nextTokenIndex\r\n        };\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private resetState(): void {\r\n        this.elementStack = [];\r\n        this.lastElementStack = [];\r\n        this.nextTokenIndex = 0;\r\n        this.stackSize = 0;\r\n    }\r\n\r\n    private startImplementation(implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            const size = this.keepStackSize();\r\n            try {\r\n                implementation(args);\r\n            } finally {\r\n                this.resetStackSize(size);\r\n            }\r\n        };\r\n    }\r\n\r\n    private removeUnexpectedElements(): void {\r\n        this.elementStack.splice(this.stackSize);\r\n    }\r\n\r\n    keepStackSize(): number {\r\n        const size = this.elementStack.length;\r\n        this.stackSize = size;\r\n        return size;\r\n    }\r\n\r\n    resetStackSize(size: number): void {\r\n        this.removeUnexpectedElements();\r\n        this.stackSize = size;\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording()) {\r\n            this.lastElementStack = [...this.elementStack, feature];\r\n            this.nextTokenIndex = this.currIdx + 1;\r\n        }\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        this.before(feature);\r\n        this.wrapper.wrapSubrule(idx, rule, args);\r\n        this.after(feature);\r\n    }\r\n\r\n    before(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            this.elementStack.push(element);\r\n        }\r\n    }\r\n\r\n    after(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            const index = this.elementStack.lastIndexOf(element);\r\n            if (index >= 0) {\r\n                this.elementStack.splice(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    get currIdx(): number {\r\n        return (this.wrapper as any).currIdx;\r\n    }\r\n}\r\n\r\nconst defaultConfig: IParserConfig = {\r\n    recoveryEnabled: true,\r\n    nodeLocationTracking: 'full',\r\n    skipValidations: true,\r\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\r\n};\r\n\r\n/**\r\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\r\n * This way, we can build the `LangiumParser` as a composition.\r\n */\r\nclass ChevrotainWrapper extends EmbeddedActionsParser {\r\n\r\n    // This array is set in the base implementation of Chevrotain.\r\n    definitionErrors: IParserDefinitionError[];\r\n\r\n    constructor(tokens: TokenVocabulary, config: IParserConfig) {\r\n        const useDefaultLookahead = config && 'maxLookahead' in config;\r\n        super(tokens, {\r\n            ...defaultConfig,\r\n            lookaheadStrategy: useDefaultLookahead\r\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\r\n                : new LLStarLookaheadStrategy({\r\n                    // If validations are skipped, don't log the lookahead warnings\r\n                    logging: config.skipValidations ? () => { } : undefined\r\n                }),\r\n            ...config,\r\n        });\r\n    }\r\n\r\n    get IS_RECORDING(): boolean {\r\n        return this.RECORDING_PHASE;\r\n    }\r\n\r\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\r\n        return this.RULE(name, impl);\r\n    }\r\n\r\n    wrapSelfAnalysis(): void {\r\n        this.performSelfAnalysis();\r\n    }\r\n\r\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\r\n        return this.consume(idx, tokenType);\r\n    }\r\n\r\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\r\n        return this.subrule(idx, rule, {\r\n            ARGS: [args]\r\n        });\r\n    }\r\n\r\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.or(idx, choices);\r\n    }\r\n\r\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.option(idx, callback);\r\n    }\r\n\r\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.many(idx, callback);\r\n    }\r\n\r\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.atLeastOne(idx, callback);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\r\nimport type { BaseParser } from './langium-parser.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { Cardinality } from '../utils/grammar-utils.js';\r\nimport { EMPTY_ALT, EOF } from 'chevrotain';\r\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\r\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\r\n\r\ntype RuleContext = {\r\n    optional: number,\r\n    consume: number,\r\n    subrule: number,\r\n    many: number,\r\n    or: number\r\n} & ParserContext;\r\n\r\ntype ParserContext = {\r\n    parser: BaseParser\r\n    tokens: TokenTypeDictionary\r\n    ruleNames: Map<AstNode, string>\r\n}\r\n\r\ntype Rule = (args: Args) => unknown;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype Predicate = (args: Args) => boolean;\r\n\r\ntype Method = (args: Args) => void;\r\n\r\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\r\n    const parserContext: ParserContext = {\r\n        parser,\r\n        tokens,\r\n        ruleNames: new Map()\r\n    };\r\n    buildRules(parserContext, grammar);\r\n    return parser;\r\n}\r\n\r\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\r\n    const reachable = getAllReachableRules(grammar, false);\r\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\r\n    for (const rule of parserRules) {\r\n        const ctx: RuleContext = {\r\n            ...parserContext,\r\n            consume: 1,\r\n            optional: 1,\r\n            subrule: 1,\r\n            many: 1,\r\n            or: 1\r\n        };\r\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\r\n    }\r\n}\r\n\r\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\r\n    let method: Method;\r\n    if (isKeyword(element)) {\r\n        method = buildKeyword(ctx, element);\r\n    } else if (isAction(element)) {\r\n        method = buildAction(ctx, element);\r\n    } else if (isAssignment(element)) {\r\n        method = buildElement(ctx, element.terminal);\r\n    } else if (isCrossReference(element)) {\r\n        method = buildCrossReference(ctx, element);\r\n    } else if (isRuleCall(element)) {\r\n        method = buildRuleCall(ctx, element);\r\n    } else if (isAlternatives(element)) {\r\n        method = buildAlternatives(ctx, element);\r\n    } else if (isUnorderedGroup(element)) {\r\n        method = buildUnorderedGroup(ctx, element);\r\n    } else if (isGroup(element)) {\r\n        method = buildGroup(ctx, element);\r\n    } else if(isEndOfFile(element)) {\r\n        const idx = ctx.consume++;\r\n        method = () => ctx.parser.consume(idx, EOF, element);\r\n    } else {\r\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\r\n    }\r\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\r\n}\r\n\r\nfunction buildAction(ctx: RuleContext, action: Action): Method {\r\n    const actionType = getTypeName(action);\r\n    return () => ctx.parser.action(actionType, action);\r\n}\r\n\r\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\r\n    const rule = ruleCall.rule.ref;\r\n    if (isParserRule(rule)) {\r\n        const idx = ctx.subrule++;\r\n        const fragment = rule.fragment;\r\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\r\n    } else if (isTerminalRule(rule)) {\r\n        const idx = ctx.consume++;\r\n        const method = getToken(ctx, rule.name);\r\n        return () => ctx.parser.consume(idx, method, ruleCall);\r\n    } else if (!rule) {\r\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\r\n    } else {\r\n        assertUnreachable(rule);\r\n    }\r\n}\r\n\r\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\r\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\r\n    return (args) => {\r\n        const ruleArgs: Args = {};\r\n        for (let i = 0; i < predicates.length; i++) {\r\n            const ruleTarget = rule.parameters[i];\r\n            const predicate = predicates[i];\r\n            ruleArgs[ruleTarget.name] = predicate(args);\r\n        }\r\n        return ruleArgs;\r\n    };\r\n}\r\n\r\ninterface PredicatedMethod {\r\n    ALT: Method,\r\n    GATE?: Predicate\r\n}\r\n\r\nfunction buildPredicate(condition: Condition): Predicate {\r\n    if (isDisjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) || right(args));\r\n    } else if (isConjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) && right(args));\r\n    } else if (isNegation(condition)) {\r\n        const value = buildPredicate(condition.value);\r\n        return (args) => !value(args);\r\n    } else if (isParameterReference(condition)) {\r\n        const name = condition.parameter.ref!.name;\r\n        return (args) => args !== undefined && args[name] === true;\r\n    } else if (isBooleanLiteral(condition)) {\r\n        const value = Boolean(condition.true);\r\n        return () => value;\r\n    }\r\n    assertUnreachable(condition);\r\n}\r\n\r\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\r\n    if (alternatives.elements.length === 1) {\r\n        return buildElement(ctx, alternatives.elements[0]);\r\n    } else {\r\n        const methods: PredicatedMethod[] = [];\r\n\r\n        for (const element of alternatives.elements) {\r\n            const predicatedMethod: PredicatedMethod = {\r\n                // Since we handle the guard condition in the alternative already\r\n                // We can ignore the group guard condition inside\r\n                ALT: buildElement(ctx, element, true)\r\n            };\r\n            const guard = getGuardCondition(element);\r\n            if (guard) {\r\n                predicatedMethod.GATE = buildPredicate(guard);\r\n            }\r\n            methods.push(predicatedMethod);\r\n        }\r\n\r\n        const idx = ctx.or++;\r\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\r\n            const alt: IOrAlt<unknown> = {\r\n                ALT: () => method.ALT(args)\r\n            };\r\n            const gate = method.GATE;\r\n            if (gate) {\r\n                alt.GATE = () => gate(args);\r\n            }\r\n            return alt;\r\n        }));\r\n    }\r\n}\r\n\r\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\r\n    if (group.elements.length === 1) {\r\n        return buildElement(ctx, group.elements[0]);\r\n    }\r\n    const methods: PredicatedMethod[] = [];\r\n\r\n    for (const element of group.elements) {\r\n        const predicatedMethod: PredicatedMethod = {\r\n            // Since we handle the guard condition in the alternative already\r\n            // We can ignore the group guard condition inside\r\n            ALT: buildElement(ctx, element, true)\r\n        };\r\n        const guard = getGuardCondition(element);\r\n        if (guard) {\r\n            predicatedMethod.GATE = buildPredicate(guard);\r\n        }\r\n        methods.push(predicatedMethod);\r\n    }\r\n\r\n    const orIdx = ctx.or++;\r\n\r\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\r\n        const stackId = lParser.getRuleStack().join('-');\r\n        return `uGroup_${groupIdx}_${stackId}`;\r\n    };\r\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\r\n        const alt: IOrAlt<unknown> = { ALT: () => true };\r\n        const parser = ctx.parser;\r\n        alt.ALT = () => {\r\n            method.ALT(args);\r\n            if (!parser.isRecording()) {\r\n                const key = idFunc(orIdx, parser);\r\n                if (!parser.unorderedGroups.get(key)) {\r\n                    // init after clear state\r\n                    parser.unorderedGroups.set(key, []);\r\n                }\r\n                const groupState = parser.unorderedGroups.get(key)!;\r\n                if (typeof groupState?.[idx] === 'undefined') {\r\n                    // Not accessed yet\r\n                    groupState[idx] = true;\r\n                }\r\n            }\r\n        };\r\n        const gate = method.GATE;\r\n        if (gate) {\r\n            alt.GATE = () => gate(args);\r\n        } else {\r\n            alt.GATE = () => {\r\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\r\n                const allow = !trackedAlternatives?.[idx];\r\n                return allow;\r\n            };\r\n        }\r\n        return alt;\r\n    }));\r\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\r\n    return (args) => {\r\n        wrapped(args);\r\n        if (!ctx.parser.isRecording()) {\r\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\r\n        }\r\n    };\r\n}\r\n\r\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\r\n    const methods = group.elements.map(e => buildElement(ctx, e));\r\n    return (args) => methods.forEach(method => method(args));\r\n}\r\n\r\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\r\n    if (isGroup(element)) {\r\n        return element.guardCondition;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\r\n    if (!terminal) {\r\n        if (!crossRef.type.ref) {\r\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\r\n        }\r\n        const assignment = findNameAssignment(crossRef.type.ref);\r\n        const assignTerminal = assignment?.terminal;\r\n        if (!assignTerminal) {\r\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\r\n        }\r\n        return buildCrossReference(ctx, crossRef, assignTerminal);\r\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\r\n        // The terminal is a data type rule here. Everything else will result in a validation error.\r\n        const rule = terminal.rule.ref;\r\n        const idx = ctx.subrule++;\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\r\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\r\n        const idx = ctx.consume++;\r\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\r\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\r\n    } else if (isKeyword(terminal)) {\r\n        const idx = ctx.consume++;\r\n        const keyword = getToken(ctx, terminal.value);\r\n        return () => ctx.parser.consume(idx, keyword, crossRef);\r\n    }\r\n    else {\r\n        throw new Error('Could not build cross reference parser');\r\n    }\r\n}\r\n\r\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\r\n    const idx = ctx.consume++;\r\n    const token = ctx.tokens[keyword.value];\r\n    if (!token) {\r\n        throw new Error('Could not find token for keyword: ' + keyword.value);\r\n    }\r\n    return () => ctx.parser.consume(idx, token, keyword);\r\n}\r\n\r\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\r\n    const gate = guard && buildPredicate(guard);\r\n\r\n    if (!cardinality) {\r\n        if (gate) {\r\n            const idx = ctx.or++;\r\n            return (args) => ctx.parser.alternatives(idx, [\r\n                {\r\n                    ALT: () => method(args),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return method;\r\n        }\r\n    }\r\n\r\n    if (cardinality === '*') {\r\n        const idx = ctx.many++;\r\n        return (args) => ctx.parser.many(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else if (cardinality === '+') {\r\n        const idx = ctx.many++;\r\n        if (gate) {\r\n            const orIdx = ctx.or++;\r\n            // In the case of a guard condition for the `+` group\r\n            // We combine it with an empty alternative\r\n            // If the condition returns true, it needs to parse at least a single iteration\r\n            // If its false, it is not allowed to parse anything\r\n            return (args) => ctx.parser.alternatives(orIdx, [\r\n                {\r\n                    ALT: () => ctx.parser.atLeastOne(idx, {\r\n                        DEF: () => method(args)\r\n                    }),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return (args) => ctx.parser.atLeastOne(idx, {\r\n                DEF: () => method(args),\r\n            });\r\n        }\r\n    } else if (cardinality === '?') {\r\n        const idx = ctx.optional++;\r\n        return (args) => ctx.parser.optional(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else {\r\n        assertUnreachable(cardinality);\r\n    }\r\n}\r\n\r\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\r\n    const name = getRuleName(ctx, element);\r\n    const rule = ctx.parser.getRule(name);\r\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\r\n    return rule;\r\n}\r\n\r\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\r\n    if (isParserRule(element)) {\r\n        return element.name;\r\n    } else if (ctx.ruleNames.has(element)) {\r\n        return ctx.ruleNames.get(element)!;\r\n    } else {\r\n        let item: AstNode = element;\r\n        let parent: AstNode = item.$container!;\r\n        let ruleName: string = element.$type;\r\n        while (!isParserRule(parent)) {\r\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\r\n                const index = parent.elements.indexOf(item as AbstractElement);\r\n                ruleName = index.toString() + ':' + ruleName;\r\n            }\r\n            item = parent;\r\n            parent = parent.$container!;\r\n        }\r\n        const rule = parent as ParserRule;\r\n        ruleName = rule.name + ':' + ruleName;\r\n        ctx.ruleNames.set(element, ruleName);\r\n        return ruleName;\r\n    }\r\n}\r\n\r\nfunction getToken(ctx: ParserContext, name: string): TokenType {\r\n    const token = ctx.tokens[name];\r\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\r\n    return token;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\n/**\r\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\r\n * available at `services.Grammar`.\r\n */\r\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const parser = prepareLangiumParser(services);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n\r\n/**\r\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\r\n * information when the parser is initially validated.\r\n */\r\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumParser(services);\r\n    return createParser(grammar, parser, lexer.definition);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\r\n\r\nexport type MaybePromise<T> = T | Promise<T>\r\n\r\n/**\r\n * Delays the execution of the current code to the next tick of the event loop.\r\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\r\n */\r\nexport function delayNextTick(): Promise<void> {\r\n    return new Promise(resolve => {\r\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\r\n        // Using `setTimeout` of the browser API accomplishes the same result.\r\n        if (typeof setImmediate === 'undefined') {\r\n            setTimeout(resolve, 0);\r\n        } else {\r\n            setImmediate(resolve);\r\n        }\r\n    });\r\n}\r\n\r\nlet lastTick = 0;\r\nlet globalInterruptionPeriod = 10;\r\n\r\n/**\r\n * Reset the global interruption period and create a cancellation token source.\r\n */\r\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\r\n    lastTick = performance.now();\r\n    return new CancellationTokenSource();\r\n}\r\n\r\n/**\r\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\r\n * The default value is 10ms.\r\n */\r\nexport function setInterruptionPeriod(period: number): void {\r\n    globalInterruptionPeriod = period;\r\n}\r\n\r\n/**\r\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\r\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\r\n * this symbol as rejection reason.\r\n */\r\nexport const OperationCancelled = Symbol('OperationCancelled');\r\n\r\n/**\r\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\r\n * has been cancelled.\r\n */\r\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\r\n    return err === OperationCancelled;\r\n}\r\n\r\n/**\r\n * This function does two things:\r\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\r\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\r\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\r\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\r\n *\r\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\r\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\r\n * the promise) to avoid that event being exposed as an error.\r\n */\r\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\r\n    if (token === CancellationToken.None) {\r\n        // Early exit in case cancellation was disabled by the caller\r\n        return;\r\n    }\r\n    const current = performance.now();\r\n    if (current - lastTick >= globalInterruptionPeriod) {\r\n        lastTick = current;\r\n        await delayNextTick();\r\n        // prevent calling delayNextTick every iteration of loop\r\n        // where delayNextTick takes up the majority or all of the\r\n        // globalInterruptionPeriod itself\r\n        lastTick = performance.now();\r\n    }\r\n    if (token.isCancellationRequested) {\r\n        throw OperationCancelled;\r\n    }\r\n}\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T = void> {\r\n    resolve: (value: T) => this;\r\n    reject: (err?: unknown) => this;\r\n\r\n    promise = new Promise<T>((resolve, reject) => {\r\n        this.resolve = (arg) => {\r\n            resolve(arg);\r\n            return this;\r\n        };\r\n        this.reject = (err) => {\r\n            reject(err);\r\n            return this;\r\n        };\r\n    });\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\r\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\r\n *  the overhead is very small, just a few kilobytes.\r\n * Everything else of that package (at the time contributing) is also defined\r\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\r\n */\r\nexport { TextDocument } from 'vscode-languageserver-textdocument';\r\n\r\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\r\nimport type { FileSystemProvider } from './file-system-provider.js';\r\nimport type { ParseResult, ParserOptions } from '../parser/langium-parser.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\r\nimport type { MultiMap } from '../utils/collections.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { TextDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\r\n * from the AST, e.g. the result of scope precomputation.\r\n */\r\nexport interface LangiumDocument<T extends AstNode = AstNode> {\r\n    /** The Uniform Resource Identifier (URI) of the document */\r\n    readonly uri: URI;\r\n    /** The text document used to convert between offsets and positions */\r\n    readonly textDocument: TextDocument;\r\n    /** The current state of the document */\r\n    state: DocumentState;\r\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\r\n    parseResult: ParseResult<T>;\r\n    /** Result of the scope precomputation phase */\r\n    precomputedScopes?: PrecomputedScopes;\r\n    /** An array of all cross-references found in the AST while linking */\r\n    references: Reference[];\r\n    /** Result of the validation phase */\r\n    diagnostics?: Diagnostic[]\r\n}\r\n\r\n/**\r\n * A document is subject to several phases that are run in predefined order. Any state value implies that\r\n * smaller state values are finished as well.\r\n */\r\nexport enum DocumentState {\r\n    /**\r\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\r\n     * document instance is no longer valid.\r\n     */\r\n    Changed = 0,\r\n    /**\r\n     * An AST has been created from the text content. The document structure can be traversed,\r\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\r\n     * at this stage as a preprocessing step.\r\n     */\r\n    Parsed = 1,\r\n    /**\r\n     * The `IndexManager` service has processed AST nodes of this document. This means the\r\n     * exported symbols are available in the global scope and can be resolved from other documents.\r\n     */\r\n    IndexedContent = 2,\r\n    /**\r\n     * The `ScopeComputation` service has processed this document. This means the local symbols\r\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\r\n     * Once a document has reached this state, you may follow every reference - it will lazily\r\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\r\n     * the target is not in scope.\r\n     */\r\n    ComputedScopes = 3,\r\n    /**\r\n     * The `Linker` service has processed this document. All outgoing references have been\r\n     * resolved or marked as erroneous.\r\n     */\r\n    Linked = 4,\r\n    /**\r\n     * The `IndexManager` service has processed AST node references of this document. This is\r\n     * necessary to determine which documents are affected by a change in one of the workspace\r\n     * documents.\r\n     */\r\n    IndexedReferences = 5,\r\n    /**\r\n     * The `DocumentValidator` service has processed this document. The language server listens\r\n     * to the results of this phase and sends diagnostics to the client.\r\n     */\r\n    Validated = 6\r\n}\r\n\r\n/**\r\n * Result of the scope precomputation phase (`ScopeComputation` service).\r\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\r\n */\r\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\r\n\r\nexport interface DocumentSegment {\r\n    readonly range: Range\r\n    readonly offset: number\r\n    readonly length: number\r\n    readonly end: number\r\n}\r\n\r\n/**\r\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\r\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\r\n */\r\nexport type TextDocumentProvider = {\r\n    get(uri: string | URI): TextDocument | undefined\r\n}\r\n\r\n/**\r\n * Shared service for creating `LangiumDocument` instances.\r\n *\r\n * Register a custom implementation if special (additional) behavior is required for your language(s).\r\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\r\n * specialize {@link update}, too!\r\n */\r\nexport interface LangiumDocumentFactory {\r\n    /**\r\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from an in-memory string.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from a model that has been constructed in memory.\r\n     */\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\r\n\r\n    /**\r\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\r\n     */\r\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Update the given document after changes in the corresponding textual representation.\r\n     * Method is called by the document builder after it has been requested to build an existing\r\n     * document and the document's state is {@link DocumentState.Changed}.\r\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\r\n     * and {@link fromString}.\r\n     */\r\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\r\n}\r\n\r\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n    }\r\n\r\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\r\n        const content = await this.fileSystemProvider.readFile(uri);\r\n        return this.createAsync<T>(uri, content, cancellationToken);\r\n    }\r\n\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        uri = uri ?? URI.parse(textDocument.uri);\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, textDocument, token);\r\n        } else {\r\n            return this.create<T>(uri, textDocument, token);\r\n        }\r\n    }\r\n\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, text, token);\r\n        } else {\r\n            return this.create<T>(uri, text, token);\r\n        }\r\n    }\r\n\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\r\n        return this.create<T>(uri, { $model: model });\r\n    }\r\n\r\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }, options?: ParserOptions): LangiumDocument<T> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = this.parse<T>(uri, content, options);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n\r\n        } else if ('$model' in content) {\r\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\r\n            return this.createLangiumDocument<T>(parseResult, uri);\r\n\r\n        } else {\r\n            const parseResult = this.parse<T>(uri, content.getText(), options);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n        } else {\r\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a LangiumDocument from a given parse result.\r\n     *\r\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\r\n     * should not be necessary because the main purpose of the TextDocument is to convert between\r\n     * text ranges and offsets, which is done solely in LSP request handling.\r\n     *\r\n     * With the introduction of {@link update} below this method is supposed to be mainly called\r\n     * during workspace initialization and on addition/recognition of new files, while changes in\r\n     * existing documents are processed via {@link update}.\r\n     */\r\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\r\n        let document: LangiumDocument<T>;\r\n        if (textDocument) {\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                textDocument\r\n            };\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                get textDocument() {\r\n                    return textDocumentGetter();\r\n                }\r\n            };\r\n        }\r\n        (parseResult.value as Mutable<AstNode>).$document = document;\r\n        return document;\r\n    }\r\n\r\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        // The CST full text property contains the original text that was used to create the AST.\r\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\r\n        const textDocument = this.textDocuments?.get(document.uri.toString());\r\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\r\n\r\n        if (textDocument) {\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    value: textDocument\r\n                }\r\n            );\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    get: textDocumentGetter\r\n                }\r\n            );\r\n        }\r\n\r\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\r\n        // Therefore, we only parse if the text has actually changed.\r\n        if (oldText !== text) {\r\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\r\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\r\n        }\r\n        document.state = DocumentState.Parsed;\r\n        return document;\r\n    }\r\n\r\n    protected parse<T extends AstNode>(uri: URI, text: string, options?: ParserOptions): ParseResult<T> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.LangiumParser.parse<T>(text, options);\r\n    }\r\n\r\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\r\n    }\r\n\r\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\r\n        const serviceRegistry = this.serviceRegistry;\r\n        let textDoc: TextDocument | undefined = undefined;\r\n        return () => {\r\n            return textDoc ??= TextDocument.create(\r\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Shared service for managing Langium documents.\r\n */\r\nexport interface LangiumDocuments {\r\n\r\n    /**\r\n     * A stream of all documents managed under this service.\r\n     */\r\n    readonly all: Stream<LangiumDocument>\r\n\r\n    /**\r\n     * Manage a new document under this service.\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    addDocument(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\r\n     */\r\n    getDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\r\n     * The new document will be added to the list of documents managed under this service.\r\n     */\r\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content asynchronously.\r\n     * The process can be interrupted with a cancellation token.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Returns `true` if a document with the given URI is managed under this service.\r\n     */\r\n    hasDocument(uri: URI): boolean;\r\n\r\n    /**\r\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\r\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\r\n     * be dropped to reduce memory footprint.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\r\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\r\n     * URI will create a new document instance.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    deleteDocument(uri: URI): LangiumDocument | undefined;\r\n}\r\n\r\nexport class DefaultLangiumDocuments implements LangiumDocuments {\r\n\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n\r\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get all(): Stream<LangiumDocument> {\r\n        return stream(this.documentMap.values());\r\n    }\r\n\r\n    addDocument(document: LangiumDocument): void {\r\n        const uriString = document.uri.toString();\r\n        if (this.documentMap.has(uriString)) {\r\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\r\n        }\r\n        this.documentMap.set(uriString, document);\r\n    }\r\n\r\n    getDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        return this.documentMap.get(uriString);\r\n    }\r\n\r\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\r\n        let document = this.getDocument(uri);\r\n        if (document) {\r\n            return document;\r\n        }\r\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\r\n        this.addDocument(document);\r\n        return document;\r\n    }\r\n\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\r\n        if (cancellationToken) {\r\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\r\n                this.addDocument(document);\r\n                return document;\r\n            });\r\n        } else {\r\n            const document = this.langiumDocumentFactory.fromString(text, uri);\r\n            this.addDocument(document);\r\n            return document;\r\n        }\r\n    }\r\n\r\n    hasDocument(uri: URI): boolean {\r\n        return this.documentMap.has(uri.toString());\r\n    }\r\n\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\r\n            linker.unlink(langiumDoc);\r\n            langiumDoc.state = DocumentState.Changed;\r\n            langiumDoc.precomputedScopes = undefined;\r\n            langiumDoc.diagnostics = undefined;\r\n        }\r\n        return langiumDoc;\r\n    }\r\n\r\n    deleteDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            langiumDoc.state = DocumentState.Changed;\r\n            this.documentMap.delete(uriString);\r\n        }\r\n        return langiumDoc;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\nimport type { ScopeProvider } from './scope-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\r\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { DocumentState } from '../workspace/documents.js';\r\n\r\n/**\r\n * Language-specific service for resolving cross-references in the AST.\r\n */\r\nexport interface Linker {\r\n\r\n    /**\r\n     * Links all cross-references within the specified document. The default implementation loads only target\r\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\r\n     * stored in the document's `references` property.\r\n     *\r\n     * @param document A LangiumDocument that shall be linked.\r\n     * @param cancelToken A token for cancelling the operation.\r\n     *\r\n     * @throws `OperationCancelled` if a cancellation event is detected\r\n     */\r\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Unlinks all references within the specified document and removes them from the list of `references`.\r\n     *\r\n     * @param document A LangiumDocument that shall be unlinked.\r\n     */\r\n    unlink(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Determines a candidate AST node description for linking the given reference.\r\n     *\r\n     * @param refInfo Information about the reference.\r\n     */\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\r\n\r\n    /**\r\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\r\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\r\n     * as well as the unique cross reference identifier.\r\n     *\r\n     * Default behavior:\r\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\r\n     *    first visit.\r\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\r\n     *    and further resolution attempts will *not* be performed.\r\n     *\r\n     * @param node The containing AST node\r\n     * @param property The AST node property being referenced\r\n     * @param refNode The corresponding CST node\r\n     * @param refText The cross reference text denoting the target AstNode\r\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\r\n     */\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\r\n\r\n}\r\n\r\nconst ref_resolving = Symbol('ref_resolving');\r\n\r\ninterface DefaultReference extends Reference {\r\n    _ref?: AstNode | LinkingError | typeof ref_resolving;\r\n    _nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport class DefaultLinker implements Linker {\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly scopeProvider: ScopeProvider;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly langiumDocuments: () => LangiumDocuments;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\r\n        this.scopeProvider = services.references.ScopeProvider;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const node of streamAst(document.parseResult.value)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\r\n        }\r\n    }\r\n\r\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\r\n        const ref = refInfo.reference as DefaultReference;\r\n        // The reference may already have been resolved lazily by accessing its `ref` property.\r\n        if (ref._ref === undefined) {\r\n            ref._ref = ref_resolving;\r\n            try {\r\n                const description = this.getCandidate(refInfo);\r\n                if (isLinkingError(description)) {\r\n                    ref._ref = description;\r\n                } else {\r\n                    ref._nodeDescription = description;\r\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\r\n                        // The target document is already loaded\r\n                        const linkedNode = this.loadAstNode(description);\r\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\r\n                    } else {\r\n                        // Try to load the target AST node later using the already provided description\r\n                        ref._ref = undefined;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\r\n                const errorMessage = (err as Error).message ?? String(err);\r\n                ref._ref = {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\r\n                };\r\n            }\r\n            // Add the reference to the document's array of references\r\n            // Only add if the reference has been not been resolved earlier\r\n            // Otherwise we end up with duplicates\r\n            // See also implementation of `buildReference`\r\n            document.references.push(ref);\r\n        }\r\n    }\r\n\r\n    unlink(document: LangiumDocument): void {\r\n        for (const ref of document.references) {\r\n            delete (ref as DefaultReference)._ref;\r\n            delete (ref as DefaultReference)._nodeDescription;\r\n        }\r\n        document.references = [];\r\n    }\r\n\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\r\n        const scope = this.scopeProvider.getScope(refInfo);\r\n        const description = scope.getElement(refInfo.reference.$refText);\r\n        return description ?? this.createLinkingError(refInfo);\r\n    }\r\n\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\r\n        // See behavior description in doc of Linker, update that on changes in here.\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const linker = this;\r\n        const reference: DefaultReference = {\r\n            $refNode: refNode,\r\n            $refText: refText,\r\n\r\n            get ref() {\r\n                if (isAstNode(this._ref)) {\r\n                    // Most frequent case: the target is already resolved.\r\n                    return this._ref;\r\n                } else if (isAstNodeDescription(this._nodeDescription)) {\r\n                    // A candidate has been found before, but it is not loaded yet.\r\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\r\n                    this._ref = linkedNode ??\r\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\r\n                } else if (this._ref === undefined) {\r\n                    // The reference has not been linked yet, so do that now.\r\n                    this._ref = ref_resolving;\r\n                    const document = findRootNode(node).$document;\r\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\r\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\r\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\r\n                        return this._ref = undefined;\r\n                    }\r\n                    this._ref = refData.node ?? refData.error;\r\n                    this._nodeDescription = refData.descr;\r\n                    document?.references.push(this);\r\n                } else if (this._ref === ref_resolving) {\r\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\r\n                }\r\n                return isAstNode(this._ref) ? this._ref : undefined;\r\n            },\r\n            get $nodeDescription() {\r\n                return this._nodeDescription;\r\n            },\r\n            get error() {\r\n                return isLinkingError(this._ref) ? this._ref : undefined;\r\n            }\r\n        };\r\n        return reference;\r\n    }\r\n\r\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\r\n        try {\r\n            const description = this.getCandidate(refInfo);\r\n            if (isLinkingError(description)) {\r\n                return { error: description };\r\n            }\r\n            const linkedNode = this.loadAstNode(description);\r\n            if (linkedNode) {\r\n                return { node: linkedNode, descr: description };\r\n            }\r\n            else {\r\n                return {\r\n                    descr: description,\r\n                    error:\r\n                        this.createLinkingError(refInfo, description)\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\r\n            const errorMessage = (err as Error).message ?? String(err);\r\n            return {\r\n                error: {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\r\n        if (nodeDescription.node) {\r\n            return nodeDescription.node;\r\n        }\r\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\r\n        if (!doc) {\r\n            return undefined;\r\n        }\r\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\r\n    }\r\n\r\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\r\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\r\n        // in the language implementation.\r\n        const document = findRootNode(refInfo.container).$document;\r\n        if (document && document.state < DocumentState.ComputedScopes) {\r\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\r\n        }\r\n        const referenceType = this.reflection.getReferenceType(refInfo);\r\n        return {\r\n            ...refInfo,\r\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\r\n            targetDescription\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI, Utils } from 'vscode-uri';\r\n\r\nexport { URI };\r\n\r\nexport namespace UriUtils {\r\n\r\n    export const basename = Utils.basename;\r\n    export const dirname = Utils.dirname;\r\n    export const extname = Utils.extname;\r\n    export const joinPath = Utils.joinPath;\r\n    export const resolvePath = Utils.resolvePath;\r\n\r\n    export function equals(a?: URI | string, b?: URI | string): boolean {\r\n        return a?.toString() === b?.toString();\r\n    }\r\n\r\n    export function relative(from: URI | string, to: URI | string): string {\r\n        const fromPath = typeof from === 'string' ? from : from.path;\r\n        const toPath = typeof to === 'string' ? to : to.path;\r\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\r\n        const toParts = toPath.split('/').filter(e => e.length > 0);\r\n        let i = 0;\r\n        for (; i < fromParts.length; i++) {\r\n            if (fromParts[i] !== toParts[i]) {\r\n                break;\r\n            }\r\n        }\r\n        const backPart = '../'.repeat(fromParts.length - i);\r\n        const toPart = toParts.slice(i).join('/');\r\n        return backPart + toPart;\r\n    }\r\n\r\n    export function normalize(uri: URI | string): string {\r\n        return URI.parse(uri.toString()).toString();\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { findAssignment } from '../utils/grammar-utils.js';\r\nimport { isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for finding references and declaration of a given `CstNode`.\r\n */\r\nexport interface References {\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\r\n\r\n    /**\r\n     * Finds all references to the target node as references (local references) or reference descriptions.\r\n     *\r\n     * @param targetNode Specified target node whose references should be returned\r\n     */\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\r\n}\r\n\r\nexport interface FindReferencesOptions {\r\n    /**\r\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\r\n     */\r\n    onlyLocal?: boolean;\r\n    /**\r\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\r\n     */\r\n    documentUri?: URI;\r\n    /**\r\n     * Whether the returned list of references should include the declaration.\r\n     */\r\n    includeDeclaration?: boolean;\r\n}\r\n\r\nexport class DefaultReferences implements References {\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly index: IndexManager;\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.index = services.shared.workspace.IndexManager;\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\r\n        if (sourceCstNode) {\r\n            const assignment = findAssignment(sourceCstNode);\r\n            const nodeElem = sourceCstNode.astNode;\r\n            if (assignment && nodeElem) {\r\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\r\n\r\n                if (isReference(reference)) {\r\n                    return reference.ref;\r\n                } else if (Array.isArray(reference)) {\r\n                    for (const ref of reference) {\r\n                        if (isReference(ref) && ref.$refNode\r\n                            && ref.$refNode.offset <= sourceCstNode.offset\r\n                            && ref.$refNode.end >= sourceCstNode.end) {\r\n                            return ref.ref;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nodeElem) {\r\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\r\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\r\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\r\n                    return nodeElem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\r\n        const astNode = this.findDeclaration(sourceCstNode);\r\n        if (astNode?.$cstNode) {\r\n            const targetNode = this.nameProvider.getNameNode(astNode);\r\n            return targetNode ?? astNode.$cstNode;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\r\n        const refs: ReferenceDescription[] = [];\r\n        if (options.includeDeclaration) {\r\n            const ref = this.getReferenceToSelf(targetNode);\r\n            if (ref) {\r\n                refs.push(ref);\r\n            }\r\n        }\r\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\r\n        if (options.documentUri) {\r\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\r\n        }\r\n        refs.push(...indexReferences);\r\n        return stream(refs);\r\n    }\r\n\r\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\r\n        const nameNode = this.nameProvider.getNameNode(targetNode);\r\n        if (nameNode) {\r\n            const doc = getDocument(targetNode);\r\n            const path = this.nodeLocator.getAstNodePath(targetNode);\r\n            return {\r\n                sourceUri: doc.uri,\r\n                sourcePath: path,\r\n                targetUri: doc.uri,\r\n                targetPath: path,\r\n                segment: toDocumentSegment(nameNode),\r\n                local: true\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Stream } from './stream.js';\r\nimport { Reduction, stream } from './stream.js';\r\n\r\n/**\r\n * A multimap is a variation of a Map that has potentially multiple values for every key.\r\n */\r\nexport class MultiMap<K, V> {\r\n\r\n    private map = new Map<K, V[]>();\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The total number of values in the multimap.\r\n     */\r\n    get size(): number {\r\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\r\n    }\r\n\r\n    /**\r\n     * Clear all entries in the multimap.\r\n     */\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\r\n     *  * Without a value, all values associated with the given key are deleted.\r\n     *\r\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\r\n     *     key / value does not exist.\r\n     */\r\n    delete(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.delete(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                const index = values.indexOf(value);\r\n                if (index >= 0) {\r\n                    if (values.length === 1) {\r\n                        this.map.delete(key);\r\n                    } else {\r\n                        values.splice(index, 1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all values associated with the given key. If no value exists,\r\n     * an empty array is returned.\r\n     *\r\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\r\n     * value and `delete` to remove a value from the multimap.\r\n     */\r\n    get(key: K): readonly V[] {\r\n        return this.map.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\r\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\r\n     */\r\n    has(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.has(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                return values.indexOf(value) >= 0;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given key / value pair to the multimap.\r\n     */\r\n    add(key: K, value: V): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(value);\r\n        } else {\r\n            this.map.set(key, [value]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the given set of key / value pairs to the multimap.\r\n     */\r\n    addAll(key: K, values: Iterable<V>): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(...values);\r\n        } else {\r\n            this.map.set(key, Array.from(values));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invokes the given callback function for every key / value pair in the multimap.\r\n     */\r\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\r\n        this.map.forEach((array, key) =>\r\n            array.forEach(value => callbackfn(value, key, this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator of key, value pairs for every entry in the map.\r\n     */\r\n    [Symbol.iterator](): Iterator<[K, V]> {\r\n        return this.entries().iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): Stream<[K, V]> {\r\n        return stream(this.map.entries())\r\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of keys in the map.\r\n     */\r\n    keys(): Stream<K> {\r\n        return stream(this.map.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of values in the map.\r\n     */\r\n    values(): Stream<V> {\r\n        return stream(this.map.values()).flat();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value set pairs for every key in the map.\r\n     */\r\n    entriesGroupedByKey(): Stream<[K, V[]]> {\r\n        return stream(this.map.entries());\r\n    }\r\n\r\n}\r\n\r\nexport class BiMap<K, V> {\r\n\r\n    private map = new Map<K, V>();\r\n    private inverse = new Map<V, K>();\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n        this.inverse.clear();\r\n    }\r\n\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        this.inverse.set(value, key);\r\n        return this;\r\n    }\r\n\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n\r\n    getKey(value: V): K | undefined {\r\n        return this.inverse.get(value);\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        const value = this.map.get(key);\r\n        if (value !== undefined) {\r\n            this.map.delete(key);\r\n            this.inverse.delete(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Language-specific service for precomputing global and local scopes. The service methods are executed\r\n * as the first and second phase in the `DocumentBuilder`.\r\n */\r\nexport interface ScopeComputation {\r\n\r\n    /**\r\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\r\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\r\n     * they can be referenced from other documents.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\r\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\r\n     * initial indexing where this method is used.\r\n     *\r\n     * @param document The document from which to gather exported AST nodes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\r\n\r\n    /**\r\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\r\n     * resolving references to symbols in the same document. The result is a multimap assigning a\r\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\r\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\r\n     * resolution depends on the scope computation phase to be completed.\r\n     *\r\n     * @param document The document in which to compute scopes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\r\n\r\n}\r\n\r\n/**\r\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\r\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\r\n * contained child nodes.\r\n *\r\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\r\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\r\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\r\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\r\n * are _invisible_ by default, but that can be changed by customizing this service.\r\n */\r\nexport class DefaultScopeComputation implements ScopeComputation {\r\n\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n    }\r\n\r\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\r\n     * The list of children to be considered is determined by the function parameter {@link children}.\r\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\r\n     *\r\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\r\n     * @param document The document containing the AST node to be exported.\r\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCancelled` if a user action occurs during execution.\r\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\r\n     */\r\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        const exports: AstNodeDescription[] = [];\r\n\r\n        this.exportNode(parentNode, exports, document);\r\n        for (const node of children(parentNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.exportNode(node, exports, document);\r\n        }\r\n        return exports;\r\n    }\r\n\r\n    /**\r\n     * Add a single node to the list of exports if it has a name. Override this method to change how\r\n     * symbols are exported, e.g. by modifying their exported name.\r\n     */\r\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\r\n        const name = this.nameProvider.getName(node);\r\n        if (name) {\r\n            exports.push(this.descriptions.createDescription(node, name, document));\r\n        }\r\n    }\r\n\r\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\r\n        const rootNode = document.parseResult.value;\r\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\r\n        // Here we navigate the full AST - local scopes shall be available in the whole document\r\n        for (const node of streamAllContents(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.processNode(node, document, scopes);\r\n        }\r\n        return scopes;\r\n    }\r\n\r\n    /**\r\n     * Process a single node during scopes computation. The default implementation makes the node visible\r\n     * in the subtree of its container (if the node has a name). Override this method to change this,\r\n     * e.g. by increasing the visibility to a higher level in the AST.\r\n     */\r\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\r\n        const container = node.$container;\r\n        if (container) {\r\n            const name = this.nameProvider.getName(node);\r\n            if (name) {\r\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNodeDescription } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\r\n\r\n/**\r\n * A scope describes what target elements are visible from a specific cross-reference context.\r\n */\r\nexport interface Scope {\r\n\r\n    /**\r\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\r\n     * If multiple matching elements are present, the selection of the returned element should be done\r\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\r\n     *\r\n     * @param name Name of the cross-reference target as it appears in the source text.\r\n     */\r\n    getElement(name: string): AstNodeDescription | undefined;\r\n\r\n    /**\r\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\r\n     * shown in the editor.\r\n     */\r\n    getAllElements(): Stream<AstNodeDescription>;\r\n\r\n}\r\n\r\nexport interface ScopeOptions {\r\n    caseInsensitive?: boolean;\r\n}\r\n\r\n/**\r\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\r\n * the next level of elements, which are queried when a target element is not found in the stream provided\r\n * to this scope.\r\n */\r\nexport class StreamScope implements Scope {\r\n    readonly elements: Stream<AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = elements;\r\n        this.outerScope = outerScope;\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        if (this.outerScope) {\r\n            return this.elements.concat(this.outerScope.getAllElements());\r\n        } else {\r\n            return this.elements;\r\n        }\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const local = this.caseInsensitive\r\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\r\n            : this.elements.find(e => e.name === name);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class MapScope implements Scope {\r\n    readonly elements: Map<string, AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = new Map();\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n        for (const element of elements) {\r\n            const name = this.caseInsensitive\r\n                ? element.name.toLowerCase()\r\n                : element.name;\r\n            this.elements.set(name, element);\r\n        }\r\n        this.outerScope = outerScope;\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\r\n        const local = this.elements.get(localName);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        let elementStream = stream(this.elements.values());\r\n        if (this.outerScope) {\r\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\r\n        }\r\n        return elementStream;\r\n    }\r\n\r\n}\r\n\r\nexport const EMPTY_SCOPE: Scope = {\r\n    getElement(): undefined {\r\n        return undefined;\r\n    },\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        return EMPTY_STREAM;\r\n    }\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Disposable } from './disposable.js';\r\nimport type { URI } from './uri-utils.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { DocumentState } from '../workspace/documents.js';\r\n\r\nexport abstract class DisposableCache implements Disposable {\r\n\r\n    protected toDispose: Disposable[] = [];\r\n    protected isDisposed = false;\r\n\r\n    onDispose(disposable: Disposable): void {\r\n        this.toDispose.push(disposable);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.throwIfDisposed();\r\n        this.clear();\r\n        this.isDisposed = true;\r\n        this.toDispose.forEach(disposable => disposable.dispose());\r\n    }\r\n\r\n    protected throwIfDisposed(): void {\r\n        if (this.isDisposed) {\r\n            throw new Error('This cache has already been disposed');\r\n        }\r\n    }\r\n\r\n    abstract clear(): void;\r\n}\r\n\r\nexport class SimpleCache<K, V> extends DisposableCache {\r\n    protected readonly cache = new Map<K, V>();\r\n\r\n    has(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    set(key: K, value: V): void {\r\n        this.throwIfDisposed();\r\n        this.cache.set(key, value);\r\n    }\r\n\r\n    get(key: K): V | undefined;\r\n    get(key: K, provider: () => V): V;\r\n    get(key: K, provider?: () => V): V | undefined {\r\n        this.throwIfDisposed();\r\n        if (this.cache.has(key)) {\r\n            return this.cache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            this.cache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.throwIfDisposed();\r\n        this.cache.clear();\r\n    }\r\n}\r\n\r\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\r\n\r\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\r\n    private readonly converter: (input: Context) => ContextKey | Context;\r\n\r\n    constructor(converter?: (input: Context) => ContextKey) {\r\n        super();\r\n        this.converter = converter ?? (value => value);\r\n    }\r\n\r\n    has(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).has(key);\r\n    }\r\n\r\n    set(contextKey: Context, key: Key, value: Value): void {\r\n        this.throwIfDisposed();\r\n        this.cacheForContext(contextKey).set(key, value);\r\n    }\r\n\r\n    get(contextKey: Context, key: Key): Value | undefined;\r\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\r\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\r\n        this.throwIfDisposed();\r\n        const contextCache = this.cacheForContext(contextKey);\r\n        if (contextCache.has(key)) {\r\n            return contextCache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            contextCache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).delete(key);\r\n    }\r\n\r\n    clear(): void;\r\n    clear(contextKey: Context): void;\r\n    clear(contextKey?: Context): void {\r\n        this.throwIfDisposed();\r\n        if (contextKey) {\r\n            const mapKey = this.converter(contextKey);\r\n            this.cache.delete(mapKey);\r\n        } else {\r\n            this.cache.clear();\r\n        }\r\n    }\r\n\r\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\r\n        const mapKey = this.converter(contextKey);\r\n        let documentCache = this.cache.get(mapKey);\r\n        if (!documentCache) {\r\n            documentCache = new Map();\r\n            this.cache.set(mapKey, documentCache);\r\n        }\r\n        return documentCache;\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to a document.\r\n * If this document is changed or deleted, all associated key/value pairs are deleted.\r\n */\r\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\r\n\r\n    /**\r\n     * Creates a new document cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     *\r\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\r\n     * which triggers on all documents that have been affected by this change, assuming that the\r\n     * state is `DocumentState.Linked` or a later state.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super(uri => uri.toString());\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\r\n                this.clear(document.uri.toString());\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                for (const uri of deleted) { // react only on deleted documents\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\r\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\r\n                for (const uri of allUris) {\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to the whole workspace.\r\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\r\n */\r\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\r\n\r\n    /**\r\n     * Creates a new workspace cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super();\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\r\n                this.clear();\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                if (deleted.length > 0) { // react only on deleted documents\r\n                    this.clear();\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => { // react on both changed and deleted documents\r\n                this.clear();\r\n            }));\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { Scope, ScopeOptions} from './scope.js';\r\nimport { MapScope, StreamScope } from './scope.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { WorkspaceCache } from '../utils/caching.js';\r\n\r\n/**\r\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\r\n */\r\nexport interface ScopeProvider {\r\n\r\n    /**\r\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\r\n     * identifier.\r\n     *\r\n     * @param context Information about the reference for which a scope is requested.\r\n     */\r\n    getScope(context: ReferenceInfo): Scope;\r\n\r\n}\r\n\r\nexport class DefaultScopeProvider implements ScopeProvider {\r\n\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n    protected readonly indexManager: IndexManager;\r\n\r\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\r\n    }\r\n\r\n    getScope(context: ReferenceInfo): Scope {\r\n        const scopes: Array<Stream<AstNodeDescription>> = [];\r\n        const referenceType = this.reflection.getReferenceType(context);\r\n\r\n        const precomputed = getDocument(context.container).precomputedScopes;\r\n        if (precomputed) {\r\n            let currentNode: AstNode | undefined = context.container;\r\n            do {\r\n                const allDescriptions = precomputed.get(currentNode);\r\n                if (allDescriptions.length > 0) {\r\n                    scopes.push(stream(allDescriptions).filter(\r\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\r\n                }\r\n                currentNode = currentNode.$container;\r\n            } while (currentNode);\r\n        }\r\n\r\n        let result: Scope = this.getGlobalScope(referenceType, context);\r\n        for (let i = scopes.length - 1; i >= 0; i--) {\r\n            result = this.createScope(scopes[i], result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST node descriptions.\r\n     */\r\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        return new StreamScope(stream(elements), outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\r\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\r\n     */\r\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        const s = stream(elements).map(e => {\r\n            const name = this.nameProvider.getName(e);\r\n            if (name) {\r\n                return this.descriptions.createDescription(e, name);\r\n            }\r\n            return undefined;\r\n        }).nonNullable();\r\n        return new StreamScope(s, outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a global scope filtered for the given reference type.\r\n     */\r\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\r\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI } from 'vscode-uri';\r\nimport type { CommentProvider } from '../documentation/comment-provider.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\n\r\nexport interface JsonSerializeOptions {\r\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\r\n    space?: string | number;\r\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\r\n    refText?: boolean;\r\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\r\n    sourceText?: boolean;\r\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\r\n    textRegions?: boolean;\r\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\r\n    comments?: boolean;\r\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\r\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\r\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: URI, reference: Reference) => string\r\n}\r\n\r\nexport interface JsonDeserializeOptions {\r\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: string) => URI\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\r\n */\r\nexport interface AstNodeWithTextRegion extends AstNode {\r\n    $sourceText?: string;\r\n    $textRegion?: AstNodeRegionWithAssignments;\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry a semantically relevant comment.\r\n */\r\nexport interface AstNodeWithComment extends AstNode {\r\n    $comment?: string;\r\n}\r\n\r\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\r\n    return typeof (node as AstNodeWithComment).$comment === 'string';\r\n}\r\n\r\n/**\r\n * A {@link DocumentSegment} representing the definition area of an AstNode within the DSL text.\r\n * Usually contains text region information on all assigned property values of the AstNode,\r\n * and may contain the defining file's URI as string.\r\n */\r\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\r\n    /**\r\n     * A record containing an entry for each assigned property of the AstNode.\r\n     * The key is equal to the property name and the value is an array of the property values'\r\n     * text regions, regardless of whether the property is a single value or list property.\r\n     */\r\n    assignments?: Record<string, DocumentSegment[]>;\r\n    /**\r\n     * The AstNode defining file's URI as string\r\n     */\r\n    documentURI?: string;\r\n}\r\n\r\n/**\r\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\r\n */\r\nexport interface JsonSerializer {\r\n    /**\r\n     * Serialize an `AstNode` into a JSON `string`.\r\n     * @param node The `AstNode` to be serialized.\r\n     * @param options Serialization options\r\n     */\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\r\n    /**\r\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\r\n     */\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\r\n}\r\n\r\n/**\r\n * A cross-reference in the serialized JSON representation of an AstNode.\r\n */\r\ninterface IntermediateReference {\r\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\r\n    $ref?: string\r\n    /** The actual text used to look up the reference target in the surrounding scope. */\r\n    $refText?: string\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    $error?: string\r\n}\r\n\r\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\r\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\r\n}\r\n\r\nexport class DefaultJsonSerializer implements JsonSerializer {\r\n\r\n    /** The set of AstNode properties to be ignored by the serializer. */\r\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\r\n\r\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\r\n    protected currentDocument: LangiumDocument | undefined;\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string {\r\n        const serializeOptions = options ?? {};\r\n        const specificReplacer = options?.replacer;\r\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, serializeOptions);\r\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\r\n\r\n        try {\r\n            this.currentDocument = getDocument(node);\r\n            return JSON.stringify(node, replacer, options?.space);\r\n        } finally {\r\n            this.currentDocument = undefined;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T {\r\n        const deserializeOptions = options ?? {};\r\n        const root = JSON.parse(content);\r\n        this.linkNode(root, root, deserializeOptions);\r\n        return root;\r\n    }\r\n\r\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\r\n        if (this.ignoreProperties.has(key)) {\r\n            return undefined;\r\n        } else if (isReference(value)) {\r\n            const refValue = value.ref;\r\n            const $refText = refText ? value.$refText : undefined;\r\n            if (refValue) {\r\n                const targetDocument = getDocument(refValue);\r\n                let targetUri = '';\r\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\r\n                    if (uriConverter) {\r\n                        targetUri = uriConverter(targetDocument.uri, value);\r\n                    } else {\r\n                        targetUri = targetDocument.uri.toString();\r\n                    }\r\n                }\r\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\r\n                return {\r\n                    $ref: `${targetUri}#${targetPath}`,\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            } else {\r\n                return {\r\n                    $error: value.error?.message ?? 'Could not resolve reference',\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            }\r\n        } else if (isAstNode(value)) {\r\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\r\n            if (textRegions) {\r\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\r\n                if ((!key || value.$document) && astNode?.$textRegion) {\r\n                    // The document URI is added to the root node of the resulting JSON tree\r\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\r\n                }\r\n            }\r\n            if (sourceText && !key) {\r\n                astNode ??= { ...value };\r\n                astNode.$sourceText = value.$cstNode?.text;\r\n            }\r\n            if (comments) {\r\n                astNode ??= { ...value };\r\n                const comment = this.commentProvider.getComment(value);\r\n                if (comment) {\r\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\r\n                }\r\n            }\r\n            return astNode ?? value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\r\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\r\n            offset: cstNode.offset,\r\n            end: cstNode.end,\r\n            length: cstNode.length,\r\n            range: cstNode.range,\r\n        };\r\n\r\n        if (node.$cstNode) {\r\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\r\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\r\n\r\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\r\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\r\n                if (propertyAssignments.length !== 0) {\r\n                    assignments[key] = propertyAssignments;\r\n                }\r\n            });\r\n\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\r\n        for (const [propertyName, item] of Object.entries(node)) {\r\n            if (Array.isArray(item)) {\r\n                for (let index = 0; index < item.length; index++) {\r\n                    const element = item[index];\r\n                    if (isIntermediateReference(element)) {\r\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\r\n                    } else if (isAstNode(element)) {\r\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\r\n                    }\r\n                }\r\n            } else if (isIntermediateReference(item)) {\r\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\r\n            } else if (isAstNode(item)) {\r\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\r\n            }\r\n        }\r\n        const mutable = node as Mutable<AstNode>;\r\n        mutable.$container = container;\r\n        mutable.$containerProperty = containerProperty;\r\n        mutable.$containerIndex = containerIndex;\r\n    }\r\n\r\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\r\n        let refText = reference.$refText;\r\n        let error = reference.$error;\r\n        if (reference.$ref) {\r\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\r\n            if (isAstNode(ref)) {\r\n                if (!refText) {\r\n                    refText = this.nameProvider.getName(ref);\r\n                }\r\n                return {\r\n                    $refText: refText ?? '',\r\n                    ref\r\n                };\r\n            } else {\r\n                error = ref;\r\n            }\r\n        }\r\n        if (error) {\r\n            const ref: Mutable<Reference> = {\r\n                $refText: refText ?? ''\r\n            };\r\n            ref.error = {\r\n                container,\r\n                property,\r\n                message: error,\r\n                reference: ref\r\n            };\r\n            return ref;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\r\n        try {\r\n            const fragmentIndex = uri.indexOf('#');\r\n            if (fragmentIndex === 0) {\r\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\r\n                if (!node) {\r\n                    return 'Could not resolve path: ' + uri;\r\n                }\r\n                return node;\r\n            }\r\n            if (fragmentIndex < 0) {\r\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\r\n                const document = this.langiumDocuments.getDocument(documentUri);\r\n                if (!document) {\r\n                    return 'Could not find document for URI: ' + uri;\r\n                }\r\n                return document.parseResult.value;\r\n            }\r\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\r\n            const document = this.langiumDocuments.getDocument(documentUri);\r\n            if (!document) {\r\n                return 'Could not find document for URI: ' + uri;\r\n            }\r\n            if (fragmentIndex === uri.length - 1) {\r\n                return document.parseResult.value;\r\n            }\r\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\r\n            if (!node) {\r\n                return 'Could not resolve URI: ' + uri;\r\n            }\r\n            return node;\r\n        } catch (err) {\r\n            return String(err);\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { TextDocumentProvider } from './workspace/documents.js';\r\nimport { UriUtils, type URI } from './utils/uri-utils.js';\r\n\r\n/**\r\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\r\n * These are resolved via the URI of a text document.\r\n */\r\nexport interface ServiceRegistry {\r\n\r\n    /**\r\n     * Register a language via its injected services.\r\n     */\r\n    register(language: LangiumCoreServices): void;\r\n\r\n    /**\r\n     * Retrieve the language-specific services for the given URI. In case only one language is\r\n     * registered, it may be used regardless of the URI format.\r\n     */\r\n    getServices(uri: URI): LangiumCoreServices;\r\n\r\n    /**\r\n     * Check whether services are available for the given URI.\r\n     */\r\n    hasServices(uri: URI): boolean;\r\n\r\n    /**\r\n     * The full set of registered language services.\r\n     */\r\n    readonly all: readonly LangiumCoreServices[];\r\n}\r\n\r\n/**\r\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\r\n */\r\nexport class DefaultServiceRegistry implements ServiceRegistry {\r\n\r\n    protected singleton?: LangiumCoreServices;\r\n    protected readonly languageIdMap = new Map<string, LangiumCoreServices>();\r\n    protected readonly fileExtensionMap = new Map<string, LangiumCoreServices>();\r\n\r\n    /**\r\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\r\n     */\r\n    protected get map(): Map<string, LangiumCoreServices> | undefined {\r\n        return this.fileExtensionMap;\r\n    }\r\n\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n\r\n    constructor(services?: LangiumSharedCoreServices) {\r\n        this.textDocuments = services?.workspace.TextDocuments;\r\n    }\r\n\r\n    register(language: LangiumCoreServices): void {\r\n        const data = language.LanguageMetaData;\r\n        for (const ext of data.fileExtensions) {\r\n            if (this.fileExtensionMap.has(ext)) {\r\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\r\n            }\r\n            this.fileExtensionMap.set(ext, language);\r\n        }\r\n        this.languageIdMap.set(data.languageId, language);\r\n        if (this.languageIdMap.size === 1) {\r\n            this.singleton = language;\r\n        } else {\r\n            this.singleton = undefined;\r\n        }\r\n    }\r\n\r\n    getServices(uri: URI): LangiumCoreServices {\r\n        if (this.singleton !== undefined) {\r\n            return this.singleton;\r\n        }\r\n        if (this.languageIdMap.size === 0) {\r\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\r\n        }\r\n        const languageId = this.textDocuments?.get(uri)?.languageId;\r\n        if (languageId !== undefined) {\r\n            const services = this.languageIdMap.get(languageId);\r\n            if (services) {\r\n                return services;\r\n            }\r\n        }\r\n        const ext = UriUtils.extname(uri);\r\n        const services = this.fileExtensionMap.get(ext);\r\n        if (!services) {\r\n            if (languageId) {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\r\n            } else {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\r\n            }\r\n        }\r\n        return services;\r\n    }\r\n\r\n    hasServices(uri: URI): boolean {\r\n        try {\r\n            this.getServices(uri);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get all(): readonly LangiumCoreServices[] {\r\n        return Array.from(this.languageIdMap.values());\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\r\nimport { assertUnreachable } from '../index.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport { isOperationCancelled } from '../utils/promise-utils.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\n\r\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\r\n    /** The AST node to which the diagnostic is attached. */\r\n    node: N;\r\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\r\n    property?: P;\r\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\r\n    keyword?: string;\r\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\r\n    index?: number;\r\n    /** If you want to create a diagnostic independent to any property, use the range property. */\r\n    range?: Range;\r\n    /** The diagnostic's code, which usually appear in the user interface. */\r\n    code?: integer | string;\r\n    /** An optional property to describe the error code. */\r\n    codeDescription?: CodeDescription;\r\n    /** Additional metadata about the diagnostic. */\r\n    tags?: DiagnosticTag[];\r\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\r\n    relatedInformation?: DiagnosticRelatedInformation[];\r\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\r\n    data?: unknown;\r\n}\r\n\r\n/**\r\n * Shape of information commonly used in the `data` field of diagnostics.\r\n */\r\nexport interface DiagnosticData {\r\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\r\n    code: string\r\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\r\n    actionSegment?: DocumentSegment\r\n    /** Specifies where to apply the code action in the form of a `Range`. */\r\n    actionRange?: Range\r\n}\r\n\r\n/**\r\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\r\n */\r\nexport function diagnosticData(code: string): DiagnosticData {\r\n    return { code };\r\n}\r\n\r\nexport type ValidationSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport type ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => void\r\n\r\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for describing functions which will be called once before or after all the AstNodes of an AST/Langium document are validated.\r\n *\r\n * The AST is represented by its root AstNode.\r\n *\r\n * The given validation acceptor helps to report some early or lately detected issues.\r\n *\r\n * The 'categories' indicate, which validation categories are executed for all the AstNodes.\r\n * This helps to tailor the preparations/tear-down logic to the actually executed checks on the nodes.\r\n *\r\n * It is recommended to support interrupts during long-running logic with 'interruptAndCheck(cancelToken)'.\r\n */\r\nexport type ValidationPreparation = (rootNode: AstNode, accept: ValidationAcceptor, categories: ValidationCategory[], cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\r\n *\r\n * ```ts\r\n *   const checks: ValidationChecks<StatemachineAstType> = {\r\n *       State: validator.checkStateNameStartsWithCapital\r\n *    };\r\n * ```\r\n *\r\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\r\n *\r\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\r\n */\r\nexport type ValidationChecks<T> = {\r\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\r\n} & {\r\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\r\n}\r\n\r\n/**\r\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\r\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\r\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\r\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\r\n * or with an explicit command, etc.\r\n *\r\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\r\n * for custom validation checks.\r\n */\r\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\r\n\r\nexport namespace ValidationCategory {\r\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\r\n}\r\n\r\ntype ValidationCheckEntry = {\r\n    check: ValidationCheck\r\n    category: ValidationCategory\r\n}\r\n\r\n/**\r\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\r\n */\r\nexport class ValidationRegistry {\r\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\r\n    private readonly reflection: AstReflection;\r\n\r\n    private entriesBefore: ValidationPreparation[] = [];\r\n    private entriesAfter: ValidationPreparation[] = [];\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n    }\r\n\r\n    /**\r\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\r\n     * or an array of validation checks.\r\n     *\r\n     * @param checksRecord Set of validation checks to register.\r\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\r\n        if (category === 'built-in') {\r\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\r\n        }\r\n        for (const [type, ch] of Object.entries(checksRecord)) {\r\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\r\n            if (Array.isArray(callbacks)) {\r\n                for (const check of callbacks) {\r\n                    const entry: ValidationCheckEntry = {\r\n                        check: this.wrapValidationException(check, thisObj),\r\n                        category\r\n                    };\r\n                    this.addEntry(type, entry);\r\n                }\r\n            } else if (typeof callbacks === 'function') {\r\n                const entry: ValidationCheckEntry = {\r\n                    check: this.wrapValidationException(callbacks, thisObj),\r\n                    category\r\n                };\r\n                this.addEntry(type, entry);\r\n            } else {\r\n                assertUnreachable(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\r\n        return async (node, accept, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\r\n        };\r\n    }\r\n\r\n    protected async handleException(functionality: () => MaybePromise<void>, messageContext: string, accept: ValidationAcceptor, node: AstNode): Promise<void> {\r\n        try {\r\n            await functionality();\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error(`${messageContext}:`, err);\r\n            if (err instanceof Error && err.stack) {\r\n                console.error(err.stack);\r\n            }\r\n            const messageDetails = err instanceof Error ? err.message : String(err);\r\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\r\n        }\r\n    }\r\n\r\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\r\n        if (type === 'AstNode') {\r\n            this.entries.add('AstNode', entry);\r\n            return;\r\n        }\r\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\r\n            this.entries.add(subtype, entry);\r\n        }\r\n    }\r\n\r\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\r\n        let checks = stream(this.entries.get(type))\r\n            .concat(this.entries.get('AstNode'));\r\n        if (categories) {\r\n            checks = checks.filter(entry => categories.includes(entry.category));\r\n        }\r\n        return checks.map(entry => entry.check);\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\r\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map for mapping names to nodes could be established.\r\n     * During the usual checks on the nodes, they are put into this map with their name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerBeforeDocument(checkBefore: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\r\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map with all the collected nodes and their names is checked\r\n     * and validation hints are created for all nodes with the same name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerAfterDocument(checkAfter: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\r\n    }\r\n\r\n    protected wrapPreparationException(check: ValidationPreparation, messageContext: string, thisObj: unknown): ValidationPreparation {\r\n        return async (rootNode, accept, categories, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\r\n        };\r\n    }\r\n\r\n    get checksBefore(): ValidationPreparation[] {\r\n        return this.entriesBefore;\r\n    }\r\n\r\n    get checksAfter(): ValidationPreparation[] {\r\n        return this.entriesAfter;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { MismatchedTokenException } from 'chevrotain';\r\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\r\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry, ValidationSeverity } from './validation-registry.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { diagnosticData } from './validation-registry.js';\r\nimport type { LexingDiagnostic, LexingDiagnosticSeverity } from '../parser/token-builder.js';\r\n\r\nexport interface ValidationOptions {\r\n    /**\r\n     * If this is set, only the checks associated with these categories are executed; otherwise\r\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\r\n     */\r\n    categories?: ValidationCategory[];\r\n    /** If true, no further diagnostics are reported if there are lexing errors. */\r\n    stopAfterLexingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are parsing errors. */\r\n    stopAfterParsingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are linking errors. */\r\n    stopAfterLinkingErrors?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service for validating `LangiumDocument`s.\r\n */\r\nexport interface DocumentValidator {\r\n    /**\r\n     * Validates the whole specified document.\r\n     *\r\n     * @param document specified document to validate\r\n     * @param options options to control the validation process\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\r\n}\r\n\r\nexport class DefaultDocumentValidator implements DocumentValidator {\r\n\r\n    protected readonly validationRegistry: ValidationRegistry;\r\n    protected readonly metadata: LanguageMetaData;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.validationRegistry = services.validation.ValidationRegistry;\r\n        this.metadata = services.LanguageMetaData;\r\n    }\r\n\r\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const parseResult = document.parseResult;\r\n        const diagnostics: Diagnostic[] = [];\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        if (!options.categories || options.categories.includes('built-in')) {\r\n            this.processLexingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processParsingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processLinkingErrors(document, diagnostics, options);\r\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\r\n                return diagnostics;\r\n            }\r\n        }\r\n\r\n        // Process custom validations\r\n        try {\r\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error('An error occurred during validation:', err);\r\n        }\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        return diagnostics;\r\n    }\r\n\r\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...parseResult.lexerReport?.diagnostics ?? []] as LexingDiagnostic[];\r\n        for (const lexerDiagnostic of lexerDiagnostics) {\r\n            const severity = lexerDiagnostic.severity ?? 'error';\r\n            const diagnostic: Diagnostic = {\r\n                severity: toDiagnosticSeverity(severity),\r\n                range: {\r\n                    start: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! - 1\r\n                    },\r\n                    end: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! + lexerDiagnostic.length - 1\r\n                    }\r\n                },\r\n                message: lexerDiagnostic.message,\r\n                data: toDiagnosticData(severity),\r\n                source: this.getSource()\r\n            };\r\n            diagnostics.push(diagnostic);\r\n        }\r\n    }\r\n\r\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const parserError of parseResult.parserErrors) {\r\n            let range: Range | undefined = undefined;\r\n            // We can run into the chevrotain error recovery here\r\n            // The token contained in the parser error might be automatically inserted\r\n            // In this case every position value will be `NaN`\r\n            if (isNaN(parserError.token.startOffset)) {\r\n                // Some special parser error types contain a `previousToken`\r\n                // We can simply append our diagnostic to that token\r\n                if ('previousToken' in parserError) {\r\n                    const token = (parserError as MismatchedTokenException).previousToken;\r\n                    if (!isNaN(token.startOffset)) {\r\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\r\n                        range = { start: position, end: position};\r\n                    } else {\r\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\r\n                        // Point to document start\r\n                        const position: Position = { line: 0, character: 0 };\r\n                        range = { start: position, end: position};\r\n                    }\r\n                }\r\n            } else {\r\n                range = tokenToRange(parserError.token);\r\n            }\r\n            if (range) {\r\n                const diagnostic: Diagnostic = {\r\n                    severity: toDiagnosticSeverity('error'),\r\n                    range,\r\n                    message: parserError.message,\r\n                    data: diagnosticData(DocumentValidator.ParsingError),\r\n                    source: this.getSource()\r\n                };\r\n                diagnostics.push(diagnostic);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const reference of document.references) {\r\n            const linkingError = reference.error;\r\n            if (linkingError) {\r\n                const info: DiagnosticInfo<AstNode, string> = {\r\n                    node: linkingError.container,\r\n                    property: linkingError.property,\r\n                    index: linkingError.index,\r\n                    data: {\r\n                        code: DocumentValidator.LinkingError,\r\n                        containerType: linkingError.container.$type,\r\n                        property: linkingError.property,\r\n                        refText: linkingError.reference.$refText\r\n                    } satisfies LinkingErrorData\r\n                };\r\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const validationItems: Diagnostic[] = [];\r\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => {\r\n            validationItems.push(this.toDiagnostic(severity, message, info));\r\n        };\r\n\r\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\r\n\r\n        return validationItems;\r\n    }\r\n\r\n    protected async validateAstBefore(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksBefore = this.validationRegistry.checksBefore;\r\n        for (const checkBefore of checksBefore) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkBefore(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected async validateAstNodes(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        await Promise.all(streamAst(rootNode).map(async node => {\r\n            await interruptAndCheck(cancelToken);\r\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\r\n            for (const check of checks) {\r\n                await check(node, acceptor, cancelToken);\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected async validateAstAfter(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksAfter = this.validationRegistry.checksAfter;\r\n        for (const checkAfter of checksAfter) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkAfter(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected toDiagnostic<N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N, string>): Diagnostic {\r\n        return {\r\n            message,\r\n            range: getDiagnosticRange(info),\r\n            severity: toDiagnosticSeverity(severity),\r\n            code: info.code,\r\n            codeDescription: info.codeDescription,\r\n            tags: info.tags,\r\n            relatedInformation: info.relatedInformation,\r\n            data: info.data,\r\n            source: this.getSource()\r\n        };\r\n    }\r\n\r\n    protected getSource(): string | undefined {\r\n        return this.metadata.languageId;\r\n    }\r\n}\r\n\r\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\r\n    if (info.range) {\r\n        return info.range;\r\n    }\r\n    let cstNode: CstNode | undefined;\r\n    if (typeof info.property === 'string') {\r\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\r\n    } else if (typeof info.keyword === 'string') {\r\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\r\n    }\r\n    cstNode ??= info.node.$cstNode;\r\n    if (!cstNode) {\r\n        return {\r\n            start: { line: 0, character: 0 },\r\n            end: { line: 0, character: 0 }\r\n        };\r\n    }\r\n    return cstNode.range;\r\n}\r\n\r\n/**\r\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\r\n *\r\n * @param severity The lexing diagnostic severity\r\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\r\n */\r\nexport function toDiagnosticSeverity(severity: LexingDiagnosticSeverity): DiagnosticSeverity {\r\n    switch (severity) {\r\n        case 'error':\r\n            return 1 satisfies typeof DiagnosticSeverity.Error;\r\n        case 'warning':\r\n            return 2 satisfies typeof DiagnosticSeverity.Warning;\r\n        case 'info':\r\n            return 3 satisfies typeof DiagnosticSeverity.Information;\r\n        case 'hint':\r\n            return 4 satisfies typeof DiagnosticSeverity.Hint;\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport function toDiagnosticData(severity: LexingDiagnosticSeverity): DiagnosticData {\r\n    switch (severity) {\r\n        case 'error':\r\n            return diagnosticData(DocumentValidator.LexingError);\r\n        case 'warning':\r\n            return diagnosticData(DocumentValidator.LexingWarning);\r\n        case 'info':\r\n            return diagnosticData(DocumentValidator.LexingInfo);\r\n        case 'hint':\r\n            return diagnosticData(DocumentValidator.LexingHint);\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport namespace DocumentValidator {\r\n    export const LexingError = 'lexing-error';\r\n    export const LexingWarning = 'lexing-warning';\r\n    export const LexingInfo = 'lexing-info';\r\n    export const LexingHint = 'lexing-hint';\r\n    export const ParsingError = 'parsing-error';\r\n    export const LinkingError = 'linking-error';\r\n}\r\n\r\nexport interface LinkingErrorData extends DiagnosticData {\r\n    containerType: string\r\n    property: string\r\n    refText: string\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from './ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isLinkingError } from '../syntax-tree.js';\r\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\r\n */\r\nexport interface AstNodeDescriptionProvider {\r\n\r\n    /**\r\n     * Create a description for the given AST node. This service method is typically used while indexing\r\n     * the contents of a document and during scope computation.\r\n     *\r\n     * @param node An AST node.\r\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\r\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\r\n     *     of your language.\r\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\r\n     */\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\r\n\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n    }\r\n\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription {\r\n        const doc = document ?? getDocument(node);\r\n        name ??= this.nameProvider.getName(node);\r\n        const path = this.astNodeLocator.getAstNodePath(node);\r\n        if (!name) {\r\n            throw new Error(`Node at path ${path} has no name.`);\r\n        }\r\n        let nameNodeSegment: DocumentSegment | undefined;\r\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\r\n        return {\r\n            node,\r\n            name,\r\n            get nameSegment() {\r\n                return nameSegmentGetter();\r\n            },\r\n            selectionSegment: toDocumentSegment(node.$cstNode),\r\n            type: node.$type,\r\n            documentUri: doc.uri,\r\n            path\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a cross-reference within a document or between two documents.\r\n */\r\nexport interface ReferenceDescription {\r\n    /** URI of the document that holds a reference */\r\n    sourceUri: URI\r\n    /** Path to AstNode that holds a reference */\r\n    sourcePath: string\r\n    /** Target document uri */\r\n    targetUri: URI\r\n    /** Path to the target AstNode inside the document */\r\n    targetPath: string\r\n    /** Segment of the reference text. */\r\n    segment: DocumentSegment\r\n    /** Marks a local reference i.e. a cross reference inside a document.   */\r\n    local?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\r\n * to determine which documents are affected and should be rebuilt when a document is changed.\r\n */\r\nexport interface ReferenceDescriptionProvider {\r\n    /**\r\n     * Create descriptions of all cross-references found in the given document. These descriptions are\r\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\r\n     * a document change is reported by the client.\r\n     *\r\n     * @param document The document in which to gather cross-references.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\r\n}\r\n\r\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\r\n\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\r\n        const descr: ReferenceDescription[] = [];\r\n        const rootNode = document.parseResult.value;\r\n        for (const astNode of streamAst(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\r\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\r\n                const description = this.createDescription(refInfo);\r\n                if (description) {\r\n                    descr.push(description);\r\n                }\r\n            });\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\r\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\r\n        const refCstNode = refInfo.reference.$refNode;\r\n        if (!targetNodeDescr || !refCstNode) {\r\n            return undefined;\r\n        }\r\n        const docUri = getDocument(refInfo.container).uri;\r\n        return {\r\n            sourceUri: docUri,\r\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\r\n            targetUri: targetNodeDescr.documentUri,\r\n            targetPath: targetNodeDescr.path,\r\n            segment: toDocumentSegment(refCstNode),\r\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode } from '../syntax-tree.js';\r\n\r\n/**\r\n * Language-specific service for locating an `AstNode` in a document.\r\n */\r\nexport interface AstNodeLocator {\r\n\r\n    /**\r\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\r\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\r\n     *\r\n     * @param node The `AstNode` for which to create the path.\r\n     * @returns a path represented by a `string` that identifies `node` inside its document.\r\n     * @see AstNodeLocator.getAstNode\r\n     */\r\n    getAstNodePath(node: AstNode): string;\r\n\r\n    /**\r\n     * Locates an `AstNode` inside another node by following the given path.\r\n     *\r\n     * @param node Parent element.\r\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\r\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\r\n     * @see AstNodeLocator.getAstNodePath\r\n     */\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeLocator implements AstNodeLocator {\r\n    protected segmentSeparator = '/';\r\n    protected indexSeparator = '@';\r\n\r\n    getAstNodePath(node: AstNode): string {\r\n        if (node.$container) {\r\n            const containerPath = this.getAstNodePath(node.$container);\r\n            const newSegment = this.getPathSegment(node);\r\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\r\n            return nodePath;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\r\n        if (!$containerProperty) {\r\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\r\n        }\r\n        if ($containerIndex !== undefined) {\r\n            return $containerProperty + this.indexSeparator + $containerIndex;\r\n        }\r\n        return $containerProperty;\r\n    }\r\n\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\r\n        const segments = path.split(this.segmentSeparator);\r\n        return segments.reduce((previousValue, currentValue) => {\r\n            if (!previousValue || currentValue.length === 0) {\r\n                return previousValue;\r\n            }\r\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\r\n            if (propertyIndex > 0) {\r\n                const property = currentValue.substring(0, propertyIndex);\r\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\r\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\r\n                return array?.[arrayIndex];\r\n            }\r\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\r\n        }, node) as T;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\nexport interface AsyncDisposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport namespace Disposable {\r\n    export function create(callback: () => Promise<void>): AsyncDisposable;\r\n    export function create(callback: () => void): Disposable;\r\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\r\n        return {\r\n            dispose: async () => await callback()\r\n        };\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Emitter } from '../utils/event.js';\r\nimport type {\r\n    ConfigurationItem,\r\n    DidChangeConfigurationParams,\r\n    DidChangeConfigurationRegistrationOptions,\r\n    Disposable,\r\n    Event,\r\n    InitializeParams,\r\n    InitializedParams\r\n} from 'vscode-languageserver-protocol';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { Deferred } from '../utils/promise-utils.js';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nexport interface ConfigurationProvider {\r\n\r\n    /**\r\n     * A promise that resolves when the configuration provider is ready to be used.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Returns a configuration value stored for the given language.\r\n     *\r\n     * @param language The language id\r\n     * @param configuration Configuration name\r\n     */\r\n    getConfiguration(language: string, configuration: string): Promise<any>;\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void;\r\n\r\n    /**\r\n     * Get notified after a configuration section has been updated.\r\n     */\r\n    onConfigurationSectionUpdate(callback: ConfigurationSectionUpdateListener): Disposable\r\n}\r\n\r\nexport interface ConfigurationInitializedParams extends InitializedParams {\r\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\r\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\r\n}\r\n\r\nexport interface ConfigurationSectionUpdate {\r\n    /**\r\n     * The name of the configuration section that has been updated.\r\n     */\r\n    section: string;\r\n\r\n    /**\r\n     * The updated configuration section.\r\n     */\r\n    configuration: any;\r\n}\r\n\r\nexport type ConfigurationSectionUpdateListener = (update: ConfigurationSectionUpdate) => void;\r\n\r\n/**\r\n * Base configuration provider for building up other configuration providers\r\n */\r\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected settings: Record<string, Record<string, any>> = {};\r\n    protected workspaceConfig = false;\r\n    protected onConfigurationSectionUpdateEmitter = new Emitter<ConfigurationSectionUpdate>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\r\n    }\r\n\r\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\r\n        if (this.workspaceConfig) {\r\n            if (params.register) {\r\n                // params.register(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n\r\n                const languages = this.serviceRegistry.all;\r\n                params.register({\r\n                    // Listen to configuration changes for all languages\r\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\r\n                });\r\n            }\r\n\r\n            if (params.fetchConfiguration) {\r\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\r\n                    // Fetch the configuration changes for all languages\r\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\r\n                });\r\n\r\n                // get workspace configurations (default scope URI)\r\n                const configs = await params.fetchConfiguration(configToUpdate);\r\n                configToUpdate.forEach((conf, idx) => {\r\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\r\n                });\r\n            }\r\n        }\r\n        this._ready.resolve();\r\n    }\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void {\r\n        if (!change.settings) {\r\n            return;\r\n        }\r\n        Object.keys(change.settings).forEach(section => {\r\n            const configuration = change.settings[section];\r\n            this.updateSectionConfiguration(section, configuration);\r\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\r\n        });\r\n    }\r\n\r\n    protected updateSectionConfiguration(section: string, configuration: any): void {\r\n        this.settings[section] = configuration;\r\n    }\r\n\r\n    /**\r\n    * Returns a configuration value stored for the given language.\r\n    *\r\n    * @param language The language id\r\n    * @param configuration Configuration name\r\n    */\r\n    async getConfiguration(language: string, configuration: string): Promise<any> {\r\n        await this.ready;\r\n\r\n        const sectionName = this.toSectionName(language);\r\n        if (this.settings[sectionName]) {\r\n            return this.settings[sectionName][configuration];\r\n        }\r\n    }\r\n\r\n    protected toSectionName(languageId: string): string {\r\n        return `${languageId}`;\r\n    }\r\n\r\n    get onConfigurationSectionUpdate(): Event<ConfigurationSectionUpdate> {\r\n        return this.onConfigurationSectionUpdateEmitter.event;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Disposable } from '../utils/disposable.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport type { Deferred } from '../utils/promise-utils.js';\r\nimport type { ValidationOptions } from '../validation/document-validator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory, TextDocumentProvider } from './documents.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { ValidationCategory } from '../validation/validation-registry.js';\r\nimport { DocumentState } from './documents.js';\r\n\r\nexport interface BuildOptions {\r\n    /**\r\n     * Control the validation phase with this option:\r\n     *  - `true` enables all validation checks and forces revalidating the documents\r\n     *  - `false` or `undefined` disables all validation checks\r\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\r\n     */\r\n    validation?: boolean | ValidationOptions\r\n}\r\n\r\nexport interface DocumentBuildState {\r\n    /** Whether a document has completed its last build process. */\r\n    completed: boolean\r\n    /** The options used for the last build process. */\r\n    options: BuildOptions\r\n    /** Additional information about the last build result. */\r\n    result?: {\r\n        validationChecks?: ValidationCategory[]\r\n    }\r\n}\r\n\r\n/**\r\n * Shared-service for building and updating `LangiumDocument`s.\r\n */\r\nexport interface DocumentBuilder {\r\n\r\n    /** The options used for rebuilding documents after an update. */\r\n    updateBuildOptions: BuildOptions;\r\n\r\n    /**\r\n     * Execute all necessary build steps for the given documents.\r\n     *\r\n     * @param documents Set of documents to be built.\r\n     * @param options Options for the document builder.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * This method is called when a document change is detected. It updates the state of all\r\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\r\n     *\r\n     * @param changed URIs of changed or created documents\r\n     * @param deleted URIs of deleted documents\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCancelled` if cancellation is detected during execution\r\n     */\r\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Notify the given callback when a document update was triggered, but before any document\r\n     * is rebuilt. Listeners to this event should not perform any long-running task.\r\n     */\r\n    onUpdate(callback: DocumentUpdateListener): Disposable;\r\n\r\n    /**\r\n     * Notify the given callback when a set of documents has been built reaching the specified target state.\r\n     */\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\r\n\r\n    /**\r\n     * Notify the specified callback when a document has been built reaching the specified target state.\r\n     * Unlike {@link onBuildPhase} the listener is called for every single document.\r\n     *\r\n     * There are two main advantages compared to {@link onBuildPhase}:\r\n     * 1. If the build is cancelled, {@link onDocumentPhase} will still fire for documents that have reached a specific state.\r\n     *    Meanwhile, {@link onBuildPhase} won't fire for that state.\r\n     * 2. The {@link DocumentBuilder} ensures that all {@link DocumentPhaseListener} instances are called for a built document.\r\n     *    Even if the build is cancelled before those listeners were called.\r\n     */\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable;\r\n\r\n    /**\r\n     * Wait until the workspace has reached the specified state for all documents.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Wait until the document specified by the {@link uri} has reached the specified state.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\r\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\r\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n}\r\n\r\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\r\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\r\nexport type DocumentPhaseListener = (built: LangiumDocument, cancelToken: CancellationToken) => void | Promise<void>\r\nexport class DefaultDocumentBuilder implements DocumentBuilder {\r\n\r\n    updateBuildOptions: BuildOptions = {\r\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\r\n        validation: {\r\n            categories: ['built-in', 'fast']\r\n        }\r\n    };\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly textDocuments: TextDocumentProvider | undefined;\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\r\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\r\n    protected readonly documentPhaseListeners = new MultiMap<DocumentState, DocumentPhaseListener>();\r\n    protected readonly buildState = new Map<string, DocumentBuildState>();\r\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\r\n    protected currentState = DocumentState.Changed;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.indexManager = services.workspace.IndexManager;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const document of documents) {\r\n            const key = document.uri.toString();\r\n            if (document.state === DocumentState.Validated) {\r\n                if (typeof options.validation === 'boolean' && options.validation) {\r\n                    // Force re-running all validation checks\r\n                    document.state = DocumentState.IndexedReferences;\r\n                    document.diagnostics = undefined;\r\n                    this.buildState.delete(key);\r\n                } else if (typeof options.validation === 'object') {\r\n                    const buildState = this.buildState.get(key);\r\n                    const previousCategories = buildState?.result?.validationChecks;\r\n                    if (previousCategories) {\r\n                        // Validation with explicit options was requested for a document that has already been partly validated.\r\n                        // In this case, we need to merge the previous validation categories with the new ones.\r\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\r\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\r\n                        if (categories.length > 0) {\r\n                            this.buildState.set(key, {\r\n                                completed: false,\r\n                                options: {\r\n                                    validation: {\r\n                                        ...options.validation,\r\n                                        categories\r\n                                    }\r\n                                },\r\n                                result: buildState.result\r\n                            });\r\n                            document.state = DocumentState.IndexedReferences;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Default: forget any previous build options\r\n                this.buildState.delete(key);\r\n            }\r\n        }\r\n        this.currentState = DocumentState.Changed;\r\n        await this.emitUpdate(documents.map(e => e.uri), []);\r\n        await this.buildDocuments(documents, options, cancelToken);\r\n    }\r\n\r\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\r\n        this.currentState = DocumentState.Changed;\r\n        // Remove all metadata of documents that are reported as deleted\r\n        for (const deletedUri of deleted) {\r\n            this.langiumDocuments.deleteDocument(deletedUri);\r\n            this.buildState.delete(deletedUri.toString());\r\n            this.indexManager.remove(deletedUri);\r\n        }\r\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\r\n        for (const changedUri of changed) {\r\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\r\n            if (!invalidated) {\r\n                // We create an unparsed, invalid document.\r\n                // This will be parsed as soon as we reach the first document builder phase.\r\n                // This allows to cancel the parsing process later in case we need it.\r\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\r\n                newDocument.state = DocumentState.Changed;\r\n                this.langiumDocuments.addDocument(newDocument);\r\n            }\r\n            this.buildState.delete(changedUri.toString());\r\n        }\r\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\r\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\r\n        this.langiumDocuments.all\r\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\r\n            .forEach(doc => {\r\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n                linker.unlink(doc);\r\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\r\n                doc.diagnostics = undefined;\r\n            });\r\n        // Notify listeners of the update\r\n        await this.emitUpdate(changed, deleted);\r\n        // Only allow interrupting the execution after all state changes are done\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        // Collect and sort all documents that we should rebuild\r\n        const rebuildDocuments = this.sortDocuments(\r\n            this.langiumDocuments.all\r\n                .filter(doc =>\r\n                    // This includes those that were reported as changed and those that we selected for relinking\r\n                    doc.state < DocumentState.Linked\r\n                    // This includes those for which a previous build has been cancelled\r\n                    || !this.buildState.get(doc.uri.toString())?.completed\r\n                )\r\n                .toArray()\r\n        );\r\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\r\n    }\r\n\r\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\r\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\r\n    }\r\n\r\n    /**\r\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\r\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\r\n     *\r\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\r\n     * in files that are currently not opened in the editor.\r\n     */\r\n    protected sortDocuments(documents: LangiumDocument[]): LangiumDocument[] {\r\n        let left = 0;\r\n        let right = documents.length - 1;\r\n\r\n        while (left < right) {\r\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\r\n                left++;\r\n            }\r\n\r\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\r\n                right--;\r\n            }\r\n\r\n            if (left < right) {\r\n                [documents[left], documents[right]] = [documents[right], documents[left]];\r\n            }\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    private hasTextDocument(doc: LangiumDocument): boolean {\r\n        return Boolean(this.textDocuments?.get(doc.uri));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given document should be relinked after changes were found in the given URIs.\r\n     */\r\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        // Relink documents with linking errors -- maybe those references can be resolved now\r\n        if (document.references.some(ref => ref.error !== undefined)) {\r\n            return true;\r\n        }\r\n        // Check whether the document is affected by any of the changed URIs\r\n        return this.indexManager.isAffected(document, changedUris);\r\n    }\r\n\r\n    onUpdate(callback: DocumentUpdateListener): Disposable {\r\n        this.updateListeners.push(callback);\r\n        return Disposable.create(() => {\r\n            const index = this.updateListeners.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.updateListeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the given documents by stepping through all build phases. If a document's state indicates\r\n     * that a certain build phase is already done, the phase is skipped for that document.\r\n     *\r\n     * @param documents The documents to build.\r\n     * @param options the {@link BuildOptions} to use.\r\n     * @param cancelToken A cancellation token that can be used to cancel the build.\r\n     * @returns A promise that resolves when the build is done.\r\n     */\r\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\r\n        this.prepareBuild(documents, options);\r\n        // 0. Parse content\r\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\r\n            this.langiumDocumentFactory.update(doc, cancelToken)\r\n        );\r\n        // 1. Index content\r\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\r\n            this.indexManager.updateContent(doc, cancelToken)\r\n        );\r\n        // 2. Compute scopes\r\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\r\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\r\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\r\n        });\r\n        // 3. Linking\r\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\r\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n            return linker.link(doc, cancelToken);\r\n        });\r\n        // 4. Index references\r\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\r\n            this.indexManager.updateReferences(doc, cancelToken)\r\n        );\r\n        // 5. Validation\r\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\r\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\r\n            this.validate(doc, cancelToken)\r\n        );\r\n\r\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\r\n        for (const doc of documents) {\r\n            const state = this.buildState.get(doc.uri.toString());\r\n            if (state) {\r\n                state.completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\r\n     *\r\n     * @param documents collection of documents to be built\r\n     * @param options the {@link BuildOptions} to use\r\n     */\r\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\r\n        for (const doc of documents) {\r\n            const key = doc.uri.toString();\r\n            const state = this.buildState.get(key);\r\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\r\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\r\n            // and continue where it was cancelled.\r\n            if (!state || state.completed) {\r\n                this.buildState.set(key, {\r\n                    completed: false,\r\n                    options,\r\n                    result: state?.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\r\n     *\r\n     * @param documents The array of documents to process.\r\n     * @param targetState The target {@link DocumentState} to bring the documents to.\r\n     * @param cancelToken A token that can be used to cancel the operation.\r\n     * @param callback A function to be called for each document.\r\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\r\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\r\n     */\r\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\r\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\r\n        const filtered = documents.filter(doc => doc.state < targetState);\r\n        for (const document of filtered) {\r\n            await interruptAndCheck(cancelToken);\r\n            await callback(document);\r\n            document.state = targetState;\r\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\r\n        }\r\n\r\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\r\n        // For example, this happens in case the cancellation triggers between the processing of two documents\r\n        // Or files that were picked up during the workspace initialization\r\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\r\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\r\n        this.currentState = targetState;\r\n    }\r\n\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\r\n        this.buildPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.buildPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable {\r\n        this.documentPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.documentPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\r\n        let uri: URI | undefined = undefined;\r\n        if (uriOrToken && 'path' in uriOrToken) {\r\n            uri = uriOrToken;\r\n        } else {\r\n            cancelToken = uriOrToken;\r\n        }\r\n        cancelToken ??= CancellationToken.None;\r\n        if (uri) {\r\n            const document = this.langiumDocuments.getDocument(uri);\r\n            if (document && document.state > state) {\r\n                return Promise.resolve(uri);\r\n            }\r\n        }\r\n        if (this.currentState >= state) {\r\n            return Promise.resolve(undefined);\r\n        } else if (cancelToken.isCancellationRequested) {\r\n            return Promise.reject(OperationCancelled);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const buildDisposable = this.onBuildPhase(state, () => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                if (uri) {\r\n                    const document = this.langiumDocuments.getDocument(uri);\r\n                    resolve(document?.uri);\r\n                } else {\r\n                    resolve(undefined);\r\n                }\r\n            });\r\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                reject(OperationCancelled);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async notifyDocumentPhase(document: LangiumDocument, state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        const listeners = this.documentPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            try {\r\n                await listener(document, cancelToken);\r\n            } catch (err) {\r\n                // Ignore cancellation errors\r\n                // We want to finish the listeners before throwing\r\n                if (!isOperationCancelled(err)) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        if (documents.length === 0) {\r\n            // Don't notify when no document has been processed\r\n            return;\r\n        }\r\n        const listeners = this.buildPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            await interruptAndCheck(cancelToken);\r\n            await listener(documents, cancelToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given document should be validated during a build. The default\r\n     * implementation checks the `validation` property of the build options. If it's set to `true`\r\n     * or a `ValidationOptions` object, the document is included in the validation phase.\r\n     */\r\n    protected shouldValidate(document: LangiumDocument): boolean {\r\n        return Boolean(this.getBuildOptions(document).validation);\r\n    }\r\n\r\n    /**\r\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\r\n     * If the document already contains diagnostics, the new ones are added to the list.\r\n     */\r\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\r\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\r\n        const validationSetting = this.getBuildOptions(document).validation;\r\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\r\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\r\n        if (document.diagnostics) {\r\n            document.diagnostics.push(...diagnostics);\r\n        } else {\r\n            document.diagnostics = diagnostics;\r\n        }\r\n\r\n        // Store information about the executed validation in the build state\r\n        const state = this.buildState.get(document.uri.toString());\r\n        if (state) {\r\n            state.result ??= {};\r\n            const newCategories = options?.categories ?? ValidationCategory.all;\r\n            if (state.result.validationChecks) {\r\n                state.result.validationChecks.push(...newCategories);\r\n            } else {\r\n                state.result.validationChecks = [...newCategories];\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\r\n        return this.buildState.get(document.uri.toString())?.options ?? {};\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { ContextCache } from '../utils/caching.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\nimport type { ReferenceDescription } from './ast-descriptions.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\n\r\n/**\r\n * The index manager is responsible for keeping metadata about symbols and cross-references\r\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\r\n * and completion. This service is shared between all languages of a language server.\r\n */\r\nexport interface IndexManager {\r\n\r\n    /**\r\n     * Removes the specified document URI from the index.\r\n     * Necessary when documents are deleted and not referenceable anymore.\r\n     *\r\n     * @param uri The URI of the document for which index data shall be removed\r\n     */\r\n    remove(uri: URI): void;\r\n\r\n    /**\r\n     * Updates the information about the exportable content of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Updates the information about the cross-references of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Determine whether the given document could be affected by changes of the documents\r\n     * identified by the given URIs (second parameter). The document is typically regarded as\r\n     * affected if it contains a reference to any of the changed files.\r\n     *\r\n     * @param document Document to check whether it's affected\r\n     * @param changedUris URIs of the changed documents\r\n     */\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\r\n\r\n    /**\r\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\r\n     *\r\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\r\n     * @param uris If specified, only returns elements from the given URIs.\r\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\r\n     */\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\r\n\r\n    /**\r\n     * Returns all known references that are pointing to the given `targetNode`.\r\n     *\r\n     * @param targetNode the `AstNode` to look up references for\r\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\r\n     *\r\n     * @returns a `Stream` of references that are targeting the `targetNode`\r\n     */\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\r\n\r\n}\r\n\r\nexport class DefaultIndexManager implements IndexManager {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly documents: LangiumDocuments;\r\n    protected readonly astReflection: AstReflection;\r\n\r\n    /**\r\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\r\n     * The key used in this map is the string representation of the specific document URI.\r\n     */\r\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\r\n    /**\r\n     * This is a cache for the `allElements()` method.\r\n     * It caches the descriptions from `symbolIndex` grouped by types.\r\n     */\r\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\r\n    /**\r\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\r\n     * This is used to compute which elements are affected by a document change\r\n     * and for finding references to an AST node.\r\n     */\r\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.documents = services.workspace.LangiumDocuments;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.astReflection = services.AstReflection;\r\n    }\r\n\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\r\n        const targetDocUri = getDocument(targetNode).uri;\r\n        const result: ReferenceDescription[] = [];\r\n        this.referenceIndex.forEach(docRefs => {\r\n            docRefs.forEach(refDescr => {\r\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\r\n                    result.push(refDescr);\r\n                }\r\n            });\r\n        });\r\n        return stream(result);\r\n    }\r\n\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\r\n        let documentUris = stream(this.symbolIndex.keys());\r\n        if (uris) {\r\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\r\n        }\r\n        return documentUris\r\n            .map(uri => this.getFileDescriptions(uri, nodeType))\r\n            .flat();\r\n    }\r\n\r\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\r\n        if (!nodeType) {\r\n            return this.symbolIndex.get(uri) ?? [];\r\n        }\r\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\r\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\r\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\r\n        });\r\n        return descriptions;\r\n    }\r\n\r\n    remove(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        this.symbolIndex.delete(uriString);\r\n        this.symbolByTypeIndex.clear(uriString);\r\n        this.referenceIndex.delete(uriString);\r\n    }\r\n\r\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\r\n        const uri = document.uri.toString();\r\n        this.symbolIndex.set(uri, exports);\r\n        this.symbolByTypeIndex.clear(uri);\r\n    }\r\n\r\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\r\n        this.referenceIndex.set(document.uri.toString(), indexData);\r\n    }\r\n\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        const references = this.referenceIndex.get(document.uri.toString());\r\n        if (!references) {\r\n            return false;\r\n        }\r\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\r\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { URI, UriUtils } from '../utils/uri-utils.js';\r\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\r\nimport type { WorkspaceLock } from './workspace-lock.js';\r\n\r\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\r\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\r\nexport type { WorkspaceFolder };\r\n\r\n/**\r\n * The workspace manager is responsible for finding source files in the workspace.\r\n * This service is shared between all languages of a language server.\r\n */\r\nexport interface WorkspaceManager {\r\n\r\n    /** The options used for the initial workspace build. */\r\n    initialBuildOptions: BuildOptions | undefined;\r\n\r\n    /**\r\n     * A promise that resolves when the workspace manager is ready to be used.\r\n     * Use this to ensure that the workspace manager has finished its initialization.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * The workspace folders of the current workspace.\r\n     * Available only after the `ready` promise resolves.\r\n     */\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: InitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Does the initial indexing of workspace folders.\r\n     * Collects information about exported and referenced AstNodes in\r\n     * each language file and stores it locally.\r\n     *\r\n     * @param folders The set of workspace folders to be indexed.\r\n     * @param cancelToken A cancellation token that can be used to cancel the operation.\r\n     *\r\n     * @throws OperationCancelled if a cancellation event has been detected\r\n     */\r\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n}\r\n\r\nexport class DefaultWorkspaceManager implements WorkspaceManager {\r\n\r\n    initialBuildOptions: BuildOptions = {};\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly documentBuilder: DocumentBuilder;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n    protected readonly mutex: WorkspaceLock;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected folders?: WorkspaceFolder[];\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.documentBuilder = services.workspace.DocumentBuilder;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n        this.mutex = services.workspace.WorkspaceLock;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined {\r\n        return this.folders;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.folders = params.workspaceFolders ?? undefined;\r\n    }\r\n\r\n    initialized(_params: InitializedParams): Promise<void> {\r\n        // Initialize the workspace even if there are no workspace folders\r\n        // We still want to load additional documents (language library or similar) during initialization\r\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\r\n    }\r\n\r\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\r\n        const documents = await this.performStartup(folders);\r\n        // Only after creating all documents do we check whether we need to cancel the initialization\r\n        // The document builder will later pick up on all unprocessed documents\r\n        await interruptAndCheck(cancelToken);\r\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Performs the uninterruptable startup sequence of the workspace manager.\r\n     * This methods loads all documents in the workspace and other documents and returns them.\r\n     */\r\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\r\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\r\n        const documents: LangiumDocument[] = [];\r\n        const collector = (document: LangiumDocument) => {\r\n            documents.push(document);\r\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\r\n                this.langiumDocuments.addDocument(document);\r\n            }\r\n        };\r\n        // Even though we don't await the initialization of the workspace manager,\r\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\r\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\r\n        await this.loadAdditionalDocuments(folders, collector);\r\n        await Promise.all(\r\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\r\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\r\n        );\r\n        this._ready.resolve();\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Load all additional documents that shall be visible in the context of the given workspace\r\n     * folders and add them to the collector. This can be used to include built-in libraries of\r\n     * your language, which can be either loaded from provided files or constructed in memory.\r\n     */\r\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Determine the root folder of the source documents in the given workspace folder.\r\n     * The default implementation returns the URI of the workspace folder, but you can override\r\n     * this to return a subfolder like `src` instead.\r\n     */\r\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\r\n        return URI.parse(workspaceFolder.uri);\r\n    }\r\n\r\n    /**\r\n     * Traverse the file system folder identified by the given URI and its subfolders. All\r\n     * contained files that match the file extensions are added to the collector.\r\n     */\r\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\r\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\r\n        await Promise.all(content.map(async entry => {\r\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\r\n                if (entry.isDirectory) {\r\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\r\n                } else if (entry.isFile) {\r\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\r\n                    collector(document);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given folder entry shall be included while indexing the workspace.\r\n     */\r\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\r\n        const name = UriUtils.basename(entry.uri);\r\n        if (name.startsWith('.')) {\r\n            return false;\r\n        }\r\n        if (entry.isDirectory) {\r\n            return name !== 'node_modules' && name !== 'out';\r\n        } else if (entry.isFile) {\r\n            const extname = UriUtils.extname(entry.uri);\r\n            return fileExtensions.includes(extname);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ILexerErrorMessageProvider, ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\r\nimport type { LexingReport, TokenBuilder } from './token-builder.js';\r\n\r\nexport class DefaultLexerErrorMessageProvider implements ILexerErrorMessageProvider {\r\n\r\n    buildUnexpectedCharactersMessage(fullText: string, startOffset: number, length: number, line?: number, column?: number): string {\r\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\r\n    }\r\n\r\n    buildUnableToPopLexerModeMessage(token: IToken): string {\r\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\r\n    }\r\n}\r\n\r\nexport interface LexerResult {\r\n    /**\r\n     * A list of all tokens that were lexed from the input.\r\n     *\r\n     * Note that Langium requires the optional properties\r\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\r\n     */\r\n    tokens: IToken[];\r\n    /**\r\n     * Contains hidden tokens, usually comments.\r\n     */\r\n    hidden: IToken[];\r\n    errors: ILexingError[];\r\n    report?: LexingReport;\r\n}\r\n\r\nexport type TokenizeMode = 'full' | 'partial';\r\n\r\nexport interface TokenizeOptions {\r\n    mode?: TokenizeMode;\r\n}\r\n\r\nexport const DEFAULT_TOKENIZE_OPTIONS: TokenizeOptions = { mode: 'full' };\r\n\r\nexport interface Lexer {\r\n    readonly definition: TokenTypeDictionary;\r\n    tokenize(text: string, options?: TokenizeOptions): LexerResult;\r\n}\r\n\r\nexport class DefaultLexer implements Lexer {\r\n\r\n    protected readonly tokenBuilder: TokenBuilder;\r\n    protected readonly errorMessageProvider: ILexerErrorMessageProvider;\r\n    protected tokenTypes: TokenTypeDictionary;\r\n    protected chevrotainLexer: ChevrotainLexer;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\r\n        this.tokenBuilder = services.parser.TokenBuilder;\r\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\r\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\r\n        });\r\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\r\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\r\n            positionTracking: 'full',\r\n            skipValidations: production,\r\n            errorMessageProvider: this.errorMessageProvider\r\n        });\r\n    }\r\n\r\n    get definition(): TokenTypeDictionary {\r\n        return this.tokenTypes;\r\n    }\r\n\r\n    tokenize(text: string, _options: TokenizeOptions = DEFAULT_TOKENIZE_OPTIONS): LexerResult {\r\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\r\n        return {\r\n            tokens: chevrotainResult.tokens,\r\n            errors: chevrotainResult.errors,\r\n            hidden: chevrotainResult.groups.hidden ?? [],\r\n            report: this.tokenBuilder.flushLexingReport?.(text)\r\n        };\r\n    }\r\n\r\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\r\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\r\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\r\n        const res: TokenTypeDictionary = {};\r\n        tokens.forEach(token => res[token.name] = token);\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenType array\r\n */\r\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\r\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\r\n */\r\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\r\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\r\n */\r\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\r\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Position, Range } from 'vscode-languageserver-types';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface JSDocComment extends JSDocValue {\r\n    readonly elements: JSDocElement[]\r\n    getTag(name: string): JSDocTag | undefined\r\n    getTags(name: string): JSDocTag[]\r\n}\r\n\r\nexport type JSDocElement = JSDocParagraph | JSDocTag;\r\n\r\nexport type JSDocInline = JSDocTag | JSDocLine;\r\n\r\nexport interface JSDocValue {\r\n    /**\r\n     * Represents the range that this JSDoc element occupies.\r\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\r\n     */\r\n    readonly range: Range\r\n    /**\r\n     * Renders this JSDoc element to a plain text representation.\r\n     */\r\n    toString(): string\r\n    /**\r\n     * Renders this JSDoc element to a markdown representation.\r\n     *\r\n     * @param options Rendering options to customize the markdown result.\r\n     */\r\n    toMarkdown(options?: JSDocRenderOptions): string\r\n}\r\n\r\nexport interface JSDocParagraph extends JSDocValue {\r\n    readonly inlines: JSDocInline[]\r\n}\r\n\r\nexport interface JSDocLine extends JSDocValue {\r\n    readonly text: string\r\n}\r\n\r\nexport interface JSDocTag extends JSDocValue {\r\n    readonly name: string\r\n    readonly content: JSDocParagraph\r\n    readonly inline: boolean\r\n}\r\n\r\nexport interface JSDocParseOptions {\r\n    /**\r\n     * The start symbol of your comment format. Defaults to `/**`.\r\n     */\r\n    readonly start?: RegExp | string\r\n    /**\r\n     * The symbol that start a line of your comment format. Defaults to `*`.\r\n     */\r\n    readonly line?: RegExp | string\r\n    /**\r\n     * The end symbol of your comment format. Defaults to `*\\/`.\r\n     */\r\n    readonly end?: RegExp | string\r\n}\r\n\r\nexport interface JSDocRenderOptions {\r\n    /**\r\n     * Determines the style for rendering tags. Defaults to `italic`.\r\n     */\r\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\r\n    /**\r\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\r\n     */\r\n    link?: 'code' | 'plain'\r\n    /**\r\n     * Custom tag rendering function.\r\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\r\n     */\r\n    renderTag?(tag: JSDocTag): string | undefined\r\n    /**\r\n     * Custom link rendering function. Accepts a link target and a display value for the link.\r\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\r\n     */\r\n    renderLink?(link: string, display: string): string | undefined\r\n}\r\n\r\n/**\r\n * Parses a JSDoc from a `CstNode` containing a comment.\r\n *\r\n * @param node A `CstNode` from a parsed Langium document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\r\n/**\r\n * Parses a JSDoc from a string comment.\r\n *\r\n * @param content A string containing the source of the JSDoc comment.\r\n * @param start The start position the comment occupies in the source document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\r\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\r\n    let opts: JSDocParseOptions | undefined;\r\n    let position: Position | undefined;\r\n    if (typeof node === 'string') {\r\n        position = start as Position | undefined;\r\n        opts = options as JSDocParseOptions | undefined;\r\n    } else {\r\n        position = node.range.start;\r\n        opts = start as JSDocParseOptions | undefined;\r\n    }\r\n    if (!position) {\r\n        position = Position.create(0, 0);\r\n    }\r\n\r\n    const lines = getLines(node);\r\n    const normalizedOptions = normalizeOptions(opts);\r\n\r\n    const tokens = tokenize({\r\n        lines,\r\n        position,\r\n        options: normalizedOptions\r\n    });\r\n\r\n    return parseJSDocComment({\r\n        index: 0,\r\n        tokens,\r\n        position\r\n    });\r\n}\r\n\r\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\r\n    const normalizedOptions = normalizeOptions(options);\r\n    const lines = getLines(node);\r\n    if (lines.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const first = lines[0];\r\n    const last = lines[lines.length - 1];\r\n    const firstRegex = normalizedOptions.start;\r\n    const lastRegex = normalizedOptions.end;\r\n\r\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\r\n}\r\n\r\nfunction getLines(node: CstNode | string): string[] {\r\n    let content = '';\r\n    if (typeof node === 'string') {\r\n        content = node;\r\n    } else {\r\n        content = node.text;\r\n    }\r\n    const lines = content.split(NEWLINE_REGEXP);\r\n    return lines;\r\n}\r\n\r\n// Tokenization\r\n\r\ninterface JSDocToken {\r\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\r\n    content: string\r\n    range: Range\r\n}\r\n\r\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\r\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\r\n\r\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n    let currentLine = context.position.line;\r\n    let currentCharacter = context.position.character;\r\n    for (let i = 0; i < context.lines.length; i++) {\r\n        const first = i === 0;\r\n        const last = i === context.lines.length - 1;\r\n        let line = context.lines[i];\r\n        let index = 0;\r\n\r\n        if (first && context.options.start) {\r\n            const match = context.options.start?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        } else {\r\n            const match = context.options.line?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        }\r\n        if (last) {\r\n            const match = context.options.end?.exec(line);\r\n            if (match) {\r\n                line = line.substring(0, match.index);\r\n            }\r\n        }\r\n\r\n        line = line.substring(0, lastCharacter(line));\r\n        const whitespaceEnd = skipWhitespace(line, index);\r\n\r\n        if (whitespaceEnd >= line.length) {\r\n            // Only create a break token when we already have previous tokens\r\n            if (tokens.length > 0) {\r\n                const position = Position.create(currentLine, currentCharacter);\r\n                tokens.push({\r\n                    type: 'break',\r\n                    content: '',\r\n                    range: Range.create(position, position)\r\n                });\r\n            }\r\n        } else {\r\n            tagRegex.lastIndex = index;\r\n            const tagMatch = tagRegex.exec(line);\r\n            if (tagMatch) {\r\n                const fullMatch = tagMatch[0];\r\n                const value = tagMatch[1];\r\n                const start = Position.create(currentLine, currentCharacter + index);\r\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\r\n                tokens.push({\r\n                    type: 'tag',\r\n                    content: value,\r\n                    range: Range.create(start, end)\r\n                });\r\n                index += fullMatch.length;\r\n                index = skipWhitespace(line, index);\r\n            }\r\n\r\n            if (index < line.length) {\r\n                const rest = line.substring(index);\r\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\r\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\r\n            }\r\n        }\r\n\r\n        currentLine++;\r\n        currentCharacter = 0;\r\n    }\r\n\r\n    // Remove last break token if there is one\r\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\r\n        return tokens.slice(0, -1);\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n\r\n    if (tags.length === 0) {\r\n        const start = Position.create(lineIndex, characterIndex);\r\n        const end = Position.create(lineIndex, characterIndex + line.length);\r\n        tokens.push({\r\n            type: 'text',\r\n            content: line,\r\n            range: Range.create(start, end)\r\n        });\r\n    } else {\r\n        let lastIndex = 0;\r\n        for (const match of tags) {\r\n            const matchIndex = match.index!;\r\n            const startContent = line.substring(lastIndex, matchIndex);\r\n            if (startContent.length > 0) {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: line.substring(lastIndex, matchIndex),\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + characterIndex),\r\n                        Position.create(lineIndex, matchIndex + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            let offset = startContent.length + 1;\r\n            const tagName = match[1];\r\n            tokens.push({\r\n                type: 'inline-tag',\r\n                content: tagName,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\r\n                )\r\n            });\r\n            offset += tagName.length;\r\n            if (match.length === 4) {\r\n                offset += match[2].length;\r\n                const value = match[3];\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: value,\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\r\n                    )\r\n                });\r\n            } else {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: '',\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            lastIndex = matchIndex + match[0].length;\r\n        }\r\n        const endContent = line.substring(lastIndex);\r\n        if (endContent.length > 0) {\r\n            tokens.push({\r\n                type: 'text',\r\n                content: endContent,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nconst nonWhitespaceRegex = /\\S/;\r\nconst whitespaceEndRegex = /\\s*$/;\r\n\r\nfunction skipWhitespace(line: string, index: number): number {\r\n    const match = line.substring(index).match(nonWhitespaceRegex);\r\n    if (match) {\r\n        return index + match.index!;\r\n    } else {\r\n        return line.length;\r\n    }\r\n}\r\n\r\nfunction lastCharacter(line: string): number | undefined {\r\n    const match = line.match(whitespaceEndRegex);\r\n    if (match && typeof match.index === 'number') {\r\n        return match.index;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Parsing\r\n\r\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\r\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\r\n    if (context.tokens.length === 0) {\r\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\r\n    }\r\n    const elements: JSDocElement[] = [];\r\n    while (context.index < context.tokens.length) {\r\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\r\n        if (element) {\r\n            elements.push(element);\r\n        }\r\n    }\r\n    const start = elements[0]?.range.start ?? startPosition;\r\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\r\n    return new JSDocCommentImpl(elements, Range.create(start, end));\r\n}\r\n\r\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\r\n    const next = context.tokens[context.index];\r\n    if (next.type === 'tag') {\r\n        return parseJSDocTag(context, false);\r\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\r\n        return parseJSDocText(context);\r\n    } else {\r\n        appendEmptyLine(next, last);\r\n        context.index++;\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\r\n    if (element) {\r\n        const line = new JSDocLineImpl('', token.range);\r\n        if ('inlines' in element) {\r\n            element.inlines.push(line);\r\n        } else {\r\n            element.content.inlines.push(line);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\r\n    let token = context.tokens[context.index];\r\n    const firstToken = token;\r\n    let lastToken = token;\r\n    const lines: JSDocInline[] = [];\r\n    while (token && token.type !== 'break' && token.type !== 'tag') {\r\n        lines.push(parseJSDocInline(context));\r\n        lastToken = token;\r\n        token = context.tokens[context.index];\r\n    }\r\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\r\n}\r\n\r\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\r\n    const token = context.tokens[context.index];\r\n    if (token.type === 'inline-tag') {\r\n        return parseJSDocTag(context, true);\r\n    } else {\r\n        return parseJSDocLine(context);\r\n    }\r\n}\r\n\r\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\r\n    const tagToken = context.tokens[context.index++];\r\n    const name = tagToken.content.substring(1);\r\n    const nextToken = context.tokens[context.index];\r\n    if (nextToken?.type === 'text') {\r\n        if (inline) {\r\n            const docLine = parseJSDocLine(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                new JSDocTextImpl([docLine], docLine.range),\r\n                inline,\r\n                Range.create(tagToken.range.start, docLine.range.end)\r\n            );\r\n        } else {\r\n            const textDoc = parseJSDocText(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                textDoc,\r\n                inline,\r\n                Range.create(tagToken.range.start, textDoc.range.end)\r\n            );\r\n        }\r\n    } else {\r\n        const range = tagToken.range;\r\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\r\n    }\r\n}\r\n\r\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\r\n    const token = context.tokens[context.index++];\r\n    return new JSDocLineImpl(token.content, token.range);\r\n}\r\n\r\ninterface NormalizedOptions {\r\n    start?: RegExp\r\n    end?: RegExp\r\n    line?: RegExp\r\n}\r\n\r\ninterface TokenizationContext {\r\n    position: Position\r\n    lines: string[]\r\n    options: NormalizedOptions\r\n}\r\n\r\ninterface ParseContext {\r\n    position: Position\r\n    tokens: JSDocToken[]\r\n    index: number\r\n}\r\n\r\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\r\n    if (!options) {\r\n        return normalizeOptions({\r\n            start: '/**',\r\n            end: '*/',\r\n            line: '*'\r\n        });\r\n    }\r\n    const { start, end, line } = options;\r\n    return {\r\n        start: normalizeOption(start, true),\r\n        end: normalizeOption(end, false),\r\n        line: normalizeOption(line, true)\r\n    };\r\n}\r\n\r\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\r\n    if (typeof option === 'string' || typeof option === 'object') {\r\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\r\n        if (start) {\r\n            return new RegExp(`^\\\\s*${escaped}`);\r\n        } else {\r\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\r\n        }\r\n    } else {\r\n        return option;\r\n    }\r\n}\r\n\r\nclass JSDocCommentImpl implements JSDocComment {\r\n\r\n    readonly elements: JSDocElement[];\r\n    readonly range: Range;\r\n\r\n    constructor(elements: JSDocElement[], range: Range) {\r\n        this.elements = elements;\r\n        this.range = range;\r\n    }\r\n\r\n    getTag(name: string): JSDocTag | undefined {\r\n        return this.getAllTags().find(e => e.name === name);\r\n    }\r\n\r\n    getTags(name: string): JSDocTag[] {\r\n        return this.getAllTags().filter(e => e.name === name);\r\n    }\r\n\r\n    private getAllTags(): JSDocTag[] {\r\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\r\n    }\r\n\r\n    toString(): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toString();\r\n            } else {\r\n                const text = element.toString();\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toMarkdown(options);\r\n            } else {\r\n                const text = element.toMarkdown(options);\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n}\r\n\r\nclass JSDocTagImpl implements JSDocTag {\r\n    name: string;\r\n    content: JSDocParagraph;\r\n    range: Range;\r\n    inline: boolean;\r\n\r\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\r\n        this.name = name;\r\n        this.content = content;\r\n        this.inline = inline;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = `@${this.name}`;\r\n        const content = this.content.toString();\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\r\n    }\r\n\r\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\r\n        const content = this.content.toMarkdown(options);\r\n        if (this.inline) {\r\n            const rendered = renderInlineTag(this.name, content, options ?? {});\r\n            if (typeof rendered === 'string') {\r\n                return rendered;\r\n            }\r\n        }\r\n        let marker = '';\r\n        if (options?.tag === 'italic' || options?.tag === undefined) {\r\n            marker = '*';\r\n        } else if (options?.tag === 'bold') {\r\n            marker = '**';\r\n        } else if (options?.tag === 'bold-italic') {\r\n            marker = '***';\r\n        }\r\n        let text = `${marker}@${this.name}${marker}`;\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} — ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\r\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\r\n        const index = content.indexOf(' ');\r\n        let display = content;\r\n        if (index > 0) {\r\n            const displayStart = skipWhitespace(content, index);\r\n            display = content.substring(displayStart);\r\n            content = content.substring(0, index);\r\n        }\r\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\r\n            // Surround the display value in a markdown inline code block\r\n            display = `\\`${display}\\``;\r\n        }\r\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\r\n        return renderedLink;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction renderLinkDefault(content: string, display: string): string {\r\n    try {\r\n        URI.parse(content, true);\r\n        return `[${display}](${content})`;\r\n    } catch {\r\n        return content;\r\n    }\r\n}\r\n\r\nclass JSDocTextImpl implements JSDocParagraph {\r\n    inlines: JSDocInline[];\r\n    range: Range;\r\n\r\n    constructor(lines: JSDocInline[], range: Range) {\r\n        this.inlines = lines;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toString();\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toMarkdown(options);\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nclass JSDocLineImpl implements JSDocLine {\r\n    text: string;\r\n    range: Range;\r\n\r\n    constructor(text: string, range: Range) {\r\n        this.text = text;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n    toMarkdown(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\nfunction fillNewlines(text: string): string {\r\n    if (text.endsWith('\\n')) {\r\n        return '\\n';\r\n    } else {\r\n        return '\\n\\n';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { CommentProvider } from './comment-provider.js';\r\nimport type { JSDocTag } from './jsdoc.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\r\n\r\n/**\r\n * Provides documentation for AST nodes.\r\n */\r\nexport interface DocumentationProvider {\r\n    /**\r\n     * Returns a markdown documentation string for the specified AST node.\r\n     *\r\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\r\n     */\r\n    getDocumentation(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class JSDocDocumentationProvider implements DocumentationProvider {\r\n\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    getDocumentation(node: AstNode): string | undefined {\r\n        const comment = this.commentProvider.getComment(node);\r\n        if (comment && isJSDoc(comment)) {\r\n            const parsedJSDoc = parseJSDoc(comment);\r\n            return parsedJSDoc.toMarkdown({\r\n                renderLink: (link, display) => {\r\n                    return this.documentationLinkRenderer(node, link, display);\r\n                },\r\n                renderTag: (tag) => {\r\n                    return this.documentationTagRenderer(node, tag);\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\r\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\r\n        if (description && description.nameSegment) {\r\n            const line = description.nameSegment.range.start.line + 1;\r\n            const character = description.nameSegment.range.start.character + 1;\r\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\r\n            return `[${display}](${uri.toString()})`;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\r\n        // Fall back to the default tag rendering\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const document = getDocument(node);\r\n        const precomputed = document.precomputedScopes;\r\n        if (!precomputed) {\r\n            return undefined;\r\n        }\r\n        let currentNode: AstNode | undefined = node;\r\n        do {\r\n            const allDescriptions = precomputed.get(currentNode);\r\n            const description = allDescriptions.find(e => e.name === name);\r\n            if (description) {\r\n                return description;\r\n            }\r\n            currentNode = currentNode.$container;\r\n        } while (currentNode);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const description = this.indexManager.allElements().find(e => e.name === name);\r\n        return description;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\r\nimport type { Hydrator } from '../serializer/hydrator.js';\r\nimport type { Event } from '../utils/event.js';\r\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\r\nimport { Emitter } from '../utils/event.js';\r\n\r\n/**\r\n * Async parser that allows cancellation of the current parsing process.\r\n *\r\n * @remarks\r\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\r\n * The default implementation is not actually async. It just wraps the sync parser in a promise. A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport interface AsyncParser {\r\n    /**\r\n     * Parses the given text and returns the parse result.\r\n     *\r\n     * @param text The text to parse.\r\n     * @param cancelToken A cancellation token that can be used to cancel the parsing process.\r\n     * @returns A promise that resolves to the parse result.\r\n     *\r\n     * @throws `OperationCancelled` if the parsing process is cancelled.\r\n     */\r\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\r\n}\r\n\r\n/**\r\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\r\n *\r\n * @remarks\r\n * A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport class DefaultAsyncParser implements AsyncParser {\r\n\r\n    protected readonly syncParser: LangiumParser;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.syncParser = services.parser.LangiumParser;\r\n    }\r\n\r\n    parse<T extends AstNode>(text: string, _cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        return Promise.resolve(this.syncParser.parse<T>(text));\r\n    }\r\n}\r\n\r\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\r\n\r\n    /**\r\n     * The thread count determines how many threads are used to parse files in parallel.\r\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\r\n     */\r\n    protected threadCount = 8;\r\n    /**\r\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\r\n     * The default value is 200(ms).\r\n     */\r\n    protected terminationDelay = 200;\r\n    protected workerPool: ParserWorker[] = [];\r\n    protected queue: Array<Deferred<ParserWorker>> = [];\r\n\r\n    protected readonly hydrator: Hydrator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.hydrator = services.serializer.Hydrator;\r\n    }\r\n\r\n    protected initializeWorkers(): void {\r\n        while (this.workerPool.length < this.threadCount) {\r\n            const worker = this.createWorker();\r\n            worker.onReady(() => {\r\n                if (this.queue.length > 0) {\r\n                    const deferred = this.queue.shift();\r\n                    if (deferred) {\r\n                        worker.lock();\r\n                        deferred.resolve(worker);\r\n                    }\r\n                }\r\n            });\r\n            this.workerPool.push(worker);\r\n        }\r\n    }\r\n\r\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const worker = await this.acquireParserWorker(cancelToken);\r\n        const deferred = new Deferred<ParseResult<T>>();\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\r\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\r\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\r\n        const cancellation = cancelToken.onCancellationRequested(() => {\r\n            timeout = setTimeout(() => {\r\n                this.terminateWorker(worker);\r\n            }, this.terminationDelay);\r\n        });\r\n        worker.parse(text).then(result => {\r\n            const hydrated = this.hydrator.hydrate<T>(result);\r\n            deferred.resolve(hydrated);\r\n        }).catch(err => {\r\n            deferred.reject(err);\r\n        }).finally(() => {\r\n            cancellation.dispose();\r\n            clearTimeout(timeout);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected terminateWorker(worker: ParserWorker): void {\r\n        worker.terminate();\r\n        const index = this.workerPool.indexOf(worker);\r\n        if (index >= 0) {\r\n            this.workerPool.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\r\n        this.initializeWorkers();\r\n        for (const worker of this.workerPool) {\r\n            if (worker.ready) {\r\n                worker.lock();\r\n                return worker;\r\n            }\r\n        }\r\n        const deferred = new Deferred<ParserWorker>();\r\n        cancelToken.onCancellationRequested(() => {\r\n            const index = this.queue.indexOf(deferred);\r\n            if (index >= 0) {\r\n                this.queue.splice(index, 1);\r\n            }\r\n            deferred.reject(OperationCancelled);\r\n        });\r\n        this.queue.push(deferred);\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected abstract createWorker(): ParserWorker;\r\n}\r\n\r\nexport type WorkerMessagePost = (message: unknown) => void;\r\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\r\n\r\nexport class ParserWorker {\r\n\r\n    protected readonly sendMessage: WorkerMessagePost;\r\n    protected readonly _terminate: () => void;\r\n    protected readonly onReadyEmitter = new Emitter<void>();\r\n\r\n    protected deferred = new Deferred<ParseResult>();\r\n    protected _ready = true;\r\n    protected _parsing = false;\r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n\r\n    get onReady(): Event<void> {\r\n        return this.onReadyEmitter.event;\r\n    }\r\n\r\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\r\n        this.sendMessage = sendMessage;\r\n        this._terminate = terminate;\r\n        onMessage(result => {\r\n            const parseResult = result as ParseResult;\r\n            this.deferred.resolve(parseResult);\r\n            this.unlock();\r\n        });\r\n        onError(error => {\r\n            this.deferred.reject(error);\r\n            this.unlock();\r\n        });\r\n    }\r\n\r\n    terminate(): void {\r\n        this.deferred.reject(OperationCancelled);\r\n        this._terminate();\r\n    }\r\n\r\n    lock(): void {\r\n        this._ready = false;\r\n    }\r\n\r\n    unlock(): void {\r\n        this._parsing = false;\r\n        this._ready = true;\r\n        this.onReadyEmitter.fire();\r\n    }\r\n\r\n    parse(text: string): Promise<ParseResult> {\r\n        if (this._parsing) {\r\n            throw new Error('Parser worker is busy');\r\n        }\r\n        this._parsing = true;\r\n        this.deferred = new Deferred();\r\n        this.sendMessage(text);\r\n        return this.deferred.promise;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { type AbstractCancellationTokenSource, CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\r\nimport { Deferred, isOperationCancelled, startCancelableOperation, type MaybePromise } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Utility service to execute mutually exclusive actions.\r\n */\r\nexport interface WorkspaceLock {\r\n    /**\r\n     * Performs a single async action, like initializing the workspace or processing document changes.\r\n     * Only one action will be executed at a time.\r\n     *\r\n     * When another action is queued up, the token provided for the action will be cancelled.\r\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\r\n     */\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\r\n\r\n    /**\r\n     * Performs a single action, like computing completion results or providing workspace symbols.\r\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\r\n     *\r\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\r\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\r\n     *\r\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\r\n     */\r\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\r\n\r\n    /**\r\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\r\n     */\r\n    cancelWrite(): void;\r\n}\r\n\r\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\r\n\r\ninterface LockEntry {\r\n    action: LockAction<unknown>;\r\n    deferred: Deferred<unknown>;\r\n    cancellationToken: CancellationToken;\r\n}\r\n\r\nexport class DefaultWorkspaceLock implements WorkspaceLock {\r\n\r\n    private previousTokenSource: AbstractCancellationTokenSource = new CancellationTokenSource();\r\n    private writeQueue: LockEntry[] = [];\r\n    private readQueue: LockEntry[] = [];\r\n    private done = true;\r\n\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\r\n        this.cancelWrite();\r\n        const tokenSource = startCancelableOperation();\r\n        this.previousTokenSource = tokenSource;\r\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\r\n    }\r\n\r\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\r\n        return this.enqueue(this.readQueue, action);\r\n    }\r\n\r\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken = CancellationToken.None): Promise<T> {\r\n        const deferred = new Deferred<unknown>();\r\n        const entry: LockEntry = {\r\n            action,\r\n            deferred,\r\n            cancellationToken\r\n        };\r\n        queue.push(entry);\r\n        this.performNextOperation();\r\n        return deferred.promise as Promise<T>;\r\n    }\r\n\r\n    private async performNextOperation(): Promise<void> {\r\n        if (!this.done) {\r\n            return;\r\n        }\r\n        const entries: LockEntry[] = [];\r\n        if (this.writeQueue.length > 0) {\r\n            // Just perform the next write action\r\n            entries.push(this.writeQueue.shift()!);\r\n        } else if (this.readQueue.length > 0) {\r\n            // Empty the read queue and perform all actions in parallel\r\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\r\n        } else {\r\n            return;\r\n        }\r\n        this.done = false;\r\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\r\n            try {\r\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\r\n                const result = await Promise.resolve().then(() => action(cancellationToken));\r\n                deferred.resolve(result);\r\n            } catch (err) {\r\n                if (isOperationCancelled(err)) {\r\n                    // If the operation was cancelled, we don't want to reject the promise\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            }\r\n        }));\r\n        this.done = true;\r\n        this.performNextOperation();\r\n    }\r\n\r\n    cancelWrite(): void {\r\n        this.previousTokenSource.cancel();\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2024 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\r\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { Lexer } from '../parser/lexer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\r\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { BiMap } from '../utils/collections.js';\r\nimport { streamCst } from '../utils/cst-utils.js';\r\nimport type { LexingReport } from '../parser/token-builder.js';\r\n\r\n/**\r\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\r\n */\r\nexport interface Hydrator {\r\n    /**\r\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\r\n     */\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\r\n    /**\r\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\r\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\r\n     */\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\r\n}\r\n\r\nexport interface DehydrateContext {\r\n    astNodes: Map<AstNode, any>;\r\n    cstNodes: Map<CstNode, any>;\r\n}\r\n\r\nexport interface HydrateContext {\r\n    astNodes: Map<any, AstNode>;\r\n    cstNodes: Map<any, CstNode>;\r\n}\r\n\r\nexport class DefaultHydrator implements Hydrator {\r\n\r\n    protected readonly grammar: Grammar;\r\n    protected readonly lexer: Lexer;\r\n    protected readonly linker: Linker;\r\n\r\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\r\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammar = services.Grammar;\r\n        this.lexer = services.parser.Lexer;\r\n        this.linker = services.references.Linker;\r\n    }\r\n\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\r\n            // We need to create shallow copies of the errors\r\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\r\n            parserErrors: result.parserErrors.map(e => ({ ...e, message: e.message })),\r\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\r\n        };\r\n    }\r\n\r\n    protected dehydrateLexerReport(lexerReport: LexingReport): LexingReport {\r\n        // By default, lexer reports are serializable\r\n        return lexerReport;\r\n    }\r\n\r\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\r\n        const astNodes = new Map<AstNode, any>();\r\n        const cstNodes = new Map<CstNode, any>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {});\r\n        }\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                cstNodes.set(cstNode, {});\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\r\n        const obj = context.astNodes.get(node) as Record<string, any>;\r\n        obj.$type = node.$type;\r\n        obj.$containerIndex = node.$containerIndex;\r\n        obj.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode !== undefined) {\r\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: any[] = [];\r\n                obj[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.dehydrateAstNode(item, context));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.dehydrateReference(item, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                obj[name] = this.dehydrateAstNode(value, context);\r\n            } else if (isReference(value)) {\r\n                obj[name] = this.dehydrateReference(value, context);\r\n            } else if (value !== undefined) {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\r\n        const obj: Record<string, unknown> = {};\r\n        obj.$refText = reference.$refText;\r\n        if (reference.$refNode) {\r\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\r\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\r\n        if (isRootCstNode(node)) {\r\n            cstNode.fullText = node.fullText;\r\n        } else {\r\n            // Note: This returns undefined for hidden nodes (i.e. comments)\r\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\r\n        }\r\n        cstNode.hidden = node.hidden;\r\n        cstNode.astNode = context.astNodes.get(node.astNode);\r\n        if (isCompositeCstNode(node)) {\r\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\r\n        } else if (isLeafCstNode(node)) {\r\n            cstNode.tokenType = node.tokenType.name;\r\n            cstNode.offset = node.offset;\r\n            cstNode.length = node.length;\r\n            cstNode.startLine = node.range.start.line;\r\n            cstNode.startColumn = node.range.start.character;\r\n            cstNode.endLine = node.range.end.line;\r\n            cstNode.endColumn = node.range.end.character;\r\n        }\r\n        return cstNode;\r\n    }\r\n\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\r\n        const node = result.value;\r\n        const context = this.createHydrationContext(node);\r\n        if ('$cstNode' in node) {\r\n            this.hydrateCstNode(node.$cstNode, context);\r\n        }\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport,\r\n            parserErrors: result.parserErrors,\r\n            value: this.hydrateAstNode(node, context) as T\r\n        };\r\n    }\r\n\r\n    protected createHydrationContext(node: any): HydrateContext {\r\n        const astNodes = new Map<any, AstNode>();\r\n        const cstNodes = new Map<any, CstNode>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {} as AstNode);\r\n        }\r\n        let root: RootCstNode;\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                let cst: Mutable<CstNode> | undefined;\r\n                if ('fullText' in cstNode) {\r\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\r\n                    root = cst as RootCstNode;\r\n                } else if ('content' in cstNode) {\r\n                    cst = new CompositeCstNodeImpl();\r\n                } else if ('tokenType' in cstNode) {\r\n                    cst = this.hydrateCstLeafNode(cstNode);\r\n                }\r\n                if (cst) {\r\n                    cstNodes.set(cstNode, cst);\r\n                    cst.root = root!;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\r\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\r\n        astNode.$type = node.$type;\r\n        astNode.$containerIndex = node.$containerIndex;\r\n        astNode.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode) {\r\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: unknown[] = [];\r\n                astNode[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.hydrateReference(item, astNode, name, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\r\n            } else if (isReference(value)) {\r\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\r\n            } else if (value !== undefined) {\r\n                astNode[name] = value;\r\n            }\r\n        }\r\n        return astNode;\r\n    }\r\n\r\n    protected setParent(node: any, parent: any): any {\r\n        node.$container = parent as AstNode;\r\n        return node;\r\n    }\r\n\r\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\r\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\r\n    }\r\n\r\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\r\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\r\n        if (typeof cstNode.grammarSource === 'number') {\r\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\r\n        }\r\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\r\n        if (isCompositeCstNode(cstNodeObj)) {\r\n            for (const child of cstNode.content) {\r\n                const hydrated = this.hydrateCstNode(child, context, num++);\r\n                cstNodeObj.content.push(hydrated);\r\n            }\r\n        }\r\n        return cstNodeObj;\r\n    }\r\n\r\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\r\n        const tokenType = this.getTokenType(cstNode.tokenType);\r\n        const offset = cstNode.offset;\r\n        const length = cstNode.length;\r\n        const startLine = cstNode.startLine;\r\n        const startColumn = cstNode.startColumn;\r\n        const endLine = cstNode.endLine;\r\n        const endColumn = cstNode.endColumn;\r\n        const hidden = cstNode.hidden;\r\n        const node = new LeafCstNodeImpl(\r\n            offset,\r\n            length,\r\n            {\r\n                start: {\r\n                    line: startLine,\r\n                    character: startColumn\r\n                },\r\n                end: {\r\n                    line: endLine,\r\n                    character: endColumn\r\n                }\r\n            },\r\n            tokenType,\r\n            hidden\r\n        );\r\n        return node;\r\n    }\r\n\r\n    protected getTokenType(name: string): TokenType {\r\n        return this.lexer.definition[name];\r\n    }\r\n\r\n    protected getGrammarElementId(node: AbstractElement | undefined): number | undefined {\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        return this.grammarElementIdMap.get(node);\r\n    }\r\n\r\n    protected getGrammarElement(id: number): AbstractElement | undefined {\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        const element = this.grammarElementIdMap.getKey(id);\r\n        return element;\r\n    }\r\n\r\n    protected createGrammarElementIdMap(): void {\r\n        let id = 0;\r\n        for (const element of streamAst(this.grammar)) {\r\n            if (isAbstractElement(element)) {\r\n                this.grammarElementIdMap.set(element, id++);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\r\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { isMultilineComment } from '../utils/regexp-utils.js';\r\nimport { isTerminalRule } from './generated/ast.js';\r\n\r\nexport interface GrammarConfig {\r\n    /**\r\n     * Lists all rule names which are classified as multiline comment rules\r\n     */\r\n    multilineCommentRules: string[]\r\n    /**\r\n     * A regular expression which matches characters of names\r\n     */\r\n    nameRegexp: RegExp\r\n}\r\n\r\n/**\r\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\r\n * language-specific module.\r\n */\r\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\r\n    const rules: string[] = [];\r\n    const grammar = services.Grammar;\r\n    for (const rule of grammar.rules) {\r\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\r\n            rules.push(rule.name);\r\n        }\r\n    }\r\n    return {\r\n        multilineCommentRules: rules,\r\n        nameRegexp: DefaultNameRegexp\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumCompletionParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumCompletionParser(services);\r\n    createParser(grammar, parser, lexer.definition);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport type { URI } from './utils/uri-utils.js';\r\nimport type { AbstractElement } from './languages/generated/ast.js';\r\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\r\n\r\n/**\r\n * A node in the Abstract Syntax Tree (AST).\r\n */\r\nexport interface AstNode {\r\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\r\n    readonly $type: string;\r\n    /** The container node in the AST; every node except the root node has a container. */\r\n    readonly $container?: AstNode;\r\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\r\n    readonly $containerProperty?: string;\r\n    /** In case `$containerProperty` is an array, the array index is stored here. */\r\n    readonly $containerIndex?: number;\r\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\r\n    readonly $cstNode?: CstNode;\r\n    /** The document containing the AST; only the root node has a direct reference to the document. */\r\n    readonly $document?: LangiumDocument;\r\n}\r\n\r\nexport function isAstNode(obj: unknown): obj is AstNode {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\r\n}\r\n\r\nexport interface GenericAstNode extends AstNode {\r\n    [key: string]: unknown\r\n}\r\n\r\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\r\n\r\n/**\r\n * The property names of a given AST node type.\r\n */\r\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\r\n\r\n/**\r\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\r\n */\r\nexport interface Reference<T extends AstNode = AstNode> {\r\n    /**\r\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\r\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\r\n     * the value is `undefined`.\r\n     */\r\n    readonly ref?: T;\r\n\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    readonly error?: LinkingError;\r\n    /** The CST node from which the reference was parsed */\r\n    readonly $refNode?: CstNode;\r\n    /** The actual text used to look up in the surrounding scope */\r\n    readonly $refText: string;\r\n    /** The node description for the AstNode returned by `ref`  */\r\n    readonly $nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isReference(obj: unknown): obj is Reference {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n}\r\n\r\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\r\n    readonly ref: T;\r\n}\r\n\r\n/**\r\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\r\n */\r\nexport interface AstNodeDescription {\r\n    /** The target node; should be present only for local references (linking to the same document). */\r\n    node?: AstNode;\r\n    /**\r\n     * The document segment that represents the range of the name of the AST node.\r\n     */\r\n    nameSegment?: DocumentSegment;\r\n    /**\r\n     * The document segment that represents the full range of the AST node.\r\n     */\r\n    selectionSegment?: DocumentSegment;\r\n    /** `$type` property value of the AST node */\r\n    type: string;\r\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\r\n    name: string;\r\n    /** URI to the document containing the AST node */\r\n    documentUri: URI;\r\n    /** Navigation path inside the document */\r\n    path: string;\r\n}\r\n\r\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\r\n    return typeof obj === 'object' && obj !== null\r\n        && typeof (obj as AstNodeDescription).name === 'string'\r\n        && typeof (obj as AstNodeDescription).type === 'string'\r\n        && typeof (obj as AstNodeDescription).path === 'string';\r\n}\r\n\r\n/**\r\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\r\n * unresolved references.\r\n */\r\nexport interface ReferenceInfo {\r\n    reference: Reference\r\n    container: AstNode\r\n    property: string\r\n    index?: number\r\n}\r\n\r\n/**\r\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\r\n */\r\nexport interface LinkingError extends ReferenceInfo {\r\n    message: string;\r\n    targetDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isLinkingError(obj: unknown): obj is LinkingError {\r\n    return typeof obj === 'object' && obj !== null\r\n        && isAstNode((obj as LinkingError).container)\r\n        && isReference((obj as LinkingError).reference)\r\n        && typeof (obj as LinkingError).message === 'string';\r\n}\r\n\r\n/**\r\n * Service used for generic access to the structure of the AST. This service is shared between\r\n * all involved languages, so it operates on the superset of types of these languages.\r\n */\r\nexport interface AstReflection {\r\n    getAllTypes(): string[]\r\n    getAllSubTypes(type: string): string[]\r\n    getReferenceType(refInfo: ReferenceInfo): string\r\n    getTypeMetaData(type: string): TypeMetaData\r\n    isInstance(node: unknown, type: string): boolean\r\n    isSubtype(subtype: string, supertype: string): boolean\r\n}\r\n\r\n/**\r\n * An abstract implementation of the {@link AstReflection} interface.\r\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\r\n */\r\nexport abstract class AbstractAstReflection implements AstReflection {\r\n\r\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\r\n    protected allSubtypes: Record<string, string[] | undefined> = {};\r\n\r\n    abstract getAllTypes(): string[];\r\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\r\n    abstract getTypeMetaData(type: string): TypeMetaData;\r\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\r\n\r\n    isInstance(node: unknown, type: string): boolean {\r\n        return isAstNode(node) && this.isSubtype(node.$type, type);\r\n    }\r\n\r\n    isSubtype(subtype: string, supertype: string): boolean {\r\n        if (subtype === supertype) {\r\n            return true;\r\n        }\r\n        let nested = this.subtypes[subtype];\r\n        if (!nested) {\r\n            nested = this.subtypes[subtype] = {};\r\n        }\r\n        const existing = nested[supertype];\r\n        if (existing !== undefined) {\r\n            return existing;\r\n        } else {\r\n            const result = this.computeIsSubtype(subtype, supertype);\r\n            nested[supertype] = result;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    getAllSubTypes(type: string): string[] {\r\n        const existing = this.allSubtypes[type];\r\n        if (existing) {\r\n            return existing;\r\n        } else {\r\n            const allTypes = this.getAllTypes();\r\n            const types: string[] = [];\r\n            for (const possibleSubType of allTypes) {\r\n                if (this.isSubtype(possibleSubType, type)) {\r\n                    types.push(possibleSubType);\r\n                }\r\n            }\r\n            this.allSubtypes[type] = types;\r\n            return types;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents runtime meta data about a meta model type.\r\n */\r\nexport interface TypeMetaData {\r\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\r\n    name: string\r\n    /** A list of properties. They can contain default values for their respective property in the AST. */\r\n    properties: TypeProperty[]\r\n}\r\n\r\n/**\r\n * Describes the meta data of a property of an AST node.\r\n *\r\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\r\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\r\n */\r\nexport interface TypeProperty {\r\n    name: string\r\n    defaultValue?: PropertyType\r\n}\r\n\r\n/**\r\n * Represents a default value for an AST property.\r\n */\r\nexport type PropertyType = number | string | boolean | PropertyType[];\r\n\r\n/**\r\n * A node in the Concrete Syntax Tree (CST).\r\n */\r\nexport interface CstNode extends DocumentSegment {\r\n    /** The container node in the CST */\r\n    readonly container?: CompositeCstNode;\r\n    /** @deprecated use `container` instead. */\r\n    readonly parent?: CompositeCstNode;\r\n    /** The actual text */\r\n    readonly text: string;\r\n    /** The root CST node */\r\n    readonly root: RootCstNode;\r\n    /** The grammar element from which this node was parsed */\r\n    readonly grammarSource?: AbstractElement;\r\n    /** @deprecated use `grammarSource` instead. */\r\n    readonly feature?: AbstractElement;\r\n    /** The AST node created from this CST node */\r\n    readonly astNode: AstNode;\r\n    /** @deprecated use `astNode` instead. */\r\n    readonly element: AstNode;\r\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\r\n    readonly hidden: boolean;\r\n}\r\n\r\n/**\r\n * A composite CST node contains other nodes, but no directly associated token.\r\n */\r\nexport interface CompositeCstNode extends CstNode {\r\n    readonly content: CstNode[];\r\n    /** @deprecated use `content` instead. */\r\n    readonly children: CstNode[];\r\n}\r\n\r\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\r\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\r\n}\r\n\r\n/**\r\n * A leaf CST node corresponds to a token in the input token stream.\r\n */\r\nexport interface LeafCstNode extends CstNode {\r\n    readonly tokenType: TokenType;\r\n}\r\n\r\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\r\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\r\n}\r\n\r\nexport interface RootCstNode extends CompositeCstNode {\r\n    readonly fullText: string\r\n}\r\n\r\nexport function isRootCstNode(node: unknown): node is RootCstNode {\r\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\r\n}\r\n\r\n/**\r\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\r\n */\r\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\r\n\r\n/**\r\n * Returns the property names (!) of an AstNode that are cross-references.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\r\n */\r\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\r\n    ExtractKeysOfValueType<N, Reference|undefined>\r\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) & {};\r\n\r\n/**\r\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\r\n */\r\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\r\n\r\n/**\r\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\r\n */\r\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\r\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\r\n}[keyof A];\r\n\r\nexport type Mutable<T> = {\r\n    -readonly [P in keyof T]: T[P]\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\r\nimport type { Module } from '../dependency-injection.js';\r\nimport { inject } from '../dependency-injection.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\r\nimport type { Mutable } from '../syntax-tree.js';\r\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\r\nimport { URI } from './uri-utils.js';\r\n\r\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\r\n    Grammar: () => undefined as unknown as ast.Grammar,\r\n    LanguageMetaData: () => ({\r\n        caseInsensitive: false,\r\n        fileExtensions: ['.langium'],\r\n        languageId: 'langium'\r\n    })\r\n};\r\n\r\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\r\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\r\n};\r\n\r\nfunction createMinimalGrammarServices(): LangiumCoreServices {\r\n    const shared = inject(\r\n        createDefaultSharedCoreModule(EmptyFileSystem),\r\n        minimalSharedGrammarModule\r\n    );\r\n    const grammar = inject(\r\n        createDefaultCoreModule({ shared }),\r\n        minimalGrammarModule\r\n    );\r\n    shared.ServiceRegistry.register(grammar);\r\n    return grammar;\r\n}\r\n\r\n/**\r\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\r\n * most notably the parser builder which interprets the grammar to create a parser.\r\n */\r\nexport function loadGrammarFromJson(json: string): ast.Grammar {\r\n    const services = createMinimalGrammarServices();\r\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\r\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\r\n    return astNode;\r\n}\r\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar ClassDefStatement = \"ClassDefStatement\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Item = \"Item\";\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar Treemap = \"Treemap\";\nfunction isTreemap(item) {\n  return reflection.isInstance(item, Treemap);\n}\n__name(isTreemap, \"isTreemap\");\nvar TreemapRow = \"TreemapRow\";\nvar Direction = \"Direction\";\nvar Leaf = \"Leaf\";\nvar Section = \"Section\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, ClassDefStatement, Commit, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Item, Junction, Leaf, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Section, Service, Statement, Treemap, TreemapRow];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      case Leaf:\n      case Section: {\n        return this.isSubtype(Item, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case ClassDefStatement: {\n        return {\n          name: ClassDefStatement,\n          properties: [\n            { name: \"className\" },\n            { name: \"styleText\" }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Item: {\n        return {\n          name: Item,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"bits\" },\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Treemap: {\n        return {\n          name: Treemap,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" },\n            { name: \"TreemapRows\", defaultValue: [] }\n          ]\n        };\n      }\n      case TreemapRow: {\n        return {\n          name: TreemapRow,\n          properties: [\n            { name: \"indent\" },\n            { name: \"item\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Leaf: {\n        return {\n          name: Leaf,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Section: {\n        return {\n          name: Section,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"bits\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]}]},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"REFERENCE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@2\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@2\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\nvar loadedTreemapGrammar;\nvar TreemapGrammar = /* @__PURE__ */ __name(() => loadedTreemapGrammar ?? (loadedTreemapGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Treemap\",\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Treemap\",\"returnType\":{\"$ref\":\"#/interfaces@4\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"TreemapRows\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"TREEMAP_KEYWORD\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap-beta\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"CLASS_DEF\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/classDef\\\\\\\\s+([a-zA-Z_][a-zA-Z0-9_]+)(?:\\\\\\\\s+([^;\\\\\\\\r\\\\\\\\n]*))?(?:;)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STYLE_SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":::\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"COMMA\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\",\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WS\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"ML_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\%\\\\\\\\%[^\\\\\\\\n]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"NL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"TreemapRow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"indent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"item\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"ClassDef\",\"dataType\":\"string\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Item\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Section\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Leaf\",\"returnType\":{\"$ref\":\"#/interfaces@2\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INDENTATION\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]{1,}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[a-zA-Z_][a-zA-Z0-9_]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9_\\\\\\\\.\\\\\\\\,]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"MyNumber\",\"dataType\":\"number\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Item\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"name\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"classSelector\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Section\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[]},{\"$type\":\"Interface\",\"name\":\"Leaf\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}]},{\"$type\":\"Interface\",\"name\":\"ClassDefStatement\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"className\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"styleText\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Treemap\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"TreemapRows\",\"type\":{\"$type\":\"ArrayType\",\"elementType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@14\"}}},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[],\"$comment\":\"/**\\\\n * Treemap grammar for Langium\\\\n * Converted from mindmap grammar\\\\n *\\\\n * The ML_COMMENT and NL hidden terminals handle whitespace, comments, and newlines\\\\n * before the treemap keyword, allowing for empty lines and comments before the\\\\n * treemap declaration.\\\\n */\"}`)), \"TreemapGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar TreemapLanguageMetaData = {\n  languageId: \"treemap\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar TreemapGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => TreemapGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => TreemapLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  Treemap,\n  isTreemap,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  TreemapGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\r\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\r\n\r\n/**\r\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\r\n */\r\nexport interface ValueConverter {\r\n    /**\r\n     * Converts a string value from the source text format into a value to be held in the AST.\r\n     */\r\n    convert(input: string, cstNode: CstNode): ValueType;\r\n}\r\n\r\nexport type ValueType = string | number | boolean | bigint | Date;\r\n\r\nexport class DefaultValueConverter implements ValueConverter {\r\n\r\n    convert(input: string, cstNode: CstNode): ValueType {\r\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\r\n        if (isCrossReference(feature)) {\r\n            feature = getCrossReferenceTerminal(feature);\r\n        }\r\n        if (isRuleCall(feature)) {\r\n            const rule = feature.rule.ref;\r\n            if (!rule) {\r\n                throw new Error('This cst node was not parsed by a rule.');\r\n            }\r\n            return this.runConverter(rule, input, cstNode);\r\n        }\r\n        return input;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\r\n        switch (rule.name.toUpperCase()) {\r\n            case 'INT': return ValueConverter.convertInt(input);\r\n            case 'STRING': return ValueConverter.convertString(input);\r\n            case 'ID': return ValueConverter.convertID(input);\r\n        }\r\n        switch (getRuleType(rule)?.toLowerCase()) {\r\n            case 'number': return ValueConverter.convertNumber(input);\r\n            case 'boolean': return ValueConverter.convertBoolean(input);\r\n            case 'bigint': return ValueConverter.convertBigint(input);\r\n            case 'date': return ValueConverter.convertDate(input);\r\n            default: return input;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ValueConverter {\r\n\r\n    export function convertString(input: string): string {\r\n        let result = '';\r\n        for (let i = 1; i < input.length - 1; i++) {\r\n            const c = input.charAt(i);\r\n            if (c === '\\\\') {\r\n                const c1 = input.charAt(++i);\r\n                result += convertEscapeCharacter(c1);\r\n            } else {\r\n                result += c;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertEscapeCharacter(char: string): string {\r\n        switch (char) {\r\n            case 'b': return '\\b';\r\n            case 'f': return '\\f';\r\n            case 'n': return '\\n';\r\n            case 'r': return '\\r';\r\n            case 't': return '\\t';\r\n            case 'v': return '\\v';\r\n            case '0': return '\\0';\r\n            default: return char;\r\n        }\r\n    }\r\n\r\n    export function convertID(input: string): string {\r\n        if (input.charAt(0) === '^') {\r\n            return input.substring(1);\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n\r\n    export function convertInt(input: string): number {\r\n        return parseInt(input);\r\n    }\r\n\r\n    export function convertBigint(input: string): bigint {\r\n        return BigInt(input);\r\n    }\r\n\r\n    export function convertDate(input: string): Date {\r\n        return new Date(input);\r\n    }\r\n\r\n    export function convertNumber(input: string): number {\r\n        return Number(input);\r\n    }\r\n\r\n    export function convertBoolean(input: string): boolean {\r\n        return input.toLowerCase() === 'true';\r\n    }\r\n\r\n}\r\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\r\nimport { inRange } from './cst-utils.js';\r\n\r\n/**\r\n * Link the `$container` and other related properties of every AST node that is directly contained\r\n * in the given `node`.\r\n */\r\nexport function linkContentToContainer(node: AstNode): void {\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach((item, index) => {\r\n                    if (isAstNode(item)) {\r\n                        (item as Mutable<AstNode>).$container = node;\r\n                        (item as Mutable<AstNode>).$containerProperty = name;\r\n                        (item as Mutable<AstNode>).$containerIndex = index;\r\n                    }\r\n                });\r\n            } else if (isAstNode(value)) {\r\n                (value as Mutable<AstNode>).$container = node;\r\n                (value as Mutable<AstNode>).$containerProperty = name;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\r\n * node that matches the type predicate. If the start node itself matches, it is returned.\r\n * If no container matches, `undefined` is returned.\r\n */\r\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\r\n    let item = node;\r\n    while (item) {\r\n        if (typePredicate(item)) {\r\n            return item;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\r\n * of a container that matches the given predicate. The start node is included in the checks.\r\n */\r\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\r\n    let item = node;\r\n    while (item) {\r\n        if (predicate(item)) {\r\n            return true;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Retrieve the document in which the given AST node is contained. A reference to the document is\r\n * usually held by the root node of the AST.\r\n *\r\n * @throws an error if the node is not contained in a document.\r\n */\r\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\r\n    const rootNode = findRootNode(node);\r\n    const result = rootNode.$document;\r\n    if (!result) {\r\n        throw new Error('AST node has no document.');\r\n    }\r\n    return result as LangiumDocument<T>;\r\n}\r\n\r\n/**\r\n * Returns the root node of the given AST node by following the `$container` references.\r\n */\r\nexport function findRootNode(node: AstNode): AstNode {\r\n    while (node.$container) {\r\n        node = node.$container;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport interface AstStreamOptions {\r\n    /**\r\n     * Optional target range that the nodes in the stream need to intersect\r\n     */\r\n    range?: Range\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\r\n    if (!node) {\r\n        throw new Error('Node must be an AstNode.');\r\n    }\r\n    const range = options?.range;\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, AstNode>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isAstNode(value)) {\r\n                    state.keyIndex++;\r\n                    if (isAstNodeInRange(value, range)) {\r\n                        return { done: false, value };\r\n                    }\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\r\n                            return { done: false, value: element };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\r\n * This does not include the root node itself.\r\n */\r\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options));\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\r\n        // Return an empty stream if the root node isn't in range\r\n        return new TreeStreamImpl(root, () => []);\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\r\n}\r\n\r\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\r\n    if (!range) {\r\n        return true;\r\n    }\r\n    const nodeRange = astNode.$cstNode?.range;\r\n    if (!nodeRange) {\r\n        return false;\r\n    }\r\n    return inRange(nodeRange, range);\r\n}\r\n\r\n/**\r\n * Create a stream of all cross-references that are held by the given AST node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, ReferenceInfo>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isReference(value)) {\r\n                    state.keyIndex++;\r\n                    return { done: false, value: { reference: value, container: node, property } };\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isReference(element)) {\r\n                            return { done: false, value: { reference: element, container: node, property, index } };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a Stream of references to the target node from the AstNode tree\r\n *\r\n * @param targetNode AstNode we are looking for\r\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\r\n */\r\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\r\n    const refs: Reference[] = [];\r\n    streamAst(lookup).forEach(node => {\r\n        streamReferences(node).forEach(refInfo => {\r\n            if (refInfo.reference.ref === targetNode) {\r\n                refs.push(refInfo.reference);\r\n            }\r\n        });\r\n    });\r\n    return stream(refs);\r\n}\r\n\r\n/**\r\n * Assigns all mandatory AST properties to the specified node.\r\n *\r\n * @param reflection Reflection object used to gather mandatory properties for the node.\r\n * @param node Specified node is modified in place and properties are directly assigned.\r\n */\r\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\r\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\r\n    const genericNode = node as GenericAstNode;\r\n    for (const property of typeMetaData.properties) {\r\n        // Only set the value if the property is not already set and if it has a default value\r\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\r\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\r\n    if (Array.isArray(propertyType)) {\r\n        return [...propertyType.map(copyDefaultValue)];\r\n    } else {\r\n        return propertyType;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the specified AST node.\r\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\r\n *\r\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\r\n */\r\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\r\n    const copy: GenericAstNode = { $type: node.$type };\r\n\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (isAstNode(value)) {\r\n                copy[name] = copyAstNode(value, buildReference);\r\n            } else if (isReference(value)) {\r\n                copy[name] = buildReference(\r\n                    copy,\r\n                    name,\r\n                    value.$refNode,\r\n                    value.$refText\r\n                );\r\n            } else if (Array.isArray(value)) {\r\n                const copiedArray: unknown[] = [];\r\n                for (const element of value) {\r\n                    if (isAstNode(element)) {\r\n                        copiedArray.push(copyAstNode(element, buildReference));\r\n                    } else if (isReference(element)) {\r\n                        copiedArray.push(\r\n                            buildReference(\r\n                                copy,\r\n                                name,\r\n                                element.$refNode,\r\n                                element.$refText\r\n                            )\r\n                        );\r\n                    } else {\r\n                        copiedArray.push(element);\r\n                    }\r\n                }\r\n                copy[name] = copiedArray;\r\n            } else {\r\n                copy[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    linkContentToContainer(copy);\r\n    return copy as unknown as T;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CustomPatternMatcherFunc, ILexingError, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { Lexer } from 'chevrotain';\r\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\r\nimport { streamAllContents } from '../utils/ast-utils.js';\r\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\n\r\nexport interface TokenBuilderOptions {\r\n    caseInsensitive?: boolean\r\n}\r\n\r\nexport interface TokenBuilder {\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\r\n    /**\r\n     * Produces a lexing report for the given text that was just tokenized using the tokens provided by this builder.\r\n     *\r\n     * @param text The text that was tokenized.\r\n     */\r\n    flushLexingReport?(text: string): LexingReport;\r\n}\r\n\r\n/**\r\n * A custom lexing report that can be produced by the token builder during the lexing process.\r\n * Adopters need to ensure that the any custom fields are serializable so they can be sent across worker threads.\r\n */\r\nexport interface LexingReport {\r\n    diagnostics: LexingDiagnostic[];\r\n}\r\n\r\nexport type LexingDiagnosticSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport interface LexingDiagnostic extends ILexingError {\r\n    severity?: LexingDiagnosticSeverity;\r\n}\r\n\r\nexport class DefaultTokenBuilder implements TokenBuilder {\r\n    /**\r\n     * The list of diagnostics stored during the lexing process of a single text.\r\n     */\r\n    protected diagnostics: LexingDiagnostic[] = [];\r\n\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\r\n        const reachableRules = stream(getAllReachableRules(grammar, false));\r\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\r\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\r\n\r\n        terminalTokens.forEach(terminalToken => {\r\n            const pattern = terminalToken.PATTERN;\r\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\r\n                tokens.unshift(terminalToken);\r\n            } else {\r\n                tokens.push(terminalToken);\r\n            }\r\n        });\r\n        // We don't need to add the EOF token explicitly.\r\n        // It is automatically available at the end of the token stream.\r\n        return tokens;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    flushLexingReport(text: string): LexingReport {\r\n        return { diagnostics: this.popDiagnostics() };\r\n    }\r\n\r\n    protected popDiagnostics(): LexingDiagnostic[] {\r\n        const diagnostics = [...this.diagnostics];\r\n        this.diagnostics = [];\r\n        return diagnostics;\r\n    }\r\n\r\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\r\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\r\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\r\n    }\r\n\r\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\r\n        const regex = terminalRegex(terminal);\r\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\r\n        const tokenType: TokenType = {\r\n            name: terminal.name,\r\n            PATTERN: pattern,\r\n        };\r\n        if (typeof pattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n        if (terminal.hidden) {\r\n            // Only skip tokens that are able to accept whitespace\r\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\r\n        }\r\n        return tokenType;\r\n    }\r\n\r\n    protected requiresCustomPattern(regex: RegExp): boolean {\r\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\r\n            // Unicode and dotall regexes are not supported by Chevrotain.\r\n            return true;\r\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\r\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\r\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\r\n        return (text, offset) => {\r\n            stickyRegex.lastIndex = offset;\r\n            const execResult = stickyRegex.exec(text);\r\n            return execResult;\r\n        };\r\n    }\r\n\r\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\r\n        return rules\r\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\r\n            .filter(isParserRule)\r\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\r\n            .distinct(e => e.value).toArray()\r\n            // Sort keywords by descending length\r\n            .sort((a, b) => b.value.length - a.value.length)\r\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\r\n    }\r\n\r\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\r\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\r\n        const tokenType: TokenType = {\r\n            name: keyword.value,\r\n            PATTERN: keywordPattern,\r\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\r\n        };\r\n\r\n        if (typeof keywordPattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n\r\n        return tokenType;\r\n    }\r\n\r\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\r\n        return caseInsensitive ?\r\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\r\n            keyword.value;\r\n    }\r\n\r\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\r\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\r\n            const pattern = token?.PATTERN as RegExp;\r\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\r\n                longerAlts.push(token);\r\n            }\r\n            return longerAlts;\r\n        }, []);\r\n    }\r\n}\r\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-BFZLARZY.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-FHLWH6W2.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-DI7F6ITA.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-4D64QAKS.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-6MM43HOH.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-PYI2724P.mjs\";\nimport {\n  TreemapModule,\n  createTreemapServices\n} from \"./chunks/mermaid-parser.core/chunk-VX7I4HLL.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap\n} from \"./chunks/mermaid-parser.core/chunk-YAJQ3QCK.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-W3HD63GC.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-RYMULSSO.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-KUMW6FLJ.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-W74WOHHR.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-7HJAHWGR.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-KEIDH4CJ.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\"),\n  treemap: /* @__PURE__ */ __name(async () => {\n    const { createTreemapServices: createTreemapServices2 } = await import(\"./chunks/mermaid-parser.core/treemap-6Y5VK53G.mjs\");\n    const parser = createTreemapServices2().Treemap.parser.LangiumParser;\n    parsers.treemap = parser;\n  }, \"treemap\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  TreemapModule,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  createTreemapServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap,\n  parse\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\r\n * both sequentially and randomly (via index), a stream allows only sequential access.\r\n *\r\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\r\n * to store intermediate values. This can boost performance when a large sequence is\r\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\r\n * evaluation means that all processing is repeated when you access the sequence multiple\r\n * times; in such a case, it may be better to store the resulting sequence into an array.\r\n */\r\nexport interface Stream<T> extends Iterable<T> {\r\n\r\n    /**\r\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\r\n     */\r\n    iterator(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Determines whether this stream contains no elements.\r\n     */\r\n    isEmpty(): boolean;\r\n\r\n    /**\r\n     * Determines the number of elements in this stream.\r\n     */\r\n    count(): number;\r\n\r\n    /**\r\n     * Collects all elements of this stream into an array.\r\n     */\r\n    toArray(): T[];\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Set.\r\n     */\r\n    toSet(): Set<T>;\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\r\n     *\r\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\r\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\r\n     */\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\r\n\r\n    /**\r\n     * Returns a string representation of a stream.\r\n     */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\r\n     *\r\n     * @param other Stream to be concatenated with this one.\r\n     */\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\r\n\r\n    /**\r\n     * Adds all elements of the stream into a string, separated by the specified separator string.\r\n     *\r\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\r\n     *        If omitted, the steam elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\r\n     *\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\r\n     *        starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Determines whether all members of the stream satisfy the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\r\n     *        of the stream.\r\n     */\r\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Determines whether any member of the stream satisfies the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\r\n     *        of the stream.\r\n     */\r\n    some(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Performs the specified action for each element in the stream.\r\n     *\r\n     * @param callbackfn Function called once for each element in the stream.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number) => void): void;\r\n\r\n    /**\r\n     * Returns a stream that yields the results of calling the specified callback function on each element\r\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\r\n     * accessing the resulting stream multiple times means the function is also called multiple times for\r\n     * each element of the stream.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that meet the condition specified in a callback function.\r\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\r\n     * resulting stream multiple times means the function is also called multiple times for each element\r\n     * of the stream.\r\n     *\r\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\r\n     */\r\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\r\n    filter(predicate: (value: T) => unknown): Stream<T>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\r\n     * nor `null`.\r\n     */\r\n    nonNullable(): Stream<NonNullable<T>>;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream. The return value of the\r\n     * callback function is the accumulated result, and is provided as an argument in the next call to\r\n     * the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of a stream value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    findIndex(predicate: (value: T) => unknown): number;\r\n\r\n    /**\r\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\r\n     *\r\n     * @param searchElement The element to search for.\r\n     */\r\n    includes(searchElement: T): boolean;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of the stream and then flattens the result into\r\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\r\n\r\n    /**\r\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\r\n     * to the specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth. Defaults to 1.\r\n     */\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\r\n\r\n    /**\r\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\r\n     */\r\n    head(): T | undefined;\r\n\r\n    /**\r\n     * Returns a stream that skips the first `skipCount` elements from this stream.\r\n     *\r\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\r\n     *        the stream, an empty stream is returned. Defaults to 1.\r\n     */\r\n    tail(skipCount?: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\r\n     * in length.\r\n     *\r\n     * @param maxSize The number of elements the stream should be limited to\r\n     */\r\n    limit(maxSize: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream containing only the distinct elements from this stream.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     *\r\n     * @param by A function returning the key used to check equality with a previous stream element.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     * @param other The elements that should be exluded from this stream.\r\n     * @param key A function returning the key used to check quality.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\r\n\r\n}\r\n\r\nexport type FlatStream<T, Depth extends number> = {\r\n    'done': Stream<T>,\r\n    'recur': T extends Iterable<infer Content>\r\n        ? FlatStream<Content, MinusOne<Depth>>\r\n        : Stream<T>\r\n}[Depth extends 0 ? 'done' : 'recur'];\r\n\r\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\r\n\r\n/**\r\n * The default implementation of `Stream` works with two input functions:\r\n *  - The first function creates the initial state of an iteration.\r\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\r\n */\r\nexport class StreamImpl<S, T> implements Stream<T> {\r\n    protected readonly startFn: () => S;\r\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\r\n\r\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\r\n        this.startFn = startFn;\r\n        this.nextFn = nextFn;\r\n    }\r\n\r\n    iterator(): IterableIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        return this.iterator();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        const iterator = this.iterator();\r\n        return Boolean(iterator.next().done);\r\n    }\r\n\r\n    count(): number {\r\n        const iterator = this.iterator();\r\n        let count = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            count++;\r\n            next = iterator.next();\r\n        }\r\n        return count;\r\n    }\r\n\r\n    toArray(): T[] {\r\n        const result: T[] = [];\r\n        const iterator = this.iterator();\r\n        let next: IteratorResult<T>;\r\n        do {\r\n            next = iterator.next();\r\n            if (next.value !== undefined) {\r\n                result.push(next.value);\r\n            }\r\n        } while (!next.done);\r\n        return result;\r\n    }\r\n\r\n    toSet(): Set<T> {\r\n        return new Set(this);\r\n    }\r\n\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\r\n        const entryStream = this.map(element => <[K, V]>[\r\n            keyFn ? keyFn(element) : element,\r\n            valueFn ? valueFn(element) : element\r\n        ]);\r\n        return new Map(entryStream);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join();\r\n    }\r\n\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\r\n        return new StreamImpl<{ first: S, firstDone: boolean, iterator: Iterator<T2, unknown, undefined> }, T | T2>(\r\n            () => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }),\r\n            state => {\r\n                let result: IteratorResult<T | T2>;\r\n                if (!state.firstDone) {\r\n                    do {\r\n                        result = this.nextFn(state.first);\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    } while (!result.done);\r\n                    state.firstDone = true;\r\n                }\r\n                do {\r\n                    result = state.iterator.next();\r\n                    if (!result.done) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    join(separator = ','): string {\r\n        const iterator = this.iterator();\r\n        let value = '';\r\n        let result: IteratorResult<T>;\r\n        let addSeparator = false;\r\n        do {\r\n            result = iterator.next();\r\n            if (!result.done) {\r\n                if (addSeparator) {\r\n                    value += separator;\r\n                }\r\n                value += toString(result.value);\r\n            }\r\n            addSeparator = true;\r\n        } while (!result.done);\r\n        return value;\r\n    }\r\n\r\n    indexOf(searchElement: T, fromIndex = 0): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (index >= fromIndex && next.value === searchElement) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // In the following definition the '& this' part in the return type is important\r\n    // _and_ the order within 'Stream<U> & this' is crucial!\r\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\r\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\r\n    // ```\r\n    //  const stream = new StreamImpl(...);\r\n    //  ... stream.every(<typeGuard>) & stream....\r\n    // ```\r\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\r\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\r\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\r\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n    every(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (!predicate(next.value)) {\r\n                return false;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    some(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, index: number) => void): void {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            callbackfn(next.value, index);\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n    }\r\n\r\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\r\n        return new StreamImpl<S, U>(\r\n            this.startFn,\r\n            (state) => {\r\n                const { done, value } = this.nextFn(state);\r\n                if (done) {\r\n                    return DONE_RESULT;\r\n                } else {\r\n                    return { done: false, value: callbackfn(value) };\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\r\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            this.startFn,\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state);\r\n                    if (!result.done && predicate(result.value)) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    nonNullable(): Stream<NonNullable<T>> {\r\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\r\n    }\r\n\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const iterator = this.iterator();\r\n        let previousValue: U | T | undefined = initialValue;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (previousValue === undefined) {\r\n                previousValue = next.value;\r\n            } else {\r\n                previousValue = callbackfn(previousValue, next.value);\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return previousValue;\r\n    }\r\n\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\r\n    }\r\n\r\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const next = iterator.next();\r\n        if (next.done) {\r\n            return initialValue;\r\n        }\r\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\r\n        if (previousValue === undefined) {\r\n            return next.value;\r\n        }\r\n        return callbackfn(previousValue, next.value);\r\n    }\r\n\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return next.value;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findIndex(predicate: (value: T) => unknown): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    includes(searchElement: T): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (next.value === searchElement) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\r\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\r\n        return new StreamImpl<FlatMapState, U>(\r\n            () => ({ this: this.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = this.nextFn(state.this);\r\n                    if (!done) {\r\n                        const mapped = callbackfn(value);\r\n                        if (isIterable(mapped)) {\r\n                            state.iterator = mapped[Symbol.iterator]();\r\n                        } else {\r\n                            return { done: false, value: mapped };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\r\n        if (depth === undefined) {\r\n            depth = 1 as D;\r\n        }\r\n        if (depth <= 0) {\r\n            return this as unknown as FlatStream<T, D>;\r\n        }\r\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\r\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\r\n        return new StreamImpl<FlatMapState, T>(\r\n            () => ({ this: stream.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = stream.nextFn(state.this);\r\n                    if (!done) {\r\n                        if (isIterable(value)) {\r\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\r\n                        } else {\r\n                            return { done: false, value: value };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        ) as unknown as FlatStream<T, D>;\r\n    }\r\n\r\n    head(): T | undefined {\r\n        const iterator = this.iterator();\r\n        const result = iterator.next();\r\n        if (result.done) {\r\n            return undefined;\r\n        }\r\n        return result.value;\r\n    }\r\n\r\n    tail(skipCount = 1): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            () => {\r\n                const state = this.startFn();\r\n                for (let i = 0; i < skipCount; i++) {\r\n                    const next = this.nextFn(state);\r\n                    if (next.done) {\r\n                        return state;\r\n                    }\r\n                }\r\n                return state;\r\n            },\r\n            this.nextFn\r\n        );\r\n    }\r\n\r\n    limit(maxSize: number): Stream<T> {\r\n        return new StreamImpl<{ size: number, state: S }, T>(\r\n            () => ({ size: 0, state: this.startFn() }),\r\n            state => {\r\n                state.size++;\r\n                if (state.size > maxSize) {\r\n                    return DONE_RESULT;\r\n                }\r\n                return this.nextFn(state.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\r\n        return new StreamImpl<{ set: Set<Key | T>, internalState: S }, T>(\r\n            () => ({ set: new Set<Key | T>(), internalState: this.startFn() }),\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state.internalState);\r\n                    if (!result.done) {\r\n                        const value = by ? by(result.value) : result.value;\r\n                        if (!state.set.has(value)) {\r\n                            state.set.add(value);\r\n                            return result;\r\n                        }\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\r\n        const otherKeySet = new Set<Key | T>();\r\n        for (const item of other) {\r\n            const value = key ? key(item) : item;\r\n            otherKeySet.add(value);\r\n        }\r\n        return this.filter(e => {\r\n            const ownKey = key ? key(e) : e;\r\n            return !otherKeySet.has(ownKey);\r\n        });\r\n    }\r\n}\r\n\r\nfunction toString(item: unknown): string {\r\n    if (typeof item === 'string') {\r\n        return item as string;\r\n    }\r\n    if (typeof item === 'undefined') {\r\n        return 'undefined';\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof (item as any).toString === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return (item as any).toString();\r\n    }\r\n    return Object.prototype.toString.call(item);\r\n}\r\n\r\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\r\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * An empty stream of any type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\r\n\r\n/**\r\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\r\n */\r\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\r\n\r\n/**\r\n * Create a stream from one or more iterables or array-likes.\r\n */\r\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\r\n    if (collections.length === 1) {\r\n        const collection = collections[0];\r\n        if (collection instanceof StreamImpl) {\r\n            return collection as Stream<T>;\r\n        }\r\n        if (isIterable(collection)) {\r\n            return new StreamImpl<Iterator<T, undefined>, T>(\r\n                () => collection[Symbol.iterator](),\r\n                (iterator) => iterator.next()\r\n            );\r\n        }\r\n        if (typeof collection.length === 'number') {\r\n            return new StreamImpl<{ index: number }, T>(\r\n                () => ({ index: 0 }),\r\n                (state) => {\r\n                    if (state.index < collection.length) {\r\n                        return { done: false, value: collection[state.index++] };\r\n                    } else {\r\n                        return DONE_RESULT;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    if (collections.length > 1) {\r\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\r\n        return new StreamImpl<State, T>(\r\n            () => ({ collIndex: 0, arrIndex: 0 }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (!next.done) {\r\n                            return next;\r\n                        }\r\n                        state.iterator = undefined;\r\n                    }\r\n                    if (state.array) {\r\n                        if (state.arrIndex < state.array.length) {\r\n                            return { done: false, value: state.array[state.arrIndex++] };\r\n                        }\r\n                        state.array = undefined;\r\n                        state.arrIndex = 0;\r\n                    }\r\n                    if (state.collIndex < collections.length) {\r\n                        const collection = collections[state.collIndex++];\r\n                        if (isIterable(collection)) {\r\n                            state.iterator = collection[Symbol.iterator]();\r\n                        } else if (collection && typeof collection.length === 'number') {\r\n                            state.array = collection;\r\n                        }\r\n                    }\r\n                } while (state.iterator || state.array || state.collIndex < collections.length);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n    return EMPTY_STREAM;\r\n}\r\n\r\n/**\r\n * A tree iterator adds the ability to prune the current iteration.\r\n */\r\nexport interface TreeIterator<T> extends IterableIterator<T> {\r\n    /**\r\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\r\n     * element had no children.\r\n     */\r\n    prune(): void\r\n}\r\n\r\n/**\r\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\r\n */\r\nexport interface TreeStream<T> extends Stream<T> {\r\n    iterator(): TreeIterator<T>\r\n}\r\n\r\n/**\r\n * The default implementation of `TreeStream` takes a root element and a function that computes the\r\n * children of its argument. Whether the root node included in the stream is controlled with the\r\n * `includeRoot` option, which defaults to `false`.\r\n */\r\nexport class TreeStreamImpl<T>\r\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\r\n    implements TreeStream<T> {\r\n\r\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\r\n        super(\r\n            () => ({\r\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\r\n                pruned: false\r\n            }),\r\n            state => {\r\n                if (state.pruned) {\r\n                    state.iterators.pop();\r\n                    state.pruned = false;\r\n                }\r\n                while (state.iterators.length > 0) {\r\n                    const iterator = state.iterators[state.iterators.length - 1];\r\n                    const next = iterator.next();\r\n                    if (next.done) {\r\n                        state.iterators.pop();\r\n                    } else {\r\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\r\n                        return next;\r\n                    }\r\n                }\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    override iterator(): TreeIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            prune: () => {\r\n                iterator.state.pruned = true;\r\n            },\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of utility functions that reduce a stream to a single value.\r\n */\r\nexport namespace Reduction {\r\n\r\n    /**\r\n     * Compute the sum of a number stream.\r\n     */\r\n    export function sum(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a + b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the product of a number stream.\r\n     */\r\n    export function product(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a * b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function min(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.min(a, b));\r\n    }\r\n\r\n    /**\r\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function max(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.max(a, b));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken } from '@chevrotain/types';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\r\nimport { TreeStreamImpl } from './stream.js';\r\n\r\n/**\r\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\r\n    return new TreeStreamImpl(node, element => {\r\n        if (isCompositeCstNode(element)) {\r\n            return element.content;\r\n        } else {\r\n            return [];\r\n        }\r\n    }, { includeRoot: true });\r\n}\r\n\r\n/**\r\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\r\n */\r\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\r\n    return streamCst(node).filter(isLeafCstNode);\r\n}\r\n\r\n/**\r\n * Determines whether the specified cst node is a child of the specified parent node.\r\n */\r\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\r\n    while (child.container) {\r\n        child = child.container;\r\n        if (child === parent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function tokenToRange(token: IToken): Range {\r\n    // Chevrotain uses 1-based indices everywhere\r\n    // So we subtract 1 from every value to align with the LSP\r\n    return {\r\n        start: {\r\n            character: token.startColumn! - 1,\r\n            line: token.startLine! - 1\r\n        },\r\n        end: {\r\n            character: token.endColumn!, // endColumn uses the correct index\r\n            line: token.endLine! - 1\r\n        }\r\n    };\r\n}\r\n\r\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const { offset, end, range } = node;\r\n    return {\r\n        range,\r\n        offset,\r\n        end,\r\n        length: end - offset\r\n    };\r\n}\r\n\r\nexport enum RangeComparison {\r\n    Before = 0,\r\n    After = 1,\r\n    OverlapFront = 2,\r\n    OverlapBack = 3,\r\n    Inside = 4,\r\n    Outside = 5,\r\n}\r\n\r\nexport function compareRange(range: Range, to: Range): RangeComparison {\r\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\r\n        return RangeComparison.Before;\r\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\r\n        return RangeComparison.After;\r\n    }\r\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\r\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\r\n    if (startInside && endInside) {\r\n        return RangeComparison.Inside;\r\n    } else if (startInside) {\r\n        return RangeComparison.OverlapBack;\r\n    } else if (endInside) {\r\n        return RangeComparison.OverlapFront;\r\n    } else {\r\n        return RangeComparison.Outside;\r\n    }\r\n}\r\n\r\nexport function inRange(range: Range, to: Range): boolean {\r\n    const comparison = compareRange(range, to);\r\n    return comparison > RangeComparison.After;\r\n}\r\n\r\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\r\n// Together with \\w it matches any kind of character which can commonly appear in IDs\r\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\r\n\r\n/**\r\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\r\n * it will instead return the leaf node at the `offset - 1` position.\r\n *\r\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\r\n */\r\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\r\n    if (cstNode) {\r\n        if (offset > 0) {\r\n            const localOffset = offset - cstNode.offset;\r\n            const textAtOffset = cstNode.text.charAt(localOffset);\r\n            if (!nameRegexp.test(textAtOffset)) {\r\n                offset--;\r\n            }\r\n        }\r\n        return findLeafNodeAtOffset(cstNode, offset);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\r\n    if (cstNode) {\r\n        const previous = getPreviousNode(cstNode, true);\r\n        if (previous && isCommentNode(previous, commentNames)) {\r\n            return previous;\r\n        }\r\n        if (isRootCstNode(cstNode)) {\r\n            // Go from the first non-hidden node through all nodes in reverse order\r\n            // We do this to find the comment node which directly precedes the root node\r\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\r\n            for (let i = endIndex - 1; i >= 0; i--) {\r\n                const child = cstNode.content[i];\r\n                if (isCommentNode(child, commentNames)) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\r\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * Note that the given offset will be within the range of the returned leaf node.\r\n *\r\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node at the specified offset.\r\n */\r\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, false);\r\n        if (searchResult) {\r\n            return findLeafNodeAtOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * If no CST node exists at the specified position, it will return the leaf node before it.\r\n *\r\n * If there is no leaf node before the specified offset, this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node closest to the specified offset.\r\n */\r\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, true);\r\n        if (searchResult) {\r\n            return findLeafNodeBeforeOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\r\n    let left = 0;\r\n    let right = node.content.length - 1;\r\n    let closestNode: CstNode | undefined = undefined;\r\n\r\n    while (left <= right) {\r\n        const middle = Math.floor((left + right) / 2);\r\n        const middleNode = node.content[middle];\r\n\r\n        if (middleNode.offset <= offset && middleNode.end > offset) {\r\n            // Found an exact match\r\n            return middleNode;\r\n        }\r\n\r\n        if (middleNode.end <= offset) {\r\n            // Update the closest node (less than offset) and move to the right half\r\n            closestNode = closest ? middleNode : undefined;\r\n            left = middle + 1;\r\n        } else {\r\n            // Move to the left half\r\n            right = middle - 1;\r\n        }\r\n    }\r\n\r\n    return closestNode;\r\n}\r\n\r\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        while (index > 0) {\r\n            index--;\r\n            const previous = parent.content[index];\r\n            if (hidden || !previous.hidden) {\r\n                return previous;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        const last = parent.content.length - 1;\r\n        while (index < last) {\r\n            index++;\r\n            const next = parent.content[index];\r\n            if (hidden || !next.hidden) {\r\n                return next;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getStartlineNode(node: CstNode): CstNode {\r\n    if (node.range.start.character === 0) {\r\n        return node;\r\n    }\r\n    const line = node.range.start.line;\r\n    let last = node;\r\n    let index: number | undefined;\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const selfIndex = index ?? parent.content.indexOf(node);\r\n        if (selfIndex === 0) {\r\n            node = parent;\r\n            index = undefined;\r\n        } else {\r\n            index = selfIndex - 1;\r\n            node = parent.content[index];\r\n        }\r\n        if (node.range.start.line !== line) {\r\n            break;\r\n        }\r\n        last = node;\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\r\n    const commonParent = getCommonParent(start, end);\r\n    if (!commonParent) {\r\n        return [];\r\n    }\r\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\r\n}\r\n\r\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\r\n    const aParents = getParentChain(a);\r\n    const bParents = getParentChain(b);\r\n    let current: CommonParent | undefined;\r\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\r\n        const aParent = aParents[i];\r\n        const bParent = bParents[i];\r\n        if (aParent.parent === bParent.parent) {\r\n            current = {\r\n                parent: aParent.parent,\r\n                a: aParent.index,\r\n                b: bParent.index\r\n            };\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\ninterface CommonParent {\r\n    parent: CompositeCstNode\r\n    a: number\r\n    b: number\r\n}\r\n\r\nfunction getParentChain(node: CstNode): ParentLink[] {\r\n    const chain: ParentLink[] = [];\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const index = parent.content.indexOf(node);\r\n        chain.push({\r\n            parent,\r\n            index\r\n        });\r\n        node = parent;\r\n    }\r\n    return chain.reverse();\r\n}\r\n\r\ninterface ParentLink {\r\n    parent: CompositeCstNode\r\n    index: number\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CstNode } from '../syntax-tree.js';\r\n\r\nexport class ErrorWithLocation extends Error {\r\n    constructor(node: CstNode | undefined, message: string) {\r\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\r\n    }\r\n}\r\n\r\nexport function assertUnreachable(_: never): never {\r\n    throw new Error('Error! The input value was not handled.');\r\n}\r\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface FileSystemNode {\r\n    readonly isFile: boolean;\r\n    readonly isDirectory: boolean;\r\n    readonly uri: URI;\r\n}\r\n\r\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\r\n\r\n/**\r\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\r\n */\r\nexport interface FileSystemProvider {\r\n    /**\r\n     * Reads a document asynchronously from a given URI.\r\n     * @returns The string content of the file with the specified URI.\r\n     */\r\n    readFile(uri: URI): Promise<string>;\r\n    /**\r\n     * Reads the directory information for the given URI.\r\n     * @returns The list of file system entries that are contained within the specified directory.\r\n     */\r\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\r\n}\r\n\r\nexport class EmptyFileSystemProvider implements FileSystemProvider {\r\n\r\n    readFile(): Promise<string> {\r\n        throw new Error('No file system is available.');\r\n    }\r\n\r\n    async readDirectory(): Promise<FileSystemNode[]> {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const EmptyFileSystem = {\r\n    fileSystemProvider: () => new EmptyFileSystemProvider()\r\n};\r\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * A `Module<I>` is a description of possibly grouped service factories.\r\n *\r\n * Given a type I = { group: { service: A } },\r\n * Module<I> := { group: { service: (injector: I) => A } }\r\n *\r\n * Making `I` available during the creation of `I` allows us to create cyclic\r\n * dependencies.\r\n */\r\nexport type Module<I, T = I> = {\r\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\r\n}\r\n\r\nexport namespace Module {\r\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\r\n}\r\n\r\n/**\r\n * Given a set of modules, the inject function returns a lazily evaluated injector\r\n * that injects dependencies into the requested service when it is requested the\r\n * first time. Subsequent requests will return the same service.\r\n *\r\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\r\n * by injecting a provider `() => T` instead of a `T`.\r\n *\r\n * Please note that the arguments may be objects or arrays. However, the result will\r\n * be an object. Using it with for..of will have no effect.\r\n *\r\n * @param module1 first Module\r\n * @param module2 (optional) second Module\r\n * @param module3 (optional) third Module\r\n * @param module4 (optional) fourth Module\r\n * @param module5 (optional) fifth Module\r\n * @param module6 (optional) sixth Module\r\n * @param module7 (optional) seventh Module\r\n * @param module8 (optional) eighth Module\r\n * @param module9 (optional) ninth Module\r\n * @returns a new object of type I\r\n */\r\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\r\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\r\n): I {\r\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\r\n    return _inject(module);\r\n}\r\n\r\nconst isProxy = Symbol('isProxy');\r\n\r\n/**\r\n * Eagerly load all services in the given dependency injection container. This is sometimes\r\n * necessary because services can register event listeners in their constructors.\r\n */\r\nexport function eagerLoad<T>(item: T): T {\r\n    if (item && (item as any)[isProxy]) {\r\n        for (const value of Object.values(item)) {\r\n            eagerLoad(value);\r\n        }\r\n    }\r\n    return item;\r\n}\r\n\r\n/**\r\n * Helper function that returns an injector by creating a proxy.\r\n * Invariant: injector is of type I. If injector is undefined, then T = I.\r\n */\r\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\r\n    const proxy: any = new Proxy({} as any, {\r\n        deleteProperty: () => false,\r\n        set: () => {\r\n            throw new Error('Cannot set property on injected service container');\r\n        },\r\n        get: (obj, prop) => {\r\n            if (prop === isProxy) {\r\n                return true;\r\n            } else {\r\n                return _resolve(obj, prop, module, injector || proxy);\r\n            }\r\n        },\r\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\r\n        has: (_, prop) => prop in module, // used by ..in..\r\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\r\n    });\r\n    return proxy;\r\n}\r\n\r\n/**\r\n * Internally used to tag a requested dependency, directly before calling the factory.\r\n * This allows us to find cycles during instance creation.\r\n */\r\nconst __requested__ = Symbol();\r\n\r\n/**\r\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\r\n * the module description. The result of service factories is cached. Groups are\r\n * recursively proxied.\r\n *\r\n * @param obj an object holding all group proxies and services\r\n * @param prop the key of a value within obj\r\n * @param module an object containing groups and service factories\r\n * @param injector the first level proxy that provides access to all values\r\n * @returns the requested value `obj[prop]`\r\n * @throws Error if a dependency cycle is detected\r\n */\r\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\r\n    if (prop in obj) {\r\n        if (obj[prop] instanceof Error) {\r\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\r\n        }\r\n        if (obj[prop] === __requested__) {\r\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\r\n        }\r\n        return obj[prop];\r\n    } else if (prop in module) {\r\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\r\n        obj[prop] = __requested__;\r\n        try {\r\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\r\n        } catch (error) {\r\n            obj[prop] = error instanceof Error ? error : undefined;\r\n            throw error;\r\n        }\r\n        return obj[prop];\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a deep-merge of two modules by writing source entries into the target module.\r\n *\r\n * @param target the module which is written\r\n * @param source the module which is read\r\n * @returns the target module\r\n */\r\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\r\n    if (source) {\r\n        for (const [key, value2] of Object.entries(source)) {\r\n            if (value2 !== undefined) {\r\n                const value1 = target[key];\r\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\r\n                    target[key] = _merge(value1, value2);\r\n                } else {\r\n                    target[key] = value2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-YAJQ3QCK.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n"],"names":["findIndexFunc","collection","predicate","fromIndex","iterable","Object","isArrayLike","iteratee","baseIteratee","keys","key","index","undefined","nativeMax","Math","max","createFind","array","length","toInteger","baseFindIndex","NEWLINE_REGEXP","regexpParser","RegExpParser","TerminalRegExpVisitor","BaseRegExpVisitor","constructor","isStarting","endRegexpStack","multiline","endRegex","this","join","reset","regex","startRegexp","visitGroup","node","quantifier","visitCharacter","char","String","fromCharCode","value","escapedChar","escapeRegExp","push","visitSet","set","substring","loc","begin","end","RegExp","Boolean","match","visitChildren","type","super","visitor","isMultilineComment","regexp","toString","visit","pattern","_a","whitespaceCharacters","split","isWhitespace","some","ws","test","replace","getCaseInsensitivePattern","keyword","Array","prototype","map","call","letter","toLowerCase","toUpperCase","partialMatches","input","partial","re","source","i","process","tmp","result","appendRaw","nbChars","substr","appendOptional","unicode","indexOf","lastIndex","exec","flags","partialRegExp","TreemapTokenBuilder","AbstractMermaidTokenBuilder","__name","classDefRegex","TreemapValueConverter","AbstractMermaidValueConverter","runCustomConverter","rule","_cstNode","name","parseFloat","$type","className","styleText","registerValidationChecks","services","validator","validation","TreemapValidator","registry","ValidationRegistry","checks","Treemap","checkSingleRoot","bind","register","doc","accept","rootNodeIndentation","row","TreemapRows","item","indent","parseInt","property","TreemapModule","parser","TokenBuilder","ValueConverter","createTreemapServices","context","arguments","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","createDefaultCoreModule","TreemapGeneratedModule","ServiceRegistry","getAllReachableRules","grammar","allTerminals","ruleNames","Set","entryRule","rules","find","e","ast","entry","getEntryRule","topMostRules","concat","filter","hidden","getHiddenRules","ruleDfs","has","add","visitedSet","streamAllContents","forEach","refRule","ref","getCrossReferenceTerminal","crossRef","terminal","nameAssigment","findNameAssignment","isCommentTerminal","terminalRule","terminalRegex","findNodesForProperty","findNodesForPropertyInternal","astNode","findNodeForProperty","nodes","min","element","first","nodeFeature","getContainerOfType","grammarSource","feature","isCompositeCstNode","content","flatMap","findNodeForKeyword","findNodesForKeywordInternal","treeIterator","streamCst","iterator","keywordNodes","next","done","childNode","prune","findAssignment","cstNode","container","assignment","startNode","$container","assertUnreachable","findNameAssignmentInternal","Map","cache","go","refType","childAssignment","get","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","getActionType","Error","getRuleType","_b","_c","s","u","abstractElementToRegex","flagText","entries","_ref","_ref2","WILDCARD","withCardinality","alternatives","elements","cardinality","lookahead","group","range","right","keywordToRegex","left","wrap","characterRangeToRegex","negate","until","lastSlash","lastIndexOf","regexFlags","includes","options","_ral","RAL","defineProperty","exports","install","ral","isArray","arrayMap","baseMap","string","stringArray","func","error","number","boolean","Number","every","elem","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","isAbstractElement","reflection","isInstance","ArrayLiteral","ArrayType","BooleanLiteral","isBooleanLiteral","Conjunction","isConjunction","Disjunction","isDisjunction","Grammar","GrammarImport","InferredType","isInferredType","Interface","isInterface","NamedArgument","Negation","isNegation","NumberLiteral","Parameter","ParameterReference","isParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","isReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","TypeAttribute","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","isCharacterRange","CrossReference","isCrossReference","EndOfFile","isEndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","isNegatedToken","RegexToken","isRegexToken","RuleCall","isRuleCall","TerminalAlternatives","isTerminalAlternatives","TerminalGroup","isTerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","isUntilToken","Wildcard","isWildcard","LangiumGrammarAstReflection","AbstractAstReflection","getAllTypes","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","getTypeMetaData","properties","defaultValue","Emitter","Event","ral_1","require","_disposable","dispose","None","CallbackList","callback","bucket","_callbacks","_contexts","remove","foundCallbackWithDifferentContext","len","splice","invoke","ret","callbacks","slice","contexts","_len","args","_key","apply","default","console","isEmpty","_options","event","_event","listener","thisArgs","disposables","onFirstListenerAdd","_noop","onLastListenerRemove","fire","hasOwnProperty","object","path","hasPath","baseHas","buildATNKey","occurrence","AbstractTransition","target","isEpsilon","AtomTransition","tokenType","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","start","newState","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","atom","production","Terminal","tokenRef","terminalType","NonTerminal","currentRule","nonTerminal","referencedRule","addTransition","ruleRef","Alternation","alternation","defineDecisionState","alts","handle","makeAlts","Option","option","optional","epsilon","idx","Repetition","repetition","starState","star","RepetitionWithSeparator","sep","separator","repetitionSep","RepetitionMandatory","plusState","plus","repetitionMandatory","RepetitionMandatoryWithSeparator","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","last","makeBlock","blkStart","blkEnd","loop","loopback","loopEnd","state","decision","alt","getProdType","a","b","t","assign","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","DFA_ERROR","ATNConfigSet","configs","size","finalize","config","getATNConfigKey","k","stack","baseUniq","createDFACache","startState","predicateSet","existing","atnStartState","PredicateSet","predicates","is","EMPTY_PREDICATES","LLStarLookaheadStrategy","LLkLookaheadStrategy","logging","message","log","initialize","dfas","decisionLength","decisionToDFA","initATNSimulator","validateAmbiguousAlternationAlternatives","validateEmptyOrAlternatives","buildLookaheadForAlternation","prodOccurrence","hasPredicates","dynamicTokensEnabled","decisionIndex","partialAlts","getLookaheadPaths","maxLookahead","prodType","currAlt","isLL1Sequence","choiceToAlt","reduce","currTokType","tokenTypeIdx","categoryMatches","currExtendingType","orAlts","nextToken","LA","prediction","gate","GATE","adaptivePredict","buildLookaheadForOptional","g","singleTokensTypes","flatten","expectedTokenUniqueKey","sequences","allowEmpty","fullSet","altSet","tokType","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","s0","previousD","d","getExistingTargetState","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","token","reach","intermediate","skippedStopStates","c","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","from","values","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","reportLookaheadAmbiguity","ambiguityIndices","prefixPath","atnState","pathMsg","currtok","tokenLabel","currMessage","prod","getProductionDslName","topLevelRule","buildAmbiguityError","previous","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","edges","tokenMatcher","to","mapKey","numberOfTransitions","p","atnStack","pop","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","create","line","character","candidate","Is","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","label","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startLine","endLine","startCharacter","endCharacter","kind","collapsedText","defined","location","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","code","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","description","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","languageId","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Module","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","_len2","parameters","_key2","Read","Write","Namespace","Package","Key","Null","containerName","selectionRange","children","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","leftIdx","rightIdx","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","startOffset","endOffset","_uri","_languageId","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","low","high","mid","floor","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","rootNode","buildRootNode","RootCstNodeImpl","root","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","image","tokenToRange","removeNode","addHiddenNodes","tokens","added","unshift","construct","$cstNode","AbstractCstNode","_astNode","fullText","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","child","setPrototypeOf","addParents","count","_len3","_key3","_text","DatatypeSymbol","Symbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","_unorderedGroups","allRules","lexer","Lexer","LanguageMetaData","mode","wrapper","ChevrotainWrapper","ParserConfig","skipValidations","errorMessageProvider","ParserErrorMessageProvider","choices","wrapOr","wrapOption","many","wrapMany","atLeastOne","wrapAtLeastOne","getRule","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","RULE_STACK","wrapSelfAnalysis","LangiumParser","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","AstReflection","impl","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","mainRule","fragment","explicit","parse","lexerResult","tokenize","clear","lexerErrors","errors","lexerReport","report","parserErrors","implementation","createNode","err","extractHiddenTokens","hiddenTokens","consume","wrapConsume","isValidToken","isCrossRef","getAssignment","convertedValue","convert","operator","isInsertedInRecovery","isNaN","subrule","subruleResult","wrapSubrule","performSubruleAssignment","newItem","assignWithoutOverride","obj","linkContentToContainer","assignMandatoryProperties","buildReference","existingValue","newValue","targetCstNode","definitionErrors","AbstractParserErrorMessageProvider","buildMismatchTokenMessage","defaultParserErrorProvider","buildNotAllInputParsedMessage","buildNoViableAltMessage","buildEarlyExitMessage","LangiumParserErrorMessageProvider","expected","actual","LABEL","firstRedundant","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","currIdx","before","after","defaultConfig","recoveryEnabled","nodeLocationTracking","EmbeddedActionsParser","useDefaultLookahead","lookaheadStrategy","RECORDING_PHASE","RULE","performSelfAnalysis","ARGS","or","createParser","parserContext","reachable","parserRules","stream","ctx","buildElement","buildRules","method","ignoreGuard","buildKeyword","buildAction","buildCrossReference","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getToken","ErrorWithLocation","$refText","buildRuleCall","methods","predicatedMethod","ALT","guard","getGuardCondition","buildAlternatives","orIdx","idFunc","groupIdx","lParser","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","buildGroup","EOF","condition","parameter","true","guardCondition","assignTerminal","EMPTY_ALT","DEF","ruleName","getRuleName","createLangiumParser","prepareLangiumParser","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","async","interruptAndCheck","CancellationToken","performance","now","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","reject","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","charCodeAt","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","DocumentState","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","$document","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getDocument","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","unlink","Changed","precomputedScopes","deleteDocument","ref_resolving","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","streamAst","streamReferences","doLink","reference","getCandidate","isLinkingError","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","errorMessage","getScope","getElement","refNode","refText","$refNode","isAstNode","isAstNodeDescription","findRootNode","refData","getLinkedNode","ComputedScopes","descr","getAstNodePath","$nodeDescription","nodeDescription","getAstNode","targetDescription","warn","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","UriUtils","basename","Utils","dirname","extname","joinPath","resolvePath","equals","relative","fromPath","toPath","fromParts","toParts","repeat","normalize","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","nodeElem","isReference","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","targetPath","segment","toDocumentSegment","local","MultiMap","Reduction","sum","addAll","callbackfn","flat","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","streamContents","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","caseInsensitive","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","nonNullable","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","JSON","stringify","space","deserialize","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","startsWith","propertyAssignments","containerProperty","containerIndex","propertyName","reviveReference","mutable","$containerProperty","$containerIndex","getRefNode","fragmentIndex","DefaultServiceRegistry","fileExtensionMap","languageIdMap","ext","fileExtensions","singleton","hasServices","diagnosticData","ValidationCategory","DocumentValidator","entriesBefore","entriesAfter","checksRecord","thisObj","category","wrapValidationException","addEntry","handleException","functionality","messageContext","getAllSubTypes","getChecks","categories","registerBeforeDocument","checkBefore","wrapPreparationException","registerAfterDocument","checkAfter","checksBefore","checksAfter","DefaultDocumentValidator","validationRegistry","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","column","toDiagnosticData","getSource","parserError","previousToken","endColumn","linkingError","info","containerType","toDiagnostic","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","getDiagnosticRange","LexingWarning","LexingInfo","LexingHint","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","previousValue","currentValue","propertyIndex","arrayIndex","Disposable","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","onConfigurationSectionUpdate","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deletedUri","changedUri","newDocument","allChangedUris","toSet","shouldRelink","rebuildDocuments","sortDocuments","Linked","toArray","hasTextDocument","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","validate","targetState","filtered","notifyDocumentPhase","targetStateDocs","notifyBuildPhase","onDocumentPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","listenersCopy","getBuildOptions","validationSetting","newCategories","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","workspaceFolders","folders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexerErrorMessageProvider","buildUnexpectedCharactersMessage","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","buildTokens","tokenTypes","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","positionTracking","chevrotainResult","groups","flushLexingReport","isIMultiModeLexerDefinition","modes","res","tokenVocabulary","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","rest","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","getTag","getAllTags","getTags","fillNewlines","trim","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","with","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","isRootCstNode","getGrammarElementId","isLeafCstNode","startColumn","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","cst","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","DocumentationProvider","nameRegexp","DefaultNameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","DefaultValueConverter","DefaultTokenBuilder","References","serializer","Hydrator","JsonSerializer","WorkspaceManager","ConfigurationProvider","comparator","computed","isSymbol","RadarTokenBuilder","RadarModule","CommonValueConverter","createRadarServices","Radar","RadarGeneratedModule","subtypes","allSubtypes","nested","allTypes","types","possibleSubType","minimalGrammarModule","minimalSharedGrammarModule","loadGrammarFromJson","json","createMinimalGrammarServices","__defProp","configurable","Statement","Architecture","Axis","Branch","Checkout","CherryPicking","ClassDefStatement","Commit","Curve","Edge","Entry","GitGraph","Info","Item","Junction","Merge","Packet","PacketBlock","Pie","PieSection","Service","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","loadedTreemapGrammar","TreemapRow","Direction","Leaf","Section","MermaidAstReflection","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","RadarGrammar","TreemapGrammar","InfoLanguageMetaData","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","TreemapLanguageMetaData","InfoGeneratedModule","PacketGeneratedModule","PieGeneratedModule","ArchitectureGeneratedModule","GitGraphGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","runConverter","runCommonConverter","_rule","_input","keywords","buildKeywordTokens","terminalTokens","PATTERN","convertInt","convertString","convertID","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","Date","other","toFinite","remainder","typePredicate","StreamImpl","keyIndex","isAstNodeInRange","DONE_RESULT","TreeStreamImpl","includeRoot","nodeRange","inRange","typeMetaData","genericNode","copyDefaultValue","propertyType","reachableRules","buildTerminalTokens","terminalToken","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","LINE_BREAKS","GROUP","SKIPPED","stickyRegex","distinct","sort","buildKeywordToken","keywordPattern","buildKeywordPattern","LONGER_ALT","findLongerAlt","longerAlts","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","isObject","valueOf","baseTrim","isBinary","INFINITY","toNumber","parsers","initializers","createInfoServices","createInfoServices2","packet","createPacketServices","createPacketServices2","pie","createPieServices","createPieServices2","architecture","createArchitectureServices","createArchitectureServices2","gitGraph","createGitGraphServices","createGitGraphServices2","radar","createRadarServices2","treemap","createTreemapServices2","diagramType","initializer","MermaidParseError","startFn","nextFn","toMap","keyFn","valueFn","entryStream","firstDone","addSeparator","searchElement","initialValue","reduceRight","recursiveReduce","findIndex","mapped","isIterable","depth","head","tail","skipCount","limit","maxSize","by","internalState","exclude","otherKeySet","ownKey","EMPTY_STREAM","freeze","collections","collIndex","arrIndex","iterators","pruned","product","RangeComparison","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","Outside","compareRange","commentNames","getPreviousNode","isCommentNode","_","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","baseSlice","createAssigner","isPrototype","copyObject","assignValue","props","getAllKeysIn","prop","basePickBy","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","isString","AbstractProduction","_definition","pickBy","v","Rule","orgText","Alternative","ignoreAmbiguities","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitAlternative","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","baseEach","arraySome","baseSome","isIterateeCall","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","prodWrapper","repSepProd","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","valuesIndex","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","PRINT_WARNING","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","ignoreCase","msgSuffix","terms","term","addOptimizedIdxToResult","complement","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","atLeast","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","visitLookahead","visitNegativeLookahead","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","sticky","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","currType","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","clazz","groupName","isUndefined","longerAltType","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","visitEndAnchor","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","visitStartAnchor","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","global","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","charsOrCodes","numOrString","charCode","timer","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","searching","CATEGORIES","expandCategories","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","traceInitPerf","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","traceInitMaxIdent","traceMethod","traceInitVal","Infinity","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","initialMode","tokenizeInternal","j","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","matchedTokens","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","currTok","buildAlternationAmbiguityError","buildEmptyRepetitionError","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","numOfAlts","areAllOneTokenLookahead","currNumOfPaths","currPredicate","currPathLength","singleTokenAlts","buildSingleAlternativeLookaheadFunction","numOfPaths","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","alternative","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","manySep","atLeastOneSep","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","captureStackTrace","MismatchedTokenException","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","DEFAULT_PARSER_CONFIG","leftRecursionErrors","emptyAltErrors","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","laFuncBuilder","buildLookaheadFuncForOr","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","setNodeLocationFull","defineNameProp","nameValue","enumerable","writable","defaultVisit","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","Parser","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","fullRuleName","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","howMuch","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","noTokenCategoriesUsed","tokenConstructor","defineRule","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","invokeRuleCatch","ruleFinallyStateUpdate","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","configClone","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","baseExtremum","baseLt","baseClone","events_1","Cancelled","shortcutEvent","MutableToken","_isCancelled","_emitter","_token","EmptyFileSystemProvider","r","o","h","cwd","isAbsolute","f","l","_makeLong","format","dir","base","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","PacketTokenBuilder","PacketModule","PieTokenBuilder","PieValueConverter","PieModule","cc","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","saveState","restoreState","consumeChar","disjunction","multiLine","isRegExpFlag","popChar","peekChar","isTerm","isAssertion","assertion","isBacktracking","atMost","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","isPatternCharacter","patternCharacter","isQuantifier","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","parseHexDigits","classPatternCharacterAtom","isClassAtom","classAtom","isRangeDash","classEscape","capturing","groupAst","nextChar","isAtom","prevState","howMany","hexString","hexChar","subChild","visitPattern","visitFlags","visitDisjunction","visitWordBoundary","visitNonWordBoundary","visitGroupBackReference","visitQuantifier","customizer","castPath","toKey","objValue","isIndex","paths","baseGet","baseSet","InfoTokenBuilder","InfoModule","objectProto","sources","keysIn","propsIndex","propsLength","eq","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","__requested__","cause","value2","value1","GitGraphTokenBuilder","GitGraphModule"],"sourceRoot":""}