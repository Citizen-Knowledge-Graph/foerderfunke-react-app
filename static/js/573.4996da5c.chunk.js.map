{"version":3,"file":"static/js/573.4996da5c.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BX2VUAB.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/diagram-QEK2KX5R.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  selectSvgElement\n} from \"./chunk-EXTU4WIE.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-4BX2VUAB.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-S3R3BYOJ.mjs\";\nimport {\n  clear,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  getThemeVariables,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/radar/db.ts\nvar defaultOptions = {\n  showLegend: true,\n  ticks: 5,\n  max: null,\n  min: 0,\n  graticule: \"circle\"\n};\nvar defaultRadarData = {\n  axes: [],\n  curves: [],\n  options: defaultOptions\n};\nvar data = structuredClone(defaultRadarData);\nvar DEFAULT_RADAR_CONFIG = defaultConfig_default.radar;\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_RADAR_CONFIG,\n    ...getConfig().radar\n  });\n  return config;\n}, \"getConfig\");\nvar getAxes = /* @__PURE__ */ __name(() => data.axes, \"getAxes\");\nvar getCurves = /* @__PURE__ */ __name(() => data.curves, \"getCurves\");\nvar getOptions = /* @__PURE__ */ __name(() => data.options, \"getOptions\");\nvar setAxes = /* @__PURE__ */ __name((axes) => {\n  data.axes = axes.map((axis) => {\n    return {\n      name: axis.name,\n      label: axis.label ?? axis.name\n    };\n  });\n}, \"setAxes\");\nvar setCurves = /* @__PURE__ */ __name((curves) => {\n  data.curves = curves.map((curve) => {\n    return {\n      name: curve.name,\n      label: curve.label ?? curve.name,\n      entries: computeCurveEntries(curve.entries)\n    };\n  });\n}, \"setCurves\");\nvar computeCurveEntries = /* @__PURE__ */ __name((entries) => {\n  if (entries[0].axis == void 0) {\n    return entries.map((entry) => entry.value);\n  }\n  const axes = getAxes();\n  if (axes.length === 0) {\n    throw new Error(\"Axes must be populated before curves for reference entries\");\n  }\n  return axes.map((axis) => {\n    const entry = entries.find((entry2) => entry2.axis?.$refText === axis.name);\n    if (entry === void 0) {\n      throw new Error(\"Missing entry for axis \" + axis.label);\n    }\n    return entry.value;\n  });\n}, \"computeCurveEntries\");\nvar setOptions = /* @__PURE__ */ __name((options) => {\n  const optionMap = options.reduce(\n    (acc, option) => {\n      acc[option.name] = option;\n      return acc;\n    },\n    {}\n  );\n  data.options = {\n    showLegend: optionMap.showLegend?.value ?? defaultOptions.showLegend,\n    ticks: optionMap.ticks?.value ?? defaultOptions.ticks,\n    max: optionMap.max?.value ?? defaultOptions.max,\n    min: optionMap.min?.value ?? defaultOptions.min,\n    graticule: optionMap.graticule?.value ?? defaultOptions.graticule\n  };\n}, \"setOptions\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  data = structuredClone(defaultRadarData);\n}, \"clear\");\nvar db = {\n  getAxes,\n  getCurves,\n  getOptions,\n  setAxes,\n  setCurves,\n  setOptions,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription\n};\n\n// src/diagrams/radar/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  const { axes, curves, options } = ast;\n  db.setAxes(axes);\n  db.setCurves(curves);\n  db.setOptions(options);\n}, \"populate\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"radar\", input);\n    log.debug(ast);\n    populate(ast);\n  }, \"parse\")\n};\n\n// src/diagrams/radar/renderer.ts\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const db2 = diagram2.db;\n  const axes = db2.getAxes();\n  const curves = db2.getCurves();\n  const options = db2.getOptions();\n  const config = db2.getConfig();\n  const title = db2.getDiagramTitle();\n  const svg = selectSvgElement(id);\n  const g = drawFrame(svg, config);\n  const maxValue = options.max ?? Math.max(...curves.map((curve) => Math.max(...curve.entries)));\n  const minValue = options.min;\n  const radius = Math.min(config.width, config.height) / 2;\n  drawGraticule(g, axes, radius, options.ticks, options.graticule);\n  drawAxes(g, axes, radius, config);\n  drawCurves(g, axes, curves, minValue, maxValue, options.graticule, config);\n  drawLegend(g, curves, options.showLegend, config);\n  g.append(\"text\").attr(\"class\", \"radarTitle\").text(title).attr(\"x\", 0).attr(\"y\", -config.height / 2 - config.marginTop);\n}, \"draw\");\nvar drawFrame = /* @__PURE__ */ __name((svg, config) => {\n  const totalWidth = config.width + config.marginLeft + config.marginRight;\n  const totalHeight = config.height + config.marginTop + config.marginBottom;\n  const center = {\n    x: config.marginLeft + config.width / 2,\n    y: config.marginTop + config.height / 2\n  };\n  svg.attr(\"viewbox\", `0 0 ${totalWidth} ${totalHeight}`).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\n  return svg.append(\"g\").attr(\"transform\", `translate(${center.x}, ${center.y})`);\n}, \"drawFrame\");\nvar drawGraticule = /* @__PURE__ */ __name((g, axes, radius, ticks, graticule) => {\n  if (graticule === \"circle\") {\n    for (let i = 0; i < ticks; i++) {\n      const r = radius * (i + 1) / ticks;\n      g.append(\"circle\").attr(\"r\", r).attr(\"class\", \"radarGraticule\");\n    }\n  } else if (graticule === \"polygon\") {\n    const numAxes = axes.length;\n    for (let i = 0; i < ticks; i++) {\n      const r = radius * (i + 1) / ticks;\n      const points = axes.map((_, j) => {\n        const angle = 2 * j * Math.PI / numAxes - Math.PI / 2;\n        const x = r * Math.cos(angle);\n        const y = r * Math.sin(angle);\n        return `${x},${y}`;\n      }).join(\" \");\n      g.append(\"polygon\").attr(\"points\", points).attr(\"class\", \"radarGraticule\");\n    }\n  }\n}, \"drawGraticule\");\nvar drawAxes = /* @__PURE__ */ __name((g, axes, radius, config) => {\n  const numAxes = axes.length;\n  for (let i = 0; i < numAxes; i++) {\n    const label = axes[i].label;\n    const angle = 2 * i * Math.PI / numAxes - Math.PI / 2;\n    g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", radius * config.axisScaleFactor * Math.cos(angle)).attr(\"y2\", radius * config.axisScaleFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLine\");\n    g.append(\"text\").text(label).attr(\"x\", radius * config.axisLabelFactor * Math.cos(angle)).attr(\"y\", radius * config.axisLabelFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLabel\");\n  }\n}, \"drawAxes\");\nfunction drawCurves(g, axes, curves, minValue, maxValue, graticule, config) {\n  const numAxes = axes.length;\n  const radius = Math.min(config.width, config.height) / 2;\n  curves.forEach((curve, index) => {\n    if (curve.entries.length !== numAxes) {\n      return;\n    }\n    const points = curve.entries.map((entry, i) => {\n      const angle = 2 * Math.PI * i / numAxes - Math.PI / 2;\n      const r = relativeRadius(entry, minValue, maxValue, radius);\n      const x = r * Math.cos(angle);\n      const y = r * Math.sin(angle);\n      return { x, y };\n    });\n    if (graticule === \"circle\") {\n      g.append(\"path\").attr(\"d\", closedRoundCurve(points, config.curveTension)).attr(\"class\", `radarCurve-${index}`);\n    } else if (graticule === \"polygon\") {\n      g.append(\"polygon\").attr(\"points\", points.map((p) => `${p.x},${p.y}`).join(\" \")).attr(\"class\", `radarCurve-${index}`);\n    }\n  });\n}\n__name(drawCurves, \"drawCurves\");\nfunction relativeRadius(value, minValue, maxValue, radius) {\n  const clippedValue = Math.min(Math.max(value, minValue), maxValue);\n  return radius * (clippedValue - minValue) / (maxValue - minValue);\n}\n__name(relativeRadius, \"relativeRadius\");\nfunction closedRoundCurve(points, tension) {\n  const numPoints = points.length;\n  let d = `M${points[0].x},${points[0].y}`;\n  for (let i = 0; i < numPoints; i++) {\n    const p0 = points[(i - 1 + numPoints) % numPoints];\n    const p1 = points[i];\n    const p2 = points[(i + 1) % numPoints];\n    const p3 = points[(i + 2) % numPoints];\n    const cp1 = {\n      x: p1.x + (p2.x - p0.x) * tension,\n      y: p1.y + (p2.y - p0.y) * tension\n    };\n    const cp2 = {\n      x: p2.x - (p3.x - p1.x) * tension,\n      y: p2.y - (p3.y - p1.y) * tension\n    };\n    d += ` C${cp1.x},${cp1.y} ${cp2.x},${cp2.y} ${p2.x},${p2.y}`;\n  }\n  return `${d} Z`;\n}\n__name(closedRoundCurve, \"closedRoundCurve\");\nfunction drawLegend(g, curves, showLegend, config) {\n  if (!showLegend) {\n    return;\n  }\n  const legendX = (config.width / 2 + config.marginRight) * 3 / 4;\n  const legendY = -(config.height / 2 + config.marginTop) * 3 / 4;\n  const lineHeight = 20;\n  curves.forEach((curve, index) => {\n    const itemGroup = g.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + index * lineHeight})`);\n    itemGroup.append(\"rect\").attr(\"width\", 12).attr(\"height\", 12).attr(\"class\", `radarLegendBox-${index}`);\n    itemGroup.append(\"text\").attr(\"x\", 16).attr(\"y\", 0).attr(\"class\", \"radarLegendText\").text(curve.label);\n  });\n}\n__name(drawLegend, \"drawLegend\");\nvar renderer = { draw };\n\n// src/diagrams/radar/styles.ts\nvar genIndexStyles = /* @__PURE__ */ __name((themeVariables, radarOptions) => {\n  let sections = \"\";\n  for (let i = 0; i < themeVariables.THEME_COLOR_LIMIT; i++) {\n    const indexColor = themeVariables[`cScale${i}`];\n    sections += `\n\t\t.radarCurve-${i} {\n\t\t\tcolor: ${indexColor};\n\t\t\tfill: ${indexColor};\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\n\t\t\tstroke: ${indexColor};\n\t\t\tstroke-width: ${radarOptions.curveStrokeWidth};\n\t\t}\n\t\t.radarLegendBox-${i} {\n\t\t\tfill: ${indexColor};\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\n\t\t\tstroke: ${indexColor};\n\t\t}\n\t\t`;\n  }\n  return sections;\n}, \"genIndexStyles\");\nvar buildRadarStyleOptions = /* @__PURE__ */ __name((radar) => {\n  const defaultThemeVariables = getThemeVariables();\n  const currentConfig = getConfig();\n  const themeVariables = cleanAndMerge(defaultThemeVariables, currentConfig.themeVariables);\n  const radarOptions = cleanAndMerge(themeVariables.radar, radar);\n  return { themeVariables, radarOptions };\n}, \"buildRadarStyleOptions\");\nvar styles = /* @__PURE__ */ __name(({ radar } = {}) => {\n  const { themeVariables, radarOptions } = buildRadarStyleOptions(radar);\n  return `\n\t.radarTitle {\n\t\tfont-size: ${themeVariables.fontSize};\n\t\tcolor: ${themeVariables.titleColor};\n\t\tdominant-baseline: hanging;\n\t\ttext-anchor: middle;\n\t}\n\t.radarAxisLine {\n\t\tstroke: ${radarOptions.axisColor};\n\t\tstroke-width: ${radarOptions.axisStrokeWidth};\n\t}\n\t.radarAxisLabel {\n\t\tdominant-baseline: middle;\n\t\ttext-anchor: middle;\n\t\tfont-size: ${radarOptions.axisLabelFontSize}px;\n\t\tcolor: ${radarOptions.axisColor};\n\t}\n\t.radarGraticule {\n\t\tfill: ${radarOptions.graticuleColor};\n\t\tfill-opacity: ${radarOptions.graticuleOpacity};\n\t\tstroke: ${radarOptions.graticuleColor};\n\t\tstroke-width: ${radarOptions.graticuleStrokeWidth};\n\t}\n\t.radarLegendText {\n\t\ttext-anchor: start;\n\t\tfont-size: ${radarOptions.legendFontSize}px;\n\t\tdominant-baseline: hanging;\n\t}\n\t${genIndexStyles(themeVariables, radarOptions)}\n\t`;\n}, \"styles\");\n\n// src/diagrams/radar/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n"],"names":["populateCommonDb","ast","db","_db$setAccDescription","_db$setAccTitle","_db$setDiagramTitle","accDescr","setAccDescription","call","accTitle","setAccTitle","title","setDiagramTitle","__name","defaultOptions","showLegend","ticks","max","min","graticule","defaultRadarData","axes","curves","options","data","structuredClone","DEFAULT_RADAR_CONFIG","defaultConfig_default","radar","getConfig2","cleanAndMerge","_objectSpread","getConfig","getAxes","getCurves","getOptions","setAxes","map","axis","_axis$label","name","label","setCurves","curve","_curve$label","entries","computeCurveEntries","entry","value","length","Error","find","entry2","_entry2$axis","$refText","setOptions","_optionMap$showLegend","_optionMap$showLegend2","_optionMap$ticks$valu","_optionMap$ticks","_optionMap$max$value","_optionMap$max","_optionMap$min$value","_optionMap$min","_optionMap$graticule$","_optionMap$graticule","optionMap","reduce","acc","option","clear","getAccTitle","getDiagramTitle","getAccDescription","populate","parser","parse","async","input","log","debug","draw","_text","id","_version","diagram2","_options$max","db2","config","svg","selectSvgElement","g","drawFrame","maxValue","Math","minValue","radius","width","height","drawGraticule","drawAxes","drawCurves","drawLegend","append","attr","text","marginTop","totalWidth","marginLeft","marginRight","totalHeight","marginBottom","center","x","y","concat","i","r","numAxes","points","_","j","angle","PI","cos","sin","join","axisScaleFactor","axisLabelFactor","forEach","index","relativeRadius","closedRoundCurve","curveTension","p","tension","numPoints","d","p0","p1","p2","p3","cp1","cp2","legendX","legendY","itemGroup","renderer","genIndexStyles","themeVariables","radarOptions","sections","THEME_COLOR_LIMIT","indexColor","curveOpacity","curveStrokeWidth","buildRadarStyleOptions","defaultThemeVariables","getThemeVariables","currentConfig","diagram","styles","arguments","undefined","fontSize","titleColor","axisColor","axisStrokeWidth","axisLabelFontSize","graticuleColor","graticuleOpacity","graticuleStrokeWidth","legendFontSize"],"sourceRoot":""}