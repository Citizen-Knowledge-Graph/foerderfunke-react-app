{"version":3,"file":"static/js/7.d2352f04.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/diagram-4IRLE6MV.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-ANTBXLJU.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-NRVI72HA.mjs"],"sourcesContent":["import {\n  setupViewPortForSVG\n} from \"./chunk-NRVI72HA.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-7RNWAQOT.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-ANTBXLJU.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-U37J5Y7L.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-T57MJCP2.mjs\";\nimport {\n  __name,\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-VIW5F6AA.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar TreeMapDB = class {\n  constructor() {\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.setAccTitle = setAccTitle;\n    this.getAccTitle = getAccTitle;\n    this.setDiagramTitle = setDiagramTitle;\n    this.getDiagramTitle = getDiagramTitle;\n    this.getAccDescription = getAccDescription;\n    this.setAccDescription = setAccDescription;\n  }\n  static {\n    __name(this, \"TreeMapDB\");\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getConfig() {\n    const defaultConfig = defaultConfig_default;\n    const userConfig = getConfig();\n    return cleanAndMerge({\n      ...defaultConfig.treemap,\n      ...userConfig.treemap ?? {}\n    });\n  }\n  addNode(node, level) {\n    this.nodes.push(node);\n    this.levels.set(node, level);\n    if (level === 0) {\n      this.outerNodes.push(node);\n      this.root ??= node;\n    }\n  }\n  getRoot() {\n    return { name: \"\", children: this.outerNodes };\n  }\n  addClass(id, _style) {\n    const styleClass = this.classes.get(id) ?? { id, styles: [], textStyles: [] };\n    const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n    if (styles) {\n      styles.forEach((s) => {\n        if (isLabelStyle(s)) {\n          if (styleClass?.textStyles) {\n            styleClass.textStyles.push(s);\n          } else {\n            styleClass.textStyles = [s];\n          }\n        }\n        if (styleClass?.styles) {\n          styleClass.styles.push(s);\n        } else {\n          styleClass.styles = [s];\n        }\n      });\n    }\n    this.classes.set(id, styleClass);\n  }\n  getClasses() {\n    return this.classes;\n  }\n  getStylesForClass(classSelector) {\n    return this.classes.get(classSelector)?.styles ?? [];\n  }\n  clear() {\n    clear();\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.root = void 0;\n  }\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast, db) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  // @ts-expect-error - TreeMapDB is not assignable to DiagramDB\n  parser: { yy: void 0 },\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      const db = parser.parser?.yy;\n      if (!(db instanceof TreeMapDB)) {\n        throw new Error(\n          \"parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.\"\n        );\n      }\n      populate(ast, db);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  get db() {\n    return new TreeMapDB();\n  },\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n","import {\n  __name\n} from \"./chunk-VIW5F6AA.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  __name,\n  configureSvgSize,\n  log\n} from \"./chunk-VIW5F6AA.mjs\";\n\n// src/rendering-util/setupViewPortForSVG.ts\nvar setupViewPortForSVG = /* @__PURE__ */ __name((svg, padding, cssDiagram, useMaxWidth) => {\n  svg.attr(\"class\", cssDiagram);\n  const { width, height, x, y } = calculateDimensionsWithPadding(svg, padding);\n  configureSvgSize(svg, height, width, useMaxWidth);\n  const viewBox = createViewBox(x, y, width, height, padding);\n  svg.attr(\"viewBox\", viewBox);\n  log.debug(`viewBox configured: ${viewBox} with padding: ${padding}`);\n}, \"setupViewPortForSVG\");\nvar calculateDimensionsWithPadding = /* @__PURE__ */ __name((svg, padding) => {\n  const bounds = svg.node()?.getBBox() || { width: 0, height: 0, x: 0, y: 0 };\n  return {\n    width: bounds.width + padding * 2,\n    height: bounds.height + padding * 2,\n    x: bounds.x,\n    y: bounds.y\n  };\n}, \"calculateDimensionsWithPadding\");\nvar createViewBox = /* @__PURE__ */ __name((x, y, width, height, padding) => {\n  return `${x - padding} ${y - padding} ${width} ${height}`;\n}, \"createViewBox\");\n\nexport {\n  setupViewPortForSVG\n};\n"],"names":["TreeMapDB","_Class","constructor","this","nodes","levels","Map","outerNodes","classes","setAccTitle","getAccTitle","setDiagramTitle","getDiagramTitle","getAccDescription","setAccDescription","getNodes","getConfig","_userConfig$treemap","defaultConfig","defaultConfig_default","userConfig","cleanAndMerge","_objectSpread","treemap","addNode","node","level","_this$root","push","set","root","getRoot","name","children","addClass","id","_style","_this$classes$get","styleClass","get","styles","textStyles","replace","split","forEach","s","isLabelStyle","getClasses","getStylesForClass","classSelector","_this$classes$get$sty","_this$classes$get2","clear","__name","buildHierarchy","items","length","stack","item","type","cssCompiledStyles","value","pop","parent","populate","ast","db","populateCommonDb","row","_ast$TreemapRows","TreemapRows","_row$className","_row$styleText","$type","className","styleText","_ast$TreemapRows2","indent","parseInt","getItemName","join","itemData","hierarchyNodes","addNodesRecursively","String","parser","yy","parse","async","_parser$parser","parseFunc","text","log","debug","Error","error","SECTION_INNER_PADDING","renderer","draw","_text","_version","diagram2","_config$padding","_config$diagramPaddin","treemapDb","config","treemapInnerPadding","padding","title","themeVariables","titleHeight","svg","selectSvgElement","width","nodeWidth","height","nodeHeight","svgWidth","svgHeight","valueFormat","attr","concat","configureSvgSize","useMaxWidth","formatStr","format","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","scaleOrdinal","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","hierarchy","sum","d","_d$value","sort","a","b","_b$value","_a$value","treemapData","size","paddingTop","SECTION_HEADER_HEIGHT","paddingInner","paddingLeft","paddingRight","paddingBottom","round","treemapLayout","branchNodes","descendants","filter","sections","selectAll","data","enter","x0","y0","x1","depth","_d","i","Math","max","y1","styles2String","nodeStyles","borderStyles","labelStyles","each","self","select","originalText","totalHeaderWidth","spaceForTextContent","showValues","actualAvailableWidth","textNode","getComputedTextLength","ellipsis","currentTruncatedText","leafNodes","leaves","cell","availableWidth","availableHeight","style","currentLabelFontSize","prospectiveValueFontSize","min","combinedHeight","valueTextElement","parentCellNode","parentNode","labelElement","empty","finalLabelFontSize","parseFloat","actualValueFontSize","valueTopActualY","maxValueBottomY","availableWidthForValue","diagramPadding","setupViewPortForSVG","diagramObj","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","styles_default","treemap2","arguments","undefined","options","diagram","_db$setAccDescription","_db$setAccTitle","_db$setDiagramTitle","accDescr","call","accTitle","cssDiagram","x","y","calculateDimensionsWithPadding","viewBox","createViewBox","_svg$node","bounds","getBBox"],"sourceRoot":""}