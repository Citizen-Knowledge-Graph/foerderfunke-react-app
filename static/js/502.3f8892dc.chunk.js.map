{"version":3,"file":"static/js/502.3f8892dc.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-CY4NQLBY.mjs","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-2EOCH6SN.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-QKX3RCWE.mjs","../node_modules/lodash-es/map.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/lodash-es/_baseExtremum.js","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/toInteger.js","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-OKEFYU3C.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-K7TBWW4H.mjs","../node_modules/langium/src/parser/token-builder.ts","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/last.js","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/langium/src/utils/stream.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-YDWR4PMV.mjs","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-SI5TIVW2.mjs","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-ORCS5NZH.mjs","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/clone.js","../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/lodash-es/flatten.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/defaults.js","../node_modules/langium/src/dependency-injection.ts"],"sourcesContent":["import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\r\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\r\n\r\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\r\n\r\nconst regexpParser = new RegExpParser();\r\n\r\n/**\r\n * This class is in charge of heuristically identifying start/end tokens of terminals.\r\n *\r\n * The way this works is by doing the following:\r\n * 1. Traverse the regular expression in the \"start state\"\r\n * 2. Add any encountered sets/single characters to the \"start regexp\"\r\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\r\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\r\n * 5. If we re-encounter any variable-length content we reset the end stack\r\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\r\n *\r\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\r\n */\r\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\r\n\r\n    private isStarting = true;\r\n    startRegexp: string;\r\n    private endRegexpStack: string[] = [];\r\n    multiline = false;\r\n    regex: string;\r\n\r\n    get endRegex(): string {\r\n        return this.endRegexpStack.join('');\r\n    }\r\n\r\n    reset(regex: string): void {\r\n        this.multiline = false;\r\n        this.regex = regex;\r\n        this.startRegexp = '';\r\n        this.isStarting = true;\r\n        this.endRegexpStack = [];\r\n    }\r\n\r\n    override visitGroup(node: Group) {\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        }\r\n    }\r\n\r\n    override visitCharacter(node: Character): void {\r\n        const char = String.fromCharCode(node.value);\r\n        if (!this.multiline && char === '\\n') {\r\n            this.multiline = true;\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const escapedChar = escapeRegExp(char);\r\n            this.endRegexpStack.push(escapedChar);\r\n            if (this.isStarting) {\r\n                this.startRegexp += escapedChar;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitSet(node: Set): void {\r\n        if (!this.multiline) {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            const regex = new RegExp(set);\r\n            this.multiline = Boolean('\\n'.match(regex));\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            this.endRegexpStack.push(set);\r\n            if (this.isStarting) {\r\n                this.startRegexp += set;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitChildren(node: IRegExpAST): void {\r\n        if (node.type === 'Group') {\r\n            // Ignore children of groups with quantifier (+/*/?)\r\n            // These groups are unrelated to start/end tokens of terminals\r\n            const group = node as Group;\r\n            if (group.quantifier) {\r\n                return;\r\n            }\r\n        }\r\n        super.visitChildren(node);\r\n    }\r\n}\r\n\r\nconst visitor = new TerminalRegExpVisitor();\r\n\r\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\r\n    try {\r\n        if (typeof regexp !== 'string') {\r\n            regexp = regexp.source;\r\n        }\r\n        regexp = `/${regexp}/`;\r\n        const pattern = regexpParser.pattern(regexp);\r\n        const parts: Array<{ start: string, end: string }> = [];\r\n        for (const alternative of pattern.value.value) {\r\n            visitor.reset(regexp);\r\n            visitor.visit(alternative);\r\n            parts.push({\r\n                start: visitor.startRegexp,\r\n                end: visitor.endRegex\r\n            });\r\n        }\r\n        return parts;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function isMultilineComment(regexp: RegExp | string): boolean {\r\n    try {\r\n        if (typeof regexp === 'string') {\r\n            regexp = new RegExp(regexp);\r\n        }\r\n        regexp = regexp.toString();\r\n        visitor.reset(regexp);\r\n        // Parsing the pattern might fail (since it's user code)\r\n        visitor.visit(regexpParser.pattern(regexp));\r\n        return visitor.multiline;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\r\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\r\n */\r\nexport const whitespaceCharacters = (\r\n    '\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\r\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\r\n\r\nexport function isWhitespace(value: RegExp | string): boolean {\r\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\r\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\r\n}\r\n\r\nexport function escapeRegExp(value: string): string {\r\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport function getCaseInsensitivePattern(keyword: string): string {\r\n    return Array.prototype.map.call(keyword, letter =>\r\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\r\n    ).join('');\r\n}\r\n\r\n/**\r\n * Determines whether the given input has a partial match with the specified regex.\r\n * @param regex The regex to partially match against\r\n * @param input The input string\r\n * @returns Whether any match exists.\r\n */\r\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\r\n    const partial = partialRegExp(regex);\r\n    const match = input.match(partial);\r\n    return !!match && match[0].length > 0;\r\n}\r\n\r\n/**\r\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\r\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\r\n * @param regex The input regex to be converted.\r\n * @returns A partial regex constructed from the input regex.\r\n */\r\nexport function partialRegExp(regex: RegExp | string): RegExp {\r\n    if (typeof regex === 'string') {\r\n        regex = new RegExp(regex);\r\n    }\r\n    const re = regex, source = regex.source;\r\n    let i = 0;\r\n\r\n    function process() {\r\n        let result = '',\r\n            tmp;\r\n\r\n        function appendRaw(nbChars: number) {\r\n            result += source.substr(i, nbChars);\r\n            i += nbChars;\r\n        }\r\n\r\n        function appendOptional(nbChars: number) {\r\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\r\n            i += nbChars;\r\n        }\r\n\r\n        while (i < source.length) {\r\n            switch (source[i]) {\r\n                case '\\\\':\r\n                    switch (source[i + 1]) {\r\n                        case 'c':\r\n                            appendOptional(3);\r\n                            break;\r\n                        case 'x':\r\n                            appendOptional(4);\r\n                            break;\r\n                        case 'u':\r\n                            if (re.unicode) {\r\n                                if (source[i + 2] === '{') {\r\n                                    appendOptional(source.indexOf('}', i) - i + 1);\r\n                                } else {\r\n                                    appendOptional(6);\r\n                                }\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'p':\r\n                        case 'P':\r\n                            if (re.unicode) {\r\n                                appendOptional(source.indexOf('}', i) - i + 1);\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'k':\r\n                            appendOptional(source.indexOf('>', i) - i + 1);\r\n                            break;\r\n                        default:\r\n                            appendOptional(2);\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                case '[':\r\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source) || [];\r\n                    appendOptional(tmp[0].length);\r\n                    break;\r\n\r\n                case '|':\r\n                case '^':\r\n                case '$':\r\n                case '*':\r\n                case '+':\r\n                case '?':\r\n                    appendRaw(1);\r\n                    break;\r\n                case '{':\r\n                    tmp = /\\{\\d+,?\\d*\\}/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source);\r\n                    if (tmp) {\r\n                        appendRaw(tmp[0].length);\r\n                    } else {\r\n                        appendOptional(1);\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    if (source[i + 1] === '?') {\r\n                        switch (source[i + 2]) {\r\n                            case ':':\r\n                                result += '(?:';\r\n                                i += 3;\r\n                                result += process() + '|$)';\r\n                                break;\r\n                            case '=':\r\n                                result += '(?=';\r\n                                i += 3;\r\n                                result += process() + ')';\r\n                                break;\r\n                            case '!':\r\n                                tmp = i;\r\n                                i += 3;\r\n                                process();\r\n                                result += source.substr(tmp, i - tmp);\r\n                                break;\r\n                            case '<':\r\n                                switch (source[i + 3]) {\r\n                                    case '=':\r\n                                    case '!':\r\n                                        tmp = i;\r\n                                        i += 4;\r\n                                        process();\r\n                                        result += source.substr(tmp, i - tmp);\r\n                                        break;\r\n                                    default:\r\n                                        appendRaw(source.indexOf('>', i) - i + 1);\r\n                                        result += process() + '|$)';\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        appendRaw(1);\r\n                        result += process() + '|$)';\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    ++i;\r\n                    return result;\r\n                default:\r\n                    appendOptional(1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return new RegExp(process(), regex.flags);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { assertUnreachable } from '../utils/errors.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { isCompositeCstNode } from '../syntax-tree.js';\r\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\r\nimport { streamCst } from './cst-utils.js';\r\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\r\n\r\n/**\r\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\r\n * the result is `undefined`.\r\n */\r\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\r\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\r\n}\r\n\r\n/**\r\n * Returns all hidden terminal rules of the given grammar, if any.\r\n */\r\nexport function getHiddenRules(grammar: ast.Grammar) {\r\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\r\n}\r\n\r\n/**\r\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\r\n *\r\n * @param grammar The grammar that contains all rules\r\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\r\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\r\n *      this function returns all rules of the specified grammar.\r\n */\r\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\r\n    const ruleNames = new Set<string>();\r\n    const entryRule = getEntryRule(grammar);\r\n    if (!entryRule) {\r\n        return new Set(grammar.rules);\r\n    }\r\n\r\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\r\n    for (const rule of topMostRules) {\r\n        ruleDfs(rule, ruleNames, allTerminals);\r\n    }\r\n\r\n    const rules = new Set<ast.AbstractRule>();\r\n    for (const rule of grammar.rules) {\r\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\r\n            rules.add(rule);\r\n        }\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\r\n    visitedSet.add(rule.name);\r\n    streamAllContents(rule).forEach(node => {\r\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\r\n            const refRule = node.rule.ref;\r\n            if (refRule && !visitedSet.has(refRule.name)) {\r\n                ruleDfs(refRule, visitedSet, allTerminals);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\r\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\r\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\r\n *\r\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\r\n * and cannot be inferred.\r\n */\r\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\r\n    if (crossRef.terminal) {\r\n        return crossRef.terminal;\r\n    } else if (crossRef.type.ref) {\r\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\r\n        return nameAssigment?.terminal;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\r\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\r\n * that contains visible characters is considered a comment.\r\n */\r\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\r\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that contribute to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\r\n */\r\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\r\n    if (!node || !property) {\r\n        return [];\r\n    }\r\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that contributes to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\r\n    if (!node || !property) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\r\n    if (!first) {\r\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\r\n        if (nodeFeature && nodeFeature.feature === property) {\r\n            return [node];\r\n        }\r\n    }\r\n    if (isCompositeCstNode(node) && node.astNode === element) {\r\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that correspond to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\r\n * @param keyword A keyword as specified in the grammar.\r\n */\r\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\r\n    if (!node) {\r\n        return [];\r\n    }\r\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that corresponds to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\r\n * @param keyword A keyword as specified in the grammar.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\r\n    if (node.astNode !== element) {\r\n        return [];\r\n    }\r\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\r\n        return [node];\r\n    }\r\n    const treeIterator = streamCst(node).iterator();\r\n    let result: IteratorResult<CstNode>;\r\n    const keywordNodes: CstNode[] = [];\r\n    do {\r\n        result = treeIterator.next();\r\n        if (!result.done) {\r\n            const childNode = result.value;\r\n            if (childNode.astNode === element) {\r\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\r\n                    keywordNodes.push(childNode);\r\n                }\r\n            } else {\r\n                treeIterator.prune();\r\n            }\r\n        }\r\n    } while (!result.done);\r\n    return keywordNodes;\r\n}\r\n\r\n/**\r\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\r\n * node is returned. If no assignment is found, the result is `undefined`.\r\n *\r\n * @param cstNode A CST node for which to find a property assignment.\r\n */\r\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\r\n    const astNode = cstNode.astNode;\r\n    // Only search until the ast node of the parent cst node is no longer the original ast node\r\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\r\n    while (astNode === cstNode.container?.astNode) {\r\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\r\n        if (assignment) {\r\n            return assignment;\r\n        }\r\n        cstNode = cstNode.container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\r\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\r\n * this function returns `undefined`.\r\n */\r\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\r\n    let startNode: AstNode = type;\r\n    if (ast.isInferredType(startNode)) {\r\n        // for inferred types, the location to start searching for the name-assignment is different\r\n        if (ast.isAction(startNode.$container)) {\r\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\r\n            startNode = startNode.$container.$container!;\r\n        } else if (ast.isParserRule(startNode.$container)) {\r\n            // investigate the parser rule with the explicitly inferred type\r\n            startNode = startNode.$container;\r\n        } else {\r\n            assertUnreachable(startNode.$container);\r\n        }\r\n    }\r\n    return findNameAssignmentInternal(type, startNode, new Map());\r\n}\r\n\r\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\r\n    // the cache is only required to prevent infinite loops\r\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\r\n        let childAssignment: ast.Assignment | undefined = undefined;\r\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\r\n        // No parent assignment implies unassigned rule call\r\n        if (!parentAssignment) {\r\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\r\n        }\r\n        cache.set(type, childAssignment);\r\n        return childAssignment;\r\n    }\r\n\r\n    if (cache.has(type)) {\r\n        return cache.get(type);\r\n    }\r\n    cache.set(type, undefined);\r\n    for (const node of streamAllContents(startNode)) {\r\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\r\n            cache.set(type, node);\r\n            return node;\r\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\r\n            return go(node, node.rule.ref);\r\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\r\n            return go(node, node.typeRef.ref);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\r\n    const parent = element.$container;\r\n    if (ast.isGroup(parent)) {\r\n        const elements = parent.elements;\r\n        const index = elements.indexOf(element);\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            const item = elements[i];\r\n            if (ast.isAction(item)) {\r\n                return item;\r\n            } else {\r\n                const action = streamAllContents(elements[i]).find(ast.isAction);\r\n                if (action) {\r\n                    return action;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ast.isAbstractElement(parent)) {\r\n        return getActionAtElement(parent);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type Cardinality = '?' | '*' | '+' | undefined;\r\nexport type Operator = '=' | '+=' | '?=' | undefined;\r\n\r\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\r\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\r\n}\r\n\r\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\r\n    return cardinality === '*' || cardinality === '+';\r\n}\r\n\r\nexport function isArrayOperator(operator?: Operator): boolean {\r\n    return operator === '+=';\r\n}\r\n\r\n/**\r\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\r\n * primitive return type like `number`, `boolean`, etc.\r\n */\r\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\r\n    return isDataTypeRuleInternal(rule, new Set());\r\n}\r\n\r\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\r\n    if (visited.has(rule)) {\r\n        return true;\r\n    } else {\r\n        visited.add(rule);\r\n    }\r\n    for (const node of streamAllContents(rule)) {\r\n        if (ast.isRuleCall(node)) {\r\n            if (!node.rule.ref) {\r\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\r\n                return false;\r\n            }\r\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\r\n                return false;\r\n            }\r\n        } else if (ast.isAssignment(node)) {\r\n            return false;\r\n        } else if (ast.isAction(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return Boolean(rule.definition);\r\n}\r\n\r\nexport function isDataType(type: ast.Type): boolean {\r\n    return isDataTypeInternal(type.type, new Set());\r\n}\r\n\r\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\r\n    if (visited.has(type)) {\r\n        return true;\r\n    } else {\r\n        visited.add(type);\r\n    }\r\n    if (ast.isArrayType(type)) {\r\n        return false;\r\n    } else if (ast.isReferenceType(type)) {\r\n        return false;\r\n    } else if (ast.isUnionType(type)) {\r\n        return type.types.every(e => isDataTypeInternal(e, visited));\r\n    } else if (ast.isSimpleType(type)) {\r\n        if (type.primitiveType !== undefined) {\r\n            return true;\r\n        } else if (type.stringType !== undefined) {\r\n            return true;\r\n        } else if (type.typeRef !== undefined) {\r\n            const ref = type.typeRef.ref;\r\n            if (ast.isType(ref)) {\r\n                return isDataTypeInternal(ref.type, visited);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\r\n    if (rule.inferredType) {\r\n        return rule.inferredType.name;\r\n    } else if (rule.dataType) {\r\n        return rule.dataType;\r\n    } else if (rule.returnType) {\r\n        const refType = rule.returnType.ref;\r\n        if (refType) {\r\n            // check if we need to check Action as return type\r\n            if (ast.isParserRule(refType)) {\r\n                return refType.name;\r\n            } else if (ast.isInterface(refType) || ast.isType(refType)) {\r\n                return refType.name;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\r\n    if (ast.isParserRule(type)) {\r\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\r\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\r\n        return type.name;\r\n    } else if (ast.isAction(type)) {\r\n        const actionType = getActionType(type);\r\n        if (actionType) {\r\n            return actionType;\r\n        }\r\n    } else if (ast.isInferredType(type)) {\r\n        return type.name;\r\n    }\r\n    throw new Error('Cannot get name of Unknown Type');\r\n}\r\n\r\nexport function getActionType(action: ast.Action): string | undefined {\r\n    if (action.inferredType) {\r\n        return action.inferredType.name;\r\n    } else if (action.type?.ref) {\r\n        return getTypeName(action.type.ref);\r\n    }\r\n    return undefined; // not inferring and not referencing a valid type\r\n}\r\n\r\n/**\r\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\r\n * For data type rules, the name of the rule is returned,\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\r\n * @param rule the given rule\r\n * @returns the name of the AST node type of the rule\r\n */\r\nexport function getRuleTypeName(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\n/**\r\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\r\n * For data type rules, the name of the declared return type of the rule is returned (if any),\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\r\n * @param rule the given rule\r\n * @returns the name of the type of the produced values of the rule at runtime\r\n */\r\nexport function getRuleType(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\r\n    const flags: Flags = {\r\n        s: false,\r\n        i: false,\r\n        u: false\r\n    };\r\n    const source = abstractElementToRegex(terminalRule.definition, flags);\r\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\r\n    return new RegExp(source, flagText);\r\n}\r\n\r\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\r\nconst WILDCARD = /[\\s\\S]/.source;\r\n\r\ntype Flags = {\r\n    s: boolean;\r\n    i: boolean;\r\n    u: boolean;\r\n}\r\n\r\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\r\n    if (ast.isTerminalAlternatives(element)) {\r\n        return terminalAlternativesToRegex(element);\r\n    } else if (ast.isTerminalGroup(element)) {\r\n        return terminalGroupToRegex(element);\r\n    } else if (ast.isCharacterRange(element)) {\r\n        return characterRangeToRegex(element);\r\n    } else if (ast.isTerminalRuleCall(element)) {\r\n        const rule = element.rule.ref;\r\n        if (!rule) {\r\n            throw new Error('Missing rule reference.');\r\n        }\r\n        return withCardinality(abstractElementToRegex(rule.definition), {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else if (ast.isNegatedToken(element)) {\r\n        return negateTokenToRegex(element);\r\n    } else if (ast.isUntilToken(element)) {\r\n        return untilTokenToRegex(element);\r\n    } else if (ast.isRegexToken(element)) {\r\n        const lastSlash = element.regex.lastIndexOf('/');\r\n        const source = element.regex.substring(1, lastSlash);\r\n        const regexFlags = element.regex.substring(lastSlash + 1);\r\n        if (flags) {\r\n            flags.i = regexFlags.includes('i');\r\n            flags.s = regexFlags.includes('s');\r\n            flags.u = regexFlags.includes('u');\r\n        }\r\n        return withCardinality(source, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead,\r\n            wrap: false\r\n        });\r\n    } else if (ast.isWildcard(element)) {\r\n        return withCardinality(WILDCARD, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else {\r\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\r\n    }\r\n}\r\n\r\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\r\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\r\n        cardinality: alternatives.cardinality,\r\n        lookahead: alternatives.lookahead\r\n    });\r\n}\r\n\r\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\r\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\r\n        cardinality: group.cardinality,\r\n        lookahead: group.lookahead\r\n    });\r\n}\r\n\r\nfunction untilTokenToRegex(until: ast.UntilToken): string {\r\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\r\n        cardinality: until.cardinality,\r\n        lookahead: until.lookahead\r\n    });\r\n}\r\n\r\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\r\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\r\n        cardinality: negate.cardinality,\r\n        lookahead: negate.lookahead\r\n    });\r\n}\r\n\r\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\r\n    if (range.right) {\r\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\r\n            cardinality: range.cardinality,\r\n            lookahead: range.lookahead,\r\n            wrap: false\r\n        });\r\n    }\r\n    return withCardinality(keywordToRegex(range.left), {\r\n        cardinality: range.cardinality,\r\n        lookahead: range.lookahead,\r\n        wrap: false\r\n    });\r\n}\r\n\r\nfunction keywordToRegex(keyword: ast.Keyword): string {\r\n    return escapeRegExp(keyword.value);\r\n}\r\n\r\nfunction withCardinality(regex: string, options: {\r\n    cardinality?: string\r\n    wrap?: boolean\r\n    lookahead?: string\r\n}): string {\r\n    if (options.wrap !== false || options.lookahead) {\r\n        regex = `(${options.lookahead ?? ''}${regex})`;\r\n    }\r\n    if (options.cardinality) {\r\n        return `${regex}${options.cardinality}`;\r\n    }\r\n    return regex;\r\n}\r\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  TreemapGeneratedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/treemap/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      TreemapDoc: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 && // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */ __name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Treemap = inject(\n    createDefaultCoreModule({ shared }),\n    TreemapGeneratedModule,\n    TreemapModule\n  );\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return { shared, Treemap };\n}\n__name(createTreemapServices, \"createTreemapServices\");\n\nexport {\n  TreemapModule,\n  createTreemapServices\n};\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.3.0.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\r\nimport { AbstractAstReflection } from '../../syntax-tree.js';\r\n\r\nexport const LangiumGrammarTerminals = {\r\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\r\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\r\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\r\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\r\n    WS: /\\s+/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type LangiumGrammarTerminalNames = keyof typeof LangiumGrammarTerminals;\r\n\r\nexport type LangiumGrammarKeywordNames = \r\n    | \"!\"\r\n    | \"&\"\r\n    | \"(\"\r\n    | \")\"\r\n    | \"*\"\r\n    | \"+\"\r\n    | \"+=\"\r\n    | \",\"\r\n    | \"->\"\r\n    | \".\"\r\n    | \"..\"\r\n    | \":\"\r\n    | \";\"\r\n    | \"<\"\r\n    | \"=\"\r\n    | \"=>\"\r\n    | \">\"\r\n    | \"?\"\r\n    | \"?!\"\r\n    | \"?<!\"\r\n    | \"?<=\"\r\n    | \"?=\"\r\n    | \"@\"\r\n    | \"Date\"\r\n    | \"EOF\"\r\n    | \"[\"\r\n    | \"]\"\r\n    | \"bigint\"\r\n    | \"boolean\"\r\n    | \"current\"\r\n    | \"entry\"\r\n    | \"extends\"\r\n    | \"false\"\r\n    | \"fragment\"\r\n    | \"grammar\"\r\n    | \"hidden\"\r\n    | \"import\"\r\n    | \"infer\"\r\n    | \"infers\"\r\n    | \"interface\"\r\n    | \"number\"\r\n    | \"returns\"\r\n    | \"string\"\r\n    | \"terminal\"\r\n    | \"true\"\r\n    | \"type\"\r\n    | \"with\"\r\n    | \"{\"\r\n    | \"|\"\r\n    | \"}\";\r\n\r\nexport type LangiumGrammarTokenNames = LangiumGrammarTerminalNames | LangiumGrammarKeywordNames;\r\n\r\nexport type AbstractRule = ParserRule | TerminalRule;\r\n\r\nexport const AbstractRule = 'AbstractRule';\r\n\r\nexport function isAbstractRule(item: unknown): item is AbstractRule {\r\n    return reflection.isInstance(item, AbstractRule);\r\n}\r\n\r\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\r\n\r\nexport const AbstractType = 'AbstractType';\r\n\r\nexport function isAbstractType(item: unknown): item is AbstractType {\r\n    return reflection.isInstance(item, AbstractType);\r\n}\r\n\r\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\r\n\r\nexport const Condition = 'Condition';\r\n\r\nexport function isCondition(item: unknown): item is Condition {\r\n    return reflection.isInstance(item, Condition);\r\n}\r\n\r\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\r\n\r\nexport function isFeatureName(item: unknown): item is FeatureName {\r\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\r\n}\r\n\r\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\r\n\r\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\r\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\r\n}\r\n\r\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\r\n\r\nexport const TypeDefinition = 'TypeDefinition';\r\n\r\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\r\n    return reflection.isInstance(item, TypeDefinition);\r\n}\r\n\r\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\r\n\r\nexport const ValueLiteral = 'ValueLiteral';\r\n\r\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\r\n    return reflection.isInstance(item, ValueLiteral);\r\n}\r\n\r\nexport interface AbstractElement extends AstNode {\r\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\r\n    cardinality?: '*' | '+' | '?';\r\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\r\n}\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport interface ArrayLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'ArrayLiteral';\r\n    elements: Array<ValueLiteral>;\r\n}\r\n\r\nexport const ArrayLiteral = 'ArrayLiteral';\r\n\r\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\r\n    return reflection.isInstance(item, ArrayLiteral);\r\n}\r\n\r\nexport interface ArrayType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ArrayType';\r\n    elementType: TypeDefinition;\r\n}\r\n\r\nexport const ArrayType = 'ArrayType';\r\n\r\nexport function isArrayType(item: unknown): item is ArrayType {\r\n    return reflection.isInstance(item, ArrayType);\r\n}\r\n\r\nexport interface BooleanLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\r\n    readonly $type: 'BooleanLiteral';\r\n    true: boolean;\r\n}\r\n\r\nexport const BooleanLiteral = 'BooleanLiteral';\r\n\r\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\r\n    return reflection.isInstance(item, BooleanLiteral);\r\n}\r\n\r\nexport interface Conjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Conjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Conjunction = 'Conjunction';\r\n\r\nexport function isConjunction(item: unknown): item is Conjunction {\r\n    return reflection.isInstance(item, Conjunction);\r\n}\r\n\r\nexport interface Disjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Disjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Disjunction = 'Disjunction';\r\n\r\nexport function isDisjunction(item: unknown): item is Disjunction {\r\n    return reflection.isInstance(item, Disjunction);\r\n}\r\n\r\nexport interface Grammar extends AstNode {\r\n    readonly $type: 'Grammar';\r\n    definesHiddenTokens: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    imports: Array<GrammarImport>;\r\n    interfaces: Array<Interface>;\r\n    isDeclared: boolean;\r\n    name?: string;\r\n    rules: Array<AbstractRule>;\r\n    types: Array<Type>;\r\n    usedGrammars: Array<Reference<Grammar>>;\r\n}\r\n\r\nexport const Grammar = 'Grammar';\r\n\r\nexport function isGrammar(item: unknown): item is Grammar {\r\n    return reflection.isInstance(item, Grammar);\r\n}\r\n\r\nexport interface GrammarImport extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'GrammarImport';\r\n    path: string;\r\n}\r\n\r\nexport const GrammarImport = 'GrammarImport';\r\n\r\nexport function isGrammarImport(item: unknown): item is GrammarImport {\r\n    return reflection.isInstance(item, GrammarImport);\r\n}\r\n\r\nexport interface InferredType extends AstNode {\r\n    readonly $container: Action | ParserRule;\r\n    readonly $type: 'InferredType';\r\n    name: string;\r\n}\r\n\r\nexport const InferredType = 'InferredType';\r\n\r\nexport function isInferredType(item: unknown): item is InferredType {\r\n    return reflection.isInstance(item, InferredType);\r\n}\r\n\r\nexport interface Interface extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Interface';\r\n    attributes: Array<TypeAttribute>;\r\n    name: string;\r\n    superTypes: Array<Reference<AbstractType>>;\r\n}\r\n\r\nexport const Interface = 'Interface';\r\n\r\nexport function isInterface(item: unknown): item is Interface {\r\n    return reflection.isInstance(item, Interface);\r\n}\r\n\r\nexport interface NamedArgument extends AstNode {\r\n    readonly $container: RuleCall;\r\n    readonly $type: 'NamedArgument';\r\n    calledByName: boolean;\r\n    parameter?: Reference<Parameter>;\r\n    value: Condition;\r\n}\r\n\r\nexport const NamedArgument = 'NamedArgument';\r\n\r\nexport function isNamedArgument(item: unknown): item is NamedArgument {\r\n    return reflection.isInstance(item, NamedArgument);\r\n}\r\n\r\nexport interface Negation extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Negation';\r\n    value: Condition;\r\n}\r\n\r\nexport const Negation = 'Negation';\r\n\r\nexport function isNegation(item: unknown): item is Negation {\r\n    return reflection.isInstance(item, Negation);\r\n}\r\n\r\nexport interface NumberLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'NumberLiteral';\r\n    value: number;\r\n}\r\n\r\nexport const NumberLiteral = 'NumberLiteral';\r\n\r\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\r\n    return reflection.isInstance(item, NumberLiteral);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: ParserRule;\r\n    readonly $type: 'Parameter';\r\n    name: string;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface ParameterReference extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'ParameterReference';\r\n    parameter: Reference<Parameter>;\r\n}\r\n\r\nexport const ParameterReference = 'ParameterReference';\r\n\r\nexport function isParameterReference(item: unknown): item is ParameterReference {\r\n    return reflection.isInstance(item, ParameterReference);\r\n}\r\n\r\nexport interface ParserRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'ParserRule';\r\n    dataType?: PrimitiveType;\r\n    definesHiddenTokens: boolean;\r\n    definition: AbstractElement;\r\n    entry: boolean;\r\n    fragment: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    inferredType?: InferredType;\r\n    name: string;\r\n    parameters: Array<Parameter>;\r\n    returnType?: Reference<AbstractType>;\r\n    wildcard: boolean;\r\n}\r\n\r\nexport const ParserRule = 'ParserRule';\r\n\r\nexport function isParserRule(item: unknown): item is ParserRule {\r\n    return reflection.isInstance(item, ParserRule);\r\n}\r\n\r\nexport interface ReferenceType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ReferenceType';\r\n    referenceType: TypeDefinition;\r\n}\r\n\r\nexport const ReferenceType = 'ReferenceType';\r\n\r\nexport function isReferenceType(item: unknown): item is ReferenceType {\r\n    return reflection.isInstance(item, ReferenceType);\r\n}\r\n\r\nexport interface ReturnType extends AstNode {\r\n    readonly $container: TerminalRule;\r\n    readonly $type: 'ReturnType';\r\n    name: PrimitiveType | string;\r\n}\r\n\r\nexport const ReturnType = 'ReturnType';\r\n\r\nexport function isReturnType(item: unknown): item is ReturnType {\r\n    return reflection.isInstance(item, ReturnType);\r\n}\r\n\r\nexport interface SimpleType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'SimpleType';\r\n    primitiveType?: PrimitiveType;\r\n    stringType?: string;\r\n    typeRef?: Reference<AbstractType>;\r\n}\r\n\r\nexport const SimpleType = 'SimpleType';\r\n\r\nexport function isSimpleType(item: unknown): item is SimpleType {\r\n    return reflection.isInstance(item, SimpleType);\r\n}\r\n\r\nexport interface StringLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'StringLiteral';\r\n    value: string;\r\n}\r\n\r\nexport const StringLiteral = 'StringLiteral';\r\n\r\nexport function isStringLiteral(item: unknown): item is StringLiteral {\r\n    return reflection.isInstance(item, StringLiteral);\r\n}\r\n\r\nexport interface TerminalRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'TerminalRule';\r\n    definition: AbstractElement;\r\n    fragment: boolean;\r\n    hidden: boolean;\r\n    name: string;\r\n    type?: ReturnType;\r\n}\r\n\r\nexport const TerminalRule = 'TerminalRule';\r\n\r\nexport function isTerminalRule(item: unknown): item is TerminalRule {\r\n    return reflection.isInstance(item, TerminalRule);\r\n}\r\n\r\nexport interface Type extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Type';\r\n    name: string;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const Type = 'Type';\r\n\r\nexport function isType(item: unknown): item is Type {\r\n    return reflection.isInstance(item, Type);\r\n}\r\n\r\nexport interface TypeAttribute extends AstNode {\r\n    readonly $container: Interface;\r\n    readonly $type: 'TypeAttribute';\r\n    defaultValue?: ValueLiteral;\r\n    isOptional: boolean;\r\n    name: FeatureName;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const TypeAttribute = 'TypeAttribute';\r\n\r\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\r\n    return reflection.isInstance(item, TypeAttribute);\r\n}\r\n\r\nexport interface UnionType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'UnionType';\r\n    types: Array<TypeDefinition>;\r\n}\r\n\r\nexport const UnionType = 'UnionType';\r\n\r\nexport function isUnionType(item: unknown): item is UnionType {\r\n    return reflection.isInstance(item, UnionType);\r\n}\r\n\r\nexport interface Action extends AbstractElement {\r\n    readonly $type: 'Action';\r\n    feature?: FeatureName;\r\n    inferredType?: InferredType;\r\n    operator?: '+=' | '=';\r\n    type?: Reference<AbstractType>;\r\n}\r\n\r\nexport const Action = 'Action';\r\n\r\nexport function isAction(item: unknown): item is Action {\r\n    return reflection.isInstance(item, Action);\r\n}\r\n\r\nexport interface Alternatives extends AbstractElement {\r\n    readonly $type: 'Alternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const Alternatives = 'Alternatives';\r\n\r\nexport function isAlternatives(item: unknown): item is Alternatives {\r\n    return reflection.isInstance(item, Alternatives);\r\n}\r\n\r\nexport interface Assignment extends AbstractElement {\r\n    readonly $type: 'Assignment';\r\n    feature: FeatureName;\r\n    operator: '+=' | '=' | '?=';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const Assignment = 'Assignment';\r\n\r\nexport function isAssignment(item: unknown): item is Assignment {\r\n    return reflection.isInstance(item, Assignment);\r\n}\r\n\r\nexport interface CharacterRange extends AbstractElement {\r\n    readonly $type: 'CharacterRange';\r\n    left: Keyword;\r\n    right?: Keyword;\r\n}\r\n\r\nexport const CharacterRange = 'CharacterRange';\r\n\r\nexport function isCharacterRange(item: unknown): item is CharacterRange {\r\n    return reflection.isInstance(item, CharacterRange);\r\n}\r\n\r\nexport interface CrossReference extends AbstractElement {\r\n    readonly $type: 'CrossReference';\r\n    deprecatedSyntax: boolean;\r\n    terminal?: AbstractElement;\r\n    type: Reference<AbstractType>;\r\n}\r\n\r\nexport const CrossReference = 'CrossReference';\r\n\r\nexport function isCrossReference(item: unknown): item is CrossReference {\r\n    return reflection.isInstance(item, CrossReference);\r\n}\r\n\r\nexport interface EndOfFile extends AbstractElement {\r\n    readonly $type: 'EndOfFile';\r\n}\r\n\r\nexport const EndOfFile = 'EndOfFile';\r\n\r\nexport function isEndOfFile(item: unknown): item is EndOfFile {\r\n    return reflection.isInstance(item, EndOfFile);\r\n}\r\n\r\nexport interface Group extends AbstractElement {\r\n    readonly $type: 'Group';\r\n    elements: Array<AbstractElement>;\r\n    guardCondition?: Condition;\r\n}\r\n\r\nexport const Group = 'Group';\r\n\r\nexport function isGroup(item: unknown): item is Group {\r\n    return reflection.isInstance(item, Group);\r\n}\r\n\r\nexport interface Keyword extends AbstractElement {\r\n    readonly $container: CharacterRange;\r\n    readonly $type: 'Keyword';\r\n    value: string;\r\n}\r\n\r\nexport const Keyword = 'Keyword';\r\n\r\nexport function isKeyword(item: unknown): item is Keyword {\r\n    return reflection.isInstance(item, Keyword);\r\n}\r\n\r\nexport interface NegatedToken extends AbstractElement {\r\n    readonly $type: 'NegatedToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const NegatedToken = 'NegatedToken';\r\n\r\nexport function isNegatedToken(item: unknown): item is NegatedToken {\r\n    return reflection.isInstance(item, NegatedToken);\r\n}\r\n\r\nexport interface RegexToken extends AbstractElement {\r\n    readonly $type: 'RegexToken';\r\n    regex: string;\r\n}\r\n\r\nexport const RegexToken = 'RegexToken';\r\n\r\nexport function isRegexToken(item: unknown): item is RegexToken {\r\n    return reflection.isInstance(item, RegexToken);\r\n}\r\n\r\nexport interface RuleCall extends AbstractElement {\r\n    readonly $type: 'RuleCall';\r\n    arguments: Array<NamedArgument>;\r\n    rule: Reference<AbstractRule>;\r\n}\r\n\r\nexport const RuleCall = 'RuleCall';\r\n\r\nexport function isRuleCall(item: unknown): item is RuleCall {\r\n    return reflection.isInstance(item, RuleCall);\r\n}\r\n\r\nexport interface TerminalAlternatives extends AbstractElement {\r\n    readonly $type: 'TerminalAlternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalAlternatives = 'TerminalAlternatives';\r\n\r\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\r\n    return reflection.isInstance(item, TerminalAlternatives);\r\n}\r\n\r\nexport interface TerminalGroup extends AbstractElement {\r\n    readonly $type: 'TerminalGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalGroup = 'TerminalGroup';\r\n\r\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\r\n    return reflection.isInstance(item, TerminalGroup);\r\n}\r\n\r\nexport interface TerminalRuleCall extends AbstractElement {\r\n    readonly $type: 'TerminalRuleCall';\r\n    rule: Reference<TerminalRule>;\r\n}\r\n\r\nexport const TerminalRuleCall = 'TerminalRuleCall';\r\n\r\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\r\n    return reflection.isInstance(item, TerminalRuleCall);\r\n}\r\n\r\nexport interface UnorderedGroup extends AbstractElement {\r\n    readonly $type: 'UnorderedGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const UnorderedGroup = 'UnorderedGroup';\r\n\r\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\r\n    return reflection.isInstance(item, UnorderedGroup);\r\n}\r\n\r\nexport interface UntilToken extends AbstractElement {\r\n    readonly $type: 'UntilToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const UntilToken = 'UntilToken';\r\n\r\nexport function isUntilToken(item: unknown): item is UntilToken {\r\n    return reflection.isInstance(item, UntilToken);\r\n}\r\n\r\nexport interface Wildcard extends AbstractElement {\r\n    readonly $type: 'Wildcard';\r\n}\r\n\r\nexport const Wildcard = 'Wildcard';\r\n\r\nexport function isWildcard(item: unknown): item is Wildcard {\r\n    return reflection.isInstance(item, Wildcard);\r\n}\r\n\r\nexport type LangiumGrammarAstType = {\r\n    AbstractElement: AbstractElement\r\n    AbstractRule: AbstractRule\r\n    AbstractType: AbstractType\r\n    Action: Action\r\n    Alternatives: Alternatives\r\n    ArrayLiteral: ArrayLiteral\r\n    ArrayType: ArrayType\r\n    Assignment: Assignment\r\n    BooleanLiteral: BooleanLiteral\r\n    CharacterRange: CharacterRange\r\n    Condition: Condition\r\n    Conjunction: Conjunction\r\n    CrossReference: CrossReference\r\n    Disjunction: Disjunction\r\n    EndOfFile: EndOfFile\r\n    Grammar: Grammar\r\n    GrammarImport: GrammarImport\r\n    Group: Group\r\n    InferredType: InferredType\r\n    Interface: Interface\r\n    Keyword: Keyword\r\n    NamedArgument: NamedArgument\r\n    NegatedToken: NegatedToken\r\n    Negation: Negation\r\n    NumberLiteral: NumberLiteral\r\n    Parameter: Parameter\r\n    ParameterReference: ParameterReference\r\n    ParserRule: ParserRule\r\n    ReferenceType: ReferenceType\r\n    RegexToken: RegexToken\r\n    ReturnType: ReturnType\r\n    RuleCall: RuleCall\r\n    SimpleType: SimpleType\r\n    StringLiteral: StringLiteral\r\n    TerminalAlternatives: TerminalAlternatives\r\n    TerminalGroup: TerminalGroup\r\n    TerminalRule: TerminalRule\r\n    TerminalRuleCall: TerminalRuleCall\r\n    Type: Type\r\n    TypeAttribute: TypeAttribute\r\n    TypeDefinition: TypeDefinition\r\n    UnionType: UnionType\r\n    UnorderedGroup: UnorderedGroup\r\n    UntilToken: UntilToken\r\n    ValueLiteral: ValueLiteral\r\n    Wildcard: Wildcard\r\n}\r\n\r\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Action:\r\n            case Alternatives:\r\n            case Assignment:\r\n            case CharacterRange:\r\n            case CrossReference:\r\n            case EndOfFile:\r\n            case Group:\r\n            case Keyword:\r\n            case NegatedToken:\r\n            case RegexToken:\r\n            case RuleCall:\r\n            case TerminalAlternatives:\r\n            case TerminalGroup:\r\n            case TerminalRuleCall:\r\n            case UnorderedGroup:\r\n            case UntilToken:\r\n            case Wildcard: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ArrayLiteral:\r\n            case NumberLiteral:\r\n            case StringLiteral: {\r\n                return this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case ArrayType:\r\n            case ReferenceType:\r\n            case SimpleType:\r\n            case UnionType: {\r\n                return this.isSubtype(TypeDefinition, supertype);\r\n            }\r\n            case BooleanLiteral: {\r\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case Conjunction:\r\n            case Disjunction:\r\n            case Negation:\r\n            case ParameterReference: {\r\n                return this.isSubtype(Condition, supertype);\r\n            }\r\n            case InferredType:\r\n            case Interface:\r\n            case Type: {\r\n                return this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case ParserRule: {\r\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case TerminalRule: {\r\n                return this.isSubtype(AbstractRule, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Action:type':\r\n            case 'CrossReference:type':\r\n            case 'Interface:superTypes':\r\n            case 'ParserRule:returnType':\r\n            case 'SimpleType:typeRef': {\r\n                return AbstractType;\r\n            }\r\n            case 'Grammar:hiddenTokens':\r\n            case 'ParserRule:hiddenTokens':\r\n            case 'RuleCall:rule': {\r\n                return AbstractRule;\r\n            }\r\n            case 'Grammar:usedGrammars': {\r\n                return Grammar;\r\n            }\r\n            case 'NamedArgument:parameter':\r\n            case 'ParameterReference:parameter': {\r\n                return Parameter;\r\n            }\r\n            case 'TerminalRuleCall:rule': {\r\n                return TerminalRule;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case AbstractElement: {\r\n                return {\r\n                    name: AbstractElement,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayLiteral: {\r\n                return {\r\n                    name: ArrayLiteral,\r\n                    properties: [\r\n                        { name: 'elements', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayType: {\r\n                return {\r\n                    name: ArrayType,\r\n                    properties: [\r\n                        { name: 'elementType' }\r\n                    ]\r\n                };\r\n            }\r\n            case BooleanLiteral: {\r\n                return {\r\n                    name: BooleanLiteral,\r\n                    properties: [\r\n                        { name: 'true', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case Conjunction: {\r\n                return {\r\n                    name: Conjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Disjunction: {\r\n                return {\r\n                    name: Disjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Grammar: {\r\n                return {\r\n                    name: Grammar,\r\n                    properties: [\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'imports', defaultValue: [] },\r\n                        { name: 'interfaces', defaultValue: [] },\r\n                        { name: 'isDeclared', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'rules', defaultValue: [] },\r\n                        { name: 'types', defaultValue: [] },\r\n                        { name: 'usedGrammars', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case GrammarImport: {\r\n                return {\r\n                    name: GrammarImport,\r\n                    properties: [\r\n                        { name: 'path' }\r\n                    ]\r\n                };\r\n            }\r\n            case InferredType: {\r\n                return {\r\n                    name: InferredType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case Interface: {\r\n                return {\r\n                    name: Interface,\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'name' },\r\n                        { name: 'superTypes', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case NamedArgument: {\r\n                return {\r\n                    name: NamedArgument,\r\n                    properties: [\r\n                        { name: 'calledByName', defaultValue: false },\r\n                        { name: 'parameter' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Negation: {\r\n                return {\r\n                    name: Negation,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NumberLiteral: {\r\n                return {\r\n                    name: NumberLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Parameter: {\r\n                return {\r\n                    name: Parameter,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParameterReference: {\r\n                return {\r\n                    name: ParameterReference,\r\n                    properties: [\r\n                        { name: 'parameter' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParserRule: {\r\n                return {\r\n                    name: ParserRule,\r\n                    properties: [\r\n                        { name: 'dataType' },\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'definition' },\r\n                        { name: 'entry', defaultValue: false },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'inferredType' },\r\n                        { name: 'name' },\r\n                        { name: 'parameters', defaultValue: [] },\r\n                        { name: 'returnType' },\r\n                        { name: 'wildcard', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case ReferenceType: {\r\n                return {\r\n                    name: ReferenceType,\r\n                    properties: [\r\n                        { name: 'referenceType' }\r\n                    ]\r\n                };\r\n            }\r\n            case ReturnType: {\r\n                return {\r\n                    name: ReturnType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case SimpleType: {\r\n                return {\r\n                    name: SimpleType,\r\n                    properties: [\r\n                        { name: 'primitiveType' },\r\n                        { name: 'stringType' },\r\n                        { name: 'typeRef' }\r\n                    ]\r\n                };\r\n            }\r\n            case StringLiteral: {\r\n                return {\r\n                    name: StringLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRule: {\r\n                return {\r\n                    name: TerminalRule,\r\n                    properties: [\r\n                        { name: 'definition' },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hidden', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Type: {\r\n                return {\r\n                    name: Type,\r\n                    properties: [\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case TypeAttribute: {\r\n                return {\r\n                    name: TypeAttribute,\r\n                    properties: [\r\n                        { name: 'defaultValue' },\r\n                        { name: 'isOptional', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnionType: {\r\n                return {\r\n                    name: UnionType,\r\n                    properties: [\r\n                        { name: 'types', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case Action: {\r\n                return {\r\n                    name: Action,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'inferredType' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Alternatives: {\r\n                return {\r\n                    name: Alternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Assignment: {\r\n                return {\r\n                    name: Assignment,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case CharacterRange: {\r\n                return {\r\n                    name: CharacterRange,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'left' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case CrossReference: {\r\n                return {\r\n                    name: CrossReference,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'deprecatedSyntax', defaultValue: false },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case EndOfFile: {\r\n                return {\r\n                    name: EndOfFile,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Group: {\r\n                return {\r\n                    name: Group,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'guardCondition' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Keyword: {\r\n                return {\r\n                    name: Keyword,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NegatedToken: {\r\n                return {\r\n                    name: NegatedToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case RegexToken: {\r\n                return {\r\n                    name: RegexToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'regex' }\r\n                    ]\r\n                };\r\n            }\r\n            case RuleCall: {\r\n                return {\r\n                    name: RuleCall,\r\n                    properties: [\r\n                        { name: 'arguments', defaultValue: [] },\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalAlternatives: {\r\n                return {\r\n                    name: TerminalAlternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalGroup: {\r\n                return {\r\n                    name: TerminalGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRuleCall: {\r\n                return {\r\n                    name: TerminalRuleCall,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnorderedGroup: {\r\n                return {\r\n                    name: UnorderedGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case UntilToken: {\r\n                return {\r\n                    name: UntilToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case Wildcard: {\r\n                return {\r\n                    name: Wildcard,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new LangiumGrammarAstReflection();\r\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken, TokenType } from 'chevrotain';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AbstractElement } from '../languages/generated/ast.js';\r\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\r\nimport { Position } from 'vscode-languageserver-types';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\n\r\nexport class CstNodeBuilder {\r\n\r\n    private rootNode!: RootCstNodeImpl;\r\n    private nodeStack: CompositeCstNodeImpl[] = [];\r\n\r\n    get current(): CompositeCstNodeImpl {\r\n        return this.nodeStack[this.nodeStack.length - 1] ?? this.rootNode;\r\n    }\r\n\r\n    buildRootNode(input: string): RootCstNode {\r\n        this.rootNode = new RootCstNodeImpl(input);\r\n        this.rootNode.root = this.rootNode;\r\n        this.nodeStack = [this.rootNode];\r\n        return this.rootNode;\r\n    }\r\n\r\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\r\n        const compositeNode = new CompositeCstNodeImpl();\r\n        compositeNode.grammarSource = feature;\r\n        compositeNode.root = this.rootNode;\r\n        this.current.content.push(compositeNode);\r\n        this.nodeStack.push(compositeNode);\r\n        return compositeNode;\r\n    }\r\n\r\n    buildLeafNode(token: IToken, feature?: AbstractElement): LeafCstNode {\r\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\r\n        leafNode.grammarSource = feature;\r\n        leafNode.root = this.rootNode;\r\n        this.current.content.push(leafNode);\r\n        return leafNode;\r\n    }\r\n\r\n    removeNode(node: CstNode): void {\r\n        const parent = node.container;\r\n        if (parent) {\r\n            const index = parent.content.indexOf(node);\r\n            if (index >= 0) {\r\n                parent.content.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    addHiddenNodes(tokens: IToken[]): void {\r\n        const nodes: LeafCstNode[] = [];\r\n        for (const token of tokens) {\r\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\r\n            leafNode.root = this.rootNode;\r\n            nodes.push(leafNode);\r\n        }\r\n        let current: CompositeCstNode = this.current;\r\n        let added = false;\r\n        // If we are within a composite node, we add the hidden nodes to the content\r\n        if (current.content.length > 0) {\r\n            current.content.push(...nodes);\r\n            return;\r\n        }\r\n        // Otherwise we are at a newly created node\r\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\r\n        while (current.container) {\r\n            const index = current.container.content.indexOf(current);\r\n            if (index > 0) {\r\n                // Add the hidden nodes before the current node\r\n                current.container.content.splice(index, 0, ...nodes);\r\n                added = true;\r\n                break;\r\n            }\r\n            current = current.container;\r\n        }\r\n        // If we arrive at the root node, we add the hidden nodes at the beginning\r\n        // This is the case if the hidden nodes are the first nodes in the tree\r\n        if (!added) {\r\n            this.rootNode.content.unshift(...nodes);\r\n        }\r\n    }\r\n\r\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\r\n        const current: CstNode = this.current;\r\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\r\n        // Only if the $type is a string, we actually assign the element\r\n        if (typeof item.$type === 'string') {\r\n            this.current.astNode = <AstNode>item;\r\n        }\r\n        item.$cstNode = current;\r\n        const node = this.nodeStack.pop();\r\n        // Empty composite nodes are not valid\r\n        // Simply remove the node from the tree\r\n        if (node?.content.length === 0) {\r\n            this.removeNode(node);\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class AbstractCstNode implements CstNode {\r\n    abstract get offset(): number;\r\n    abstract get length(): number;\r\n    abstract get end(): number;\r\n    abstract get range(): Range;\r\n\r\n    container?: CompositeCstNode;\r\n    grammarSource?: AbstractElement;\r\n    root: RootCstNode;\r\n    private _astNode?: AstNode;\r\n\r\n    /** @deprecated use `container` instead. */\r\n    get parent(): CompositeCstNode | undefined {\r\n        return this.container;\r\n    }\r\n\r\n    /** @deprecated use `grammarSource` instead. */\r\n    get feature(): AbstractElement | undefined {\r\n        return this.grammarSource;\r\n    }\r\n\r\n    get hidden(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get astNode(): AstNode {\r\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\r\n        if (!node) {\r\n            throw new Error('This node has no associated AST element');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    set astNode(value: AstNode | undefined) {\r\n        this._astNode = value;\r\n    }\r\n\r\n    /** @deprecated use `astNode` instead. */\r\n    get element(): AstNode {\r\n        return this.astNode;\r\n    }\r\n\r\n    get text(): string {\r\n        return this.root.fullText.substring(this.offset, this.end);\r\n    }\r\n}\r\n\r\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\r\n    get offset(): number {\r\n        return this._offset;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._offset + this._length;\r\n    }\r\n\r\n    override get hidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    get tokenType(): TokenType {\r\n        return this._tokenType;\r\n    }\r\n\r\n    get range(): Range {\r\n        return this._range;\r\n    }\r\n\r\n    private _hidden: boolean;\r\n    private _offset: number;\r\n    private _length: number;\r\n    private _range: Range;\r\n    private _tokenType: TokenType;\r\n\r\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\r\n        super();\r\n        this._hidden = hidden;\r\n        this._offset = offset;\r\n        this._tokenType = tokenType;\r\n        this._length = length;\r\n        this._range = range;\r\n    }\r\n}\r\n\r\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\r\n    readonly content: CstNode[] = new CstNodeContainer(this);\r\n    private _rangeCache?: Range;\r\n\r\n    /** @deprecated use `content` instead. */\r\n    get children(): CstNode[] {\r\n        return this.content;\r\n    }\r\n\r\n    get offset(): number {\r\n        return this.firstNonHiddenNode?.offset ?? 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.end - this.offset;\r\n    }\r\n\r\n    get end(): number {\r\n        return this.lastNonHiddenNode?.end ?? 0;\r\n    }\r\n\r\n    get range(): Range {\r\n        const firstNode = this.firstNonHiddenNode;\r\n        const lastNode = this.lastNonHiddenNode;\r\n        if (firstNode && lastNode) {\r\n            if (this._rangeCache === undefined) {\r\n                const { range: firstRange } = firstNode;\r\n                const { range: lastRange } = lastNode;\r\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\r\n            }\r\n            return this._rangeCache;\r\n        } else {\r\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\r\n        }\r\n    }\r\n\r\n    private get firstNonHiddenNode(): CstNode | undefined {\r\n        for (const child of this.content) {\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[0];\r\n    }\r\n\r\n    private get lastNonHiddenNode(): CstNode | undefined {\r\n        for (let i = this.content.length - 1; i >= 0; i--) {\r\n            const child = this.content[i];\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[this.content.length - 1];\r\n    }\r\n}\r\n\r\nclass CstNodeContainer extends Array<CstNode> {\r\n    readonly parent: CompositeCstNode;\r\n\r\n    constructor(parent: CompositeCstNode) {\r\n        super();\r\n        this.parent = parent;\r\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\r\n    }\r\n\r\n    override push(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.push(...items);\r\n    }\r\n\r\n    override unshift(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.unshift(...items);\r\n    }\r\n\r\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\r\n        this.addParents(items);\r\n        return super.splice(start, count, ...items);\r\n    }\r\n\r\n    private addParents(items: CstNode[]): void {\r\n        for (const item of items) {\r\n            (<AbstractCstNode>item).container = this.parent;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\r\n    private _text = '';\r\n\r\n    override get text(): string {\r\n        return this._text.substring(this.offset, this.end);\r\n    }\r\n\r\n    get fullText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    constructor(input?: string) {\r\n        super();\r\n        this._text = input ?? '';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\r\nimport type { Lexer, LexerResult } from './lexer.js';\r\nimport type { IParserConfig } from './parser-config.js';\r\nimport type { ValueConverter } from './value-converter.js';\r\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\r\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\r\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\r\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\r\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\r\nimport { CstNodeBuilder } from './cst-node-builder.js';\r\nimport type { LexingReport } from './token-builder.js';\r\n\r\nexport type ParseResult<T = AstNode> = {\r\n    value: T,\r\n    parserErrors: IRecognitionException[],\r\n    lexerErrors: ILexingError[],\r\n    lexerReport?: LexingReport\r\n}\r\n\r\nexport const DatatypeSymbol = Symbol('Datatype');\r\n\r\ninterface DataTypeNode {\r\n    $cstNode: CompositeCstNode\r\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\r\n    $type: symbol\r\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\r\n    value: string\r\n}\r\n\r\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\r\n    return node.$type === DatatypeSymbol;\r\n}\r\n\r\ntype RuleResult = (args: Args) => any;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype RuleImpl = (args: Args) => any;\r\n\r\ninterface AssignmentElement {\r\n    assignment?: Assignment\r\n    isCrossRef: boolean\r\n}\r\n\r\n/**\r\n * Base interface for all parsers. Mainly used by the `parser-builder-base.ts` to perform work on different kinds of parsers.\r\n * The main use cases are:\r\n * * AST parser: Based on a string, create an AST for the current grammar\r\n * * Completion parser: Based on a partial string, identify the current position of the input within the grammar\r\n */\r\nexport interface BaseParser {\r\n    /**\r\n     * Adds a new parser rule to the parser\r\n     */\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    /**\r\n     * Returns the executable rule function for the specified rule name\r\n     */\r\n    getRule(name: string): RuleResult | undefined;\r\n    /**\r\n     * Performs alternatives parsing (the `|` operation in EBNF/Langium)\r\n     */\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\r\n    /**\r\n     * Parses the callback as optional (the `?` operation in EBNF/Langium)\r\n     */\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 0 or more times (the `*` operation in EBNF/Langium)\r\n     */\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 1 or more times (the `+` operation in EBNF/Langium)\r\n     */\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Consumes a specific token type from the token input stream.\r\n     * Requires a unique index within the rule for a specific token type.\r\n     */\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    /**\r\n     * Invokes the executable function for a given parser rule.\r\n     * Requires a unique index within the rule for a specific sub rule.\r\n     * Arguments can be supplied to the rule invocation for semantic predicates\r\n     */\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    /**\r\n     * Executes a grammar action that modifies the currently active AST node\r\n     */\r\n    action($type: string, action: Action): void;\r\n    /**\r\n     * Finishes construction of the current AST node. Only used by the AST parser.\r\n     */\r\n    construct(): unknown;\r\n    /**\r\n     * Whether the parser is currently actually in use or in \"recording mode\".\r\n     * Recording mode is activated once when the parser is analyzing itself.\r\n     * During this phase, no input exists and therefore no AST should be constructed\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Current state of the unordered groups\r\n     */\r\n    get unorderedGroups(): Map<string, boolean[]>;\r\n    /**\r\n     * The rule stack indicates the indices of rules that are currently invoked,\r\n     * in order of their invocation.\r\n     */\r\n    getRuleStack(): number[];\r\n}\r\n\r\nconst ruleSuffix = '\\u200B';\r\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\r\n\r\nexport abstract class AbstractLangiumParser implements BaseParser {\r\n\r\n    protected readonly lexer: Lexer;\r\n    protected readonly wrapper: ChevrotainWrapper;\r\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\r\n\r\n    protected allRules = new Map<string, RuleResult>();\r\n    protected mainRule!: RuleResult;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.lexer = services.parser.Lexer;\r\n        const tokens = this.lexer.definition;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.wrapper = new ChevrotainWrapper(tokens, {\r\n            ...services.parser.ParserConfig,\r\n            skipValidations: production,\r\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\r\n        });\r\n    }\r\n\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.wrapper.wrapOr(idx, choices);\r\n    }\r\n\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapOption(idx, callback);\r\n    }\r\n\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapMany(idx, callback);\r\n    }\r\n\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapAtLeastOne(idx, callback);\r\n    }\r\n\r\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    abstract subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    abstract action($type: string, action: Action): void;\r\n    abstract construct(): unknown;\r\n\r\n    getRule(name: string): RuleResult | undefined {\r\n        return this.allRules.get(name);\r\n    }\r\n\r\n    isRecording(): boolean {\r\n        return this.wrapper.IS_RECORDING;\r\n    }\r\n\r\n    get unorderedGroups(): Map<string, boolean[]> {\r\n        return this._unorderedGroups;\r\n    }\r\n\r\n    getRuleStack(): number[] {\r\n        return (this.wrapper as any).RULE_STACK;\r\n    }\r\n\r\n    finalize(): void {\r\n        this.wrapper.wrapSelfAnalysis();\r\n    }\r\n}\r\n\r\nexport interface ParserOptions {\r\n    rule?: string\r\n}\r\n\r\nexport class LangiumParser extends AbstractLangiumParser {\r\n    private readonly linker: Linker;\r\n    private readonly converter: ValueConverter;\r\n    private readonly astReflection: AstReflection;\r\n    private readonly nodeBuilder = new CstNodeBuilder();\r\n    private lexerResult?: LexerResult;\r\n    private stack: any[] = [];\r\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\r\n\r\n    private get current(): any {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        super(services);\r\n        this.linker = services.references.Linker;\r\n        this.converter = services.parser.ValueConverter;\r\n        this.astReflection = services.shared.AstReflection;\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const type = this.computeRuleType(rule);\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private computeRuleType(rule: ParserRule): string | symbol | undefined {\r\n        if (rule.fragment) {\r\n            return undefined;\r\n        } else if (isDataTypeRule(rule)) {\r\n            return DatatypeSymbol;\r\n        } else {\r\n            const explicit = getExplicitRuleType(rule);\r\n            return explicit ?? rule.name;\r\n        }\r\n    }\r\n\r\n    parse<T extends AstNode = AstNode>(input: string, options: ParserOptions = {}): ParseResult<T> {\r\n        this.nodeBuilder.buildRootNode(input);\r\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\r\n        this.wrapper.input = lexerResult.tokens;\r\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\r\n        if (!ruleMethod) {\r\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\r\n        }\r\n        const result = ruleMethod.call(this.wrapper, {});\r\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\r\n        this.unorderedGroups.clear();\r\n        this.lexerResult = undefined;\r\n        return {\r\n            value: result,\r\n            lexerErrors: lexerResult.errors,\r\n            lexerReport: lexerResult.report,\r\n            parserErrors: this.wrapper.errors\r\n        };\r\n    }\r\n\r\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            // Only create a new AST node in case the calling rule is not a fragment rule\r\n            const createNode = !this.isRecording() && $type !== undefined;\r\n            if (createNode) {\r\n                const node: any = { $type };\r\n                this.stack.push(node);\r\n                if ($type === DatatypeSymbol) {\r\n                    node.value = '';\r\n                }\r\n            }\r\n            let result: unknown;\r\n            try {\r\n                result = implementation(args);\r\n            } catch (err) {\r\n                result = undefined;\r\n            }\r\n            if (result === undefined && createNode) {\r\n                result = this.construct();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    private extractHiddenTokens(token: IToken): IToken[] {\r\n        const hiddenTokens = this.lexerResult!.hidden;\r\n        if (!hiddenTokens.length) {\r\n            return [];\r\n        }\r\n        const offset = token.startOffset;\r\n        for (let i = 0; i < hiddenTokens.length; i++) {\r\n            const token = hiddenTokens[i];\r\n            if (token.startOffset > offset) {\r\n                return hiddenTokens.splice(0, i);\r\n            }\r\n        }\r\n        return hiddenTokens.splice(0, hiddenTokens.length);\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        const token = this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording() && this.isValidToken(token)) {\r\n            const hiddenTokens = this.extractHiddenTokens(token);\r\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\r\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\r\n            const { assignment, isCrossRef } = this.getAssignment(feature);\r\n            const current = this.current;\r\n            if (assignment) {\r\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\r\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\r\n            } else if (isDataTypeNode(current)) {\r\n                let text = token.image;\r\n                if (!isKeyword(feature)) {\r\n                    text = this.converter.convert(text, leafNode).toString();\r\n                }\r\n                current.value += text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\r\n     *\r\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\r\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\r\n     */\r\n    private isValidToken(token: IToken): boolean {\r\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        let cstNode: CompositeCstNode | undefined;\r\n        if (!this.isRecording() && !fragment) {\r\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\r\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\r\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\r\n            // This is intended, as fragment rules only enrich the current AST node\r\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\r\n        }\r\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\r\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\r\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\r\n        }\r\n    }\r\n\r\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\r\n        const { assignment, isCrossRef } = this.getAssignment(feature);\r\n        if (assignment) {\r\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\r\n        } else if (!assignment) {\r\n            // If we call a subrule without an assignment we either:\r\n            // 1. append the result of the subrule (data type rule)\r\n            // 2. override the current object with the newly parsed object\r\n            // If the current element is an AST node and the result of the subrule\r\n            // is a data type rule, we can safely discard the results.\r\n            const current = this.current;\r\n            if (isDataTypeNode(current)) {\r\n                current.value += result.toString();\r\n            } else if (typeof result === 'object' && result) {\r\n                const object = this.assignWithoutOverride(result, current);\r\n                const newItem = object;\r\n                this.stack.pop();\r\n                this.stack.push(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    action($type: string, action: Action): void {\r\n        if (!this.isRecording()) {\r\n            let last = this.current;\r\n            if (action.feature && action.operator) {\r\n                last = this.construct();\r\n                this.nodeBuilder.removeNode(last.$cstNode);\r\n                const node = this.nodeBuilder.buildCompositeNode(action);\r\n                node.content.push(last.$cstNode);\r\n                const newItem = { $type };\r\n                this.stack.push(newItem);\r\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\r\n            } else {\r\n                last.$type = $type;\r\n            }\r\n        }\r\n    }\r\n\r\n    construct(): unknown {\r\n        if (this.isRecording()) {\r\n            return undefined;\r\n        }\r\n        const obj = this.current;\r\n        linkContentToContainer(obj);\r\n        this.nodeBuilder.construct(obj);\r\n        this.stack.pop();\r\n        if (isDataTypeNode(obj)) {\r\n            return this.converter.convert(obj.value, obj.$cstNode);\r\n        } else {\r\n            assignMandatoryProperties(this.astReflection, obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private getAssignment(feature: AbstractElement): AssignmentElement {\r\n        if (!this.assignmentMap.has(feature)) {\r\n            const assignment = getContainerOfType(feature, isAssignment);\r\n            this.assignmentMap.set(feature, {\r\n                assignment: assignment,\r\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\r\n            });\r\n        }\r\n        return this.assignmentMap.get(feature)!;\r\n    }\r\n\r\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\r\n        const obj = this.current;\r\n        let item: unknown;\r\n        if (isCrossRef && typeof value === 'string') {\r\n            item = this.linker.buildReference(obj, feature, cstNode, value);\r\n        } else {\r\n            item = value;\r\n        }\r\n        switch (operator) {\r\n            case '=': {\r\n                obj[feature] = item;\r\n                break;\r\n            }\r\n            case '?=': {\r\n                obj[feature] = true;\r\n                break;\r\n            }\r\n            case '+=': {\r\n                if (!Array.isArray(obj[feature])) {\r\n                    obj[feature] = [];\r\n                }\r\n                obj[feature].push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignWithoutOverride(target: any, source: any): any {\r\n        for (const [name, existingValue] of Object.entries(source)) {\r\n            const newValue = target[name];\r\n            if (newValue === undefined) {\r\n                target[name] = existingValue;\r\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\r\n                existingValue.push(...newValue);\r\n                target[name] = existingValue;\r\n            }\r\n        }\r\n        // The target was parsed from a unassigned subrule\r\n        // After the subrule construction, it received a cst node\r\n        // This CST node will later be overriden by the cst node builder\r\n        // To prevent references to stale AST nodes in the CST,\r\n        // we need to remove the reference here\r\n        const targetCstNode = target.$cstNode;\r\n        if (targetCstNode) {\r\n            targetCstNode.astNode = undefined;\r\n            target.$cstNode = undefined;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    get definitionErrors(): IParserDefinitionError[] {\r\n        return this.wrapper.definitionErrors;\r\n    }\r\n}\r\n\r\nexport interface IParserDefinitionError {\r\n    message: string\r\n    type: number\r\n    ruleName?: string\r\n}\r\n\r\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\r\n\r\n    buildMismatchTokenMessage(options: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\r\n    }\r\n\r\n    buildNotAllInputParsedMessage(options: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\r\n    }\r\n\r\n    buildNoViableAltMessage(options: {\r\n        expectedPathsPerAlt: TokenType[][][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\r\n    }\r\n\r\n    buildEarlyExitMessage(options: {\r\n        expectedIterationPaths: TokenType[][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\r\n    }\r\n\r\n}\r\n\r\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\r\n\r\n    override buildMismatchTokenMessage({ expected, actual }: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        const expectedMsg = expected.LABEL\r\n            ? '`' + expected.LABEL + '`'\r\n            : expected.name.endsWith(':KW')\r\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\r\n                : `token of type '${expected.name}'`;\r\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\r\n    }\r\n\r\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\r\n    }\r\n}\r\n\r\nexport interface CompletionParserResult {\r\n    tokens: IToken[]\r\n    elementStack: AbstractElement[]\r\n    tokenIndex: number\r\n}\r\n\r\nexport class LangiumCompletionParser extends AbstractLangiumParser {\r\n    private tokens: IToken[] = [];\r\n\r\n    private elementStack: AbstractElement[] = [];\r\n    private lastElementStack: AbstractElement[] = [];\r\n    private nextTokenIndex = 0;\r\n    private stackSize = 0;\r\n\r\n    action(): void {\r\n        // NOOP\r\n    }\r\n\r\n    construct(): unknown {\r\n        // NOOP\r\n        return undefined;\r\n    }\r\n\r\n    parse(input: string): CompletionParserResult {\r\n        this.resetState();\r\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\r\n        this.tokens = tokens.tokens;\r\n        this.wrapper.input = [...this.tokens];\r\n        this.mainRule.call(this.wrapper, {});\r\n        this.unorderedGroups.clear();\r\n        return {\r\n            tokens: this.tokens,\r\n            elementStack: [...this.lastElementStack],\r\n            tokenIndex: this.nextTokenIndex\r\n        };\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private resetState(): void {\r\n        this.elementStack = [];\r\n        this.lastElementStack = [];\r\n        this.nextTokenIndex = 0;\r\n        this.stackSize = 0;\r\n    }\r\n\r\n    private startImplementation(implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            const size = this.keepStackSize();\r\n            try {\r\n                implementation(args);\r\n            } finally {\r\n                this.resetStackSize(size);\r\n            }\r\n        };\r\n    }\r\n\r\n    private removeUnexpectedElements(): void {\r\n        this.elementStack.splice(this.stackSize);\r\n    }\r\n\r\n    keepStackSize(): number {\r\n        const size = this.elementStack.length;\r\n        this.stackSize = size;\r\n        return size;\r\n    }\r\n\r\n    resetStackSize(size: number): void {\r\n        this.removeUnexpectedElements();\r\n        this.stackSize = size;\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording()) {\r\n            this.lastElementStack = [...this.elementStack, feature];\r\n            this.nextTokenIndex = this.currIdx + 1;\r\n        }\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        this.before(feature);\r\n        this.wrapper.wrapSubrule(idx, rule, args);\r\n        this.after(feature);\r\n    }\r\n\r\n    before(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            this.elementStack.push(element);\r\n        }\r\n    }\r\n\r\n    after(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            const index = this.elementStack.lastIndexOf(element);\r\n            if (index >= 0) {\r\n                this.elementStack.splice(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    get currIdx(): number {\r\n        return (this.wrapper as any).currIdx;\r\n    }\r\n}\r\n\r\nconst defaultConfig: IParserConfig = {\r\n    recoveryEnabled: true,\r\n    nodeLocationTracking: 'full',\r\n    skipValidations: true,\r\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\r\n};\r\n\r\n/**\r\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\r\n * This way, we can build the `LangiumParser` as a composition.\r\n */\r\nclass ChevrotainWrapper extends EmbeddedActionsParser {\r\n\r\n    // This array is set in the base implementation of Chevrotain.\r\n    definitionErrors: IParserDefinitionError[];\r\n\r\n    constructor(tokens: TokenVocabulary, config: IParserConfig) {\r\n        const useDefaultLookahead = config && 'maxLookahead' in config;\r\n        super(tokens, {\r\n            ...defaultConfig,\r\n            lookaheadStrategy: useDefaultLookahead\r\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\r\n                : new LLStarLookaheadStrategy({\r\n                    // If validations are skipped, don't log the lookahead warnings\r\n                    logging: config.skipValidations ? () => { } : undefined\r\n                }),\r\n            ...config,\r\n        });\r\n    }\r\n\r\n    get IS_RECORDING(): boolean {\r\n        return this.RECORDING_PHASE;\r\n    }\r\n\r\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\r\n        return this.RULE(name, impl);\r\n    }\r\n\r\n    wrapSelfAnalysis(): void {\r\n        this.performSelfAnalysis();\r\n    }\r\n\r\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\r\n        return this.consume(idx, tokenType);\r\n    }\r\n\r\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\r\n        return this.subrule(idx, rule, {\r\n            ARGS: [args]\r\n        });\r\n    }\r\n\r\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.or(idx, choices);\r\n    }\r\n\r\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.option(idx, callback);\r\n    }\r\n\r\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.many(idx, callback);\r\n    }\r\n\r\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.atLeastOne(idx, callback);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\r\nimport type { BaseParser } from './langium-parser.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { Cardinality } from '../utils/grammar-utils.js';\r\nimport { EMPTY_ALT, EOF } from 'chevrotain';\r\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\r\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\r\n\r\ntype RuleContext = {\r\n    optional: number,\r\n    consume: number,\r\n    subrule: number,\r\n    many: number,\r\n    or: number\r\n} & ParserContext;\r\n\r\ntype ParserContext = {\r\n    parser: BaseParser\r\n    tokens: TokenTypeDictionary\r\n    ruleNames: Map<AstNode, string>\r\n}\r\n\r\ntype Rule = (args: Args) => unknown;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype Predicate = (args: Args) => boolean;\r\n\r\ntype Method = (args: Args) => void;\r\n\r\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\r\n    const parserContext: ParserContext = {\r\n        parser,\r\n        tokens,\r\n        ruleNames: new Map()\r\n    };\r\n    buildRules(parserContext, grammar);\r\n    return parser;\r\n}\r\n\r\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\r\n    const reachable = getAllReachableRules(grammar, false);\r\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\r\n    for (const rule of parserRules) {\r\n        const ctx: RuleContext = {\r\n            ...parserContext,\r\n            consume: 1,\r\n            optional: 1,\r\n            subrule: 1,\r\n            many: 1,\r\n            or: 1\r\n        };\r\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\r\n    }\r\n}\r\n\r\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\r\n    let method: Method;\r\n    if (isKeyword(element)) {\r\n        method = buildKeyword(ctx, element);\r\n    } else if (isAction(element)) {\r\n        method = buildAction(ctx, element);\r\n    } else if (isAssignment(element)) {\r\n        method = buildElement(ctx, element.terminal);\r\n    } else if (isCrossReference(element)) {\r\n        method = buildCrossReference(ctx, element);\r\n    } else if (isRuleCall(element)) {\r\n        method = buildRuleCall(ctx, element);\r\n    } else if (isAlternatives(element)) {\r\n        method = buildAlternatives(ctx, element);\r\n    } else if (isUnorderedGroup(element)) {\r\n        method = buildUnorderedGroup(ctx, element);\r\n    } else if (isGroup(element)) {\r\n        method = buildGroup(ctx, element);\r\n    } else if(isEndOfFile(element)) {\r\n        const idx = ctx.consume++;\r\n        method = () => ctx.parser.consume(idx, EOF, element);\r\n    } else {\r\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\r\n    }\r\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\r\n}\r\n\r\nfunction buildAction(ctx: RuleContext, action: Action): Method {\r\n    const actionType = getTypeName(action);\r\n    return () => ctx.parser.action(actionType, action);\r\n}\r\n\r\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\r\n    const rule = ruleCall.rule.ref;\r\n    if (isParserRule(rule)) {\r\n        const idx = ctx.subrule++;\r\n        const fragment = rule.fragment;\r\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\r\n    } else if (isTerminalRule(rule)) {\r\n        const idx = ctx.consume++;\r\n        const method = getToken(ctx, rule.name);\r\n        return () => ctx.parser.consume(idx, method, ruleCall);\r\n    } else if (!rule) {\r\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\r\n    } else {\r\n        assertUnreachable(rule);\r\n    }\r\n}\r\n\r\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\r\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\r\n    return (args) => {\r\n        const ruleArgs: Args = {};\r\n        for (let i = 0; i < predicates.length; i++) {\r\n            const ruleTarget = rule.parameters[i];\r\n            const predicate = predicates[i];\r\n            ruleArgs[ruleTarget.name] = predicate(args);\r\n        }\r\n        return ruleArgs;\r\n    };\r\n}\r\n\r\ninterface PredicatedMethod {\r\n    ALT: Method,\r\n    GATE?: Predicate\r\n}\r\n\r\nfunction buildPredicate(condition: Condition): Predicate {\r\n    if (isDisjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) || right(args));\r\n    } else if (isConjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) && right(args));\r\n    } else if (isNegation(condition)) {\r\n        const value = buildPredicate(condition.value);\r\n        return (args) => !value(args);\r\n    } else if (isParameterReference(condition)) {\r\n        const name = condition.parameter.ref!.name;\r\n        return (args) => args !== undefined && args[name] === true;\r\n    } else if (isBooleanLiteral(condition)) {\r\n        const value = Boolean(condition.true);\r\n        return () => value;\r\n    }\r\n    assertUnreachable(condition);\r\n}\r\n\r\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\r\n    if (alternatives.elements.length === 1) {\r\n        return buildElement(ctx, alternatives.elements[0]);\r\n    } else {\r\n        const methods: PredicatedMethod[] = [];\r\n\r\n        for (const element of alternatives.elements) {\r\n            const predicatedMethod: PredicatedMethod = {\r\n                // Since we handle the guard condition in the alternative already\r\n                // We can ignore the group guard condition inside\r\n                ALT: buildElement(ctx, element, true)\r\n            };\r\n            const guard = getGuardCondition(element);\r\n            if (guard) {\r\n                predicatedMethod.GATE = buildPredicate(guard);\r\n            }\r\n            methods.push(predicatedMethod);\r\n        }\r\n\r\n        const idx = ctx.or++;\r\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\r\n            const alt: IOrAlt<unknown> = {\r\n                ALT: () => method.ALT(args)\r\n            };\r\n            const gate = method.GATE;\r\n            if (gate) {\r\n                alt.GATE = () => gate(args);\r\n            }\r\n            return alt;\r\n        }));\r\n    }\r\n}\r\n\r\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\r\n    if (group.elements.length === 1) {\r\n        return buildElement(ctx, group.elements[0]);\r\n    }\r\n    const methods: PredicatedMethod[] = [];\r\n\r\n    for (const element of group.elements) {\r\n        const predicatedMethod: PredicatedMethod = {\r\n            // Since we handle the guard condition in the alternative already\r\n            // We can ignore the group guard condition inside\r\n            ALT: buildElement(ctx, element, true)\r\n        };\r\n        const guard = getGuardCondition(element);\r\n        if (guard) {\r\n            predicatedMethod.GATE = buildPredicate(guard);\r\n        }\r\n        methods.push(predicatedMethod);\r\n    }\r\n\r\n    const orIdx = ctx.or++;\r\n\r\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\r\n        const stackId = lParser.getRuleStack().join('-');\r\n        return `uGroup_${groupIdx}_${stackId}`;\r\n    };\r\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\r\n        const alt: IOrAlt<unknown> = { ALT: () => true };\r\n        const parser = ctx.parser;\r\n        alt.ALT = () => {\r\n            method.ALT(args);\r\n            if (!parser.isRecording()) {\r\n                const key = idFunc(orIdx, parser);\r\n                if (!parser.unorderedGroups.get(key)) {\r\n                    // init after clear state\r\n                    parser.unorderedGroups.set(key, []);\r\n                }\r\n                const groupState = parser.unorderedGroups.get(key)!;\r\n                if (typeof groupState?.[idx] === 'undefined') {\r\n                    // Not accessed yet\r\n                    groupState[idx] = true;\r\n                }\r\n            }\r\n        };\r\n        const gate = method.GATE;\r\n        if (gate) {\r\n            alt.GATE = () => gate(args);\r\n        } else {\r\n            alt.GATE = () => {\r\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\r\n                const allow = !trackedAlternatives?.[idx];\r\n                return allow;\r\n            };\r\n        }\r\n        return alt;\r\n    }));\r\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\r\n    return (args) => {\r\n        wrapped(args);\r\n        if (!ctx.parser.isRecording()) {\r\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\r\n        }\r\n    };\r\n}\r\n\r\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\r\n    const methods = group.elements.map(e => buildElement(ctx, e));\r\n    return (args) => methods.forEach(method => method(args));\r\n}\r\n\r\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\r\n    if (isGroup(element)) {\r\n        return element.guardCondition;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\r\n    if (!terminal) {\r\n        if (!crossRef.type.ref) {\r\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\r\n        }\r\n        const assignment = findNameAssignment(crossRef.type.ref);\r\n        const assignTerminal = assignment?.terminal;\r\n        if (!assignTerminal) {\r\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\r\n        }\r\n        return buildCrossReference(ctx, crossRef, assignTerminal);\r\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\r\n        // The terminal is a data type rule here. Everything else will result in a validation error.\r\n        const rule = terminal.rule.ref;\r\n        const idx = ctx.subrule++;\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\r\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\r\n        const idx = ctx.consume++;\r\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\r\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\r\n    } else if (isKeyword(terminal)) {\r\n        const idx = ctx.consume++;\r\n        const keyword = getToken(ctx, terminal.value);\r\n        return () => ctx.parser.consume(idx, keyword, crossRef);\r\n    }\r\n    else {\r\n        throw new Error('Could not build cross reference parser');\r\n    }\r\n}\r\n\r\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\r\n    const idx = ctx.consume++;\r\n    const token = ctx.tokens[keyword.value];\r\n    if (!token) {\r\n        throw new Error('Could not find token for keyword: ' + keyword.value);\r\n    }\r\n    return () => ctx.parser.consume(idx, token, keyword);\r\n}\r\n\r\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\r\n    const gate = guard && buildPredicate(guard);\r\n\r\n    if (!cardinality) {\r\n        if (gate) {\r\n            const idx = ctx.or++;\r\n            return (args) => ctx.parser.alternatives(idx, [\r\n                {\r\n                    ALT: () => method(args),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return method;\r\n        }\r\n    }\r\n\r\n    if (cardinality === '*') {\r\n        const idx = ctx.many++;\r\n        return (args) => ctx.parser.many(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else if (cardinality === '+') {\r\n        const idx = ctx.many++;\r\n        if (gate) {\r\n            const orIdx = ctx.or++;\r\n            // In the case of a guard condition for the `+` group\r\n            // We combine it with an empty alternative\r\n            // If the condition returns true, it needs to parse at least a single iteration\r\n            // If its false, it is not allowed to parse anything\r\n            return (args) => ctx.parser.alternatives(orIdx, [\r\n                {\r\n                    ALT: () => ctx.parser.atLeastOne(idx, {\r\n                        DEF: () => method(args)\r\n                    }),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return (args) => ctx.parser.atLeastOne(idx, {\r\n                DEF: () => method(args),\r\n            });\r\n        }\r\n    } else if (cardinality === '?') {\r\n        const idx = ctx.optional++;\r\n        return (args) => ctx.parser.optional(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else {\r\n        assertUnreachable(cardinality);\r\n    }\r\n}\r\n\r\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\r\n    const name = getRuleName(ctx, element);\r\n    const rule = ctx.parser.getRule(name);\r\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\r\n    return rule;\r\n}\r\n\r\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\r\n    if (isParserRule(element)) {\r\n        return element.name;\r\n    } else if (ctx.ruleNames.has(element)) {\r\n        return ctx.ruleNames.get(element)!;\r\n    } else {\r\n        let item: AstNode = element;\r\n        let parent: AstNode = item.$container!;\r\n        let ruleName: string = element.$type;\r\n        while (!isParserRule(parent)) {\r\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\r\n                const index = parent.elements.indexOf(item as AbstractElement);\r\n                ruleName = index.toString() + ':' + ruleName;\r\n            }\r\n            item = parent;\r\n            parent = parent.$container!;\r\n        }\r\n        const rule = parent as ParserRule;\r\n        ruleName = rule.name + ':' + ruleName;\r\n        ctx.ruleNames.set(element, ruleName);\r\n        return ruleName;\r\n    }\r\n}\r\n\r\nfunction getToken(ctx: ParserContext, name: string): TokenType {\r\n    const token = ctx.tokens[name];\r\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\r\n    return token;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\n/**\r\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\r\n * available at `services.Grammar`.\r\n */\r\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const parser = prepareLangiumParser(services);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n\r\n/**\r\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\r\n * information when the parser is initially validated.\r\n */\r\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumParser(services);\r\n    return createParser(grammar, parser, lexer.definition);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\r\n\r\nexport type MaybePromise<T> = T | Promise<T>\r\n\r\n/**\r\n * Delays the execution of the current code to the next tick of the event loop.\r\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\r\n */\r\nexport function delayNextTick(): Promise<void> {\r\n    return new Promise(resolve => {\r\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\r\n        // Using `setTimeout` of the browser API accomplishes the same result.\r\n        if (typeof setImmediate === 'undefined') {\r\n            setTimeout(resolve, 0);\r\n        } else {\r\n            setImmediate(resolve);\r\n        }\r\n    });\r\n}\r\n\r\nlet lastTick = 0;\r\nlet globalInterruptionPeriod = 10;\r\n\r\n/**\r\n * Reset the global interruption period and create a cancellation token source.\r\n */\r\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\r\n    lastTick = performance.now();\r\n    return new CancellationTokenSource();\r\n}\r\n\r\n/**\r\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\r\n * The default value is 10ms.\r\n */\r\nexport function setInterruptionPeriod(period: number): void {\r\n    globalInterruptionPeriod = period;\r\n}\r\n\r\n/**\r\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\r\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\r\n * this symbol as rejection reason.\r\n */\r\nexport const OperationCancelled = Symbol('OperationCancelled');\r\n\r\n/**\r\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\r\n * has been cancelled.\r\n */\r\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\r\n    return err === OperationCancelled;\r\n}\r\n\r\n/**\r\n * This function does two things:\r\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\r\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\r\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\r\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\r\n *\r\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\r\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\r\n * the promise) to avoid that event being exposed as an error.\r\n */\r\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\r\n    if (token === CancellationToken.None) {\r\n        // Early exit in case cancellation was disabled by the caller\r\n        return;\r\n    }\r\n    const current = performance.now();\r\n    if (current - lastTick >= globalInterruptionPeriod) {\r\n        lastTick = current;\r\n        await delayNextTick();\r\n        // prevent calling delayNextTick every iteration of loop\r\n        // where delayNextTick takes up the majority or all of the\r\n        // globalInterruptionPeriod itself\r\n        lastTick = performance.now();\r\n    }\r\n    if (token.isCancellationRequested) {\r\n        throw OperationCancelled;\r\n    }\r\n}\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T = void> {\r\n    resolve: (value: T) => this;\r\n    reject: (err?: unknown) => this;\r\n\r\n    promise = new Promise<T>((resolve, reject) => {\r\n        this.resolve = (arg) => {\r\n            resolve(arg);\r\n            return this;\r\n        };\r\n        this.reject = (err) => {\r\n            reject(err);\r\n            return this;\r\n        };\r\n    });\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\r\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\r\n *  the overhead is very small, just a few kilobytes.\r\n * Everything else of that package (at the time contributing) is also defined\r\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\r\n */\r\nexport { TextDocument } from 'vscode-languageserver-textdocument';\r\n\r\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\r\nimport type { FileSystemProvider } from './file-system-provider.js';\r\nimport type { ParseResult, ParserOptions } from '../parser/langium-parser.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\r\nimport type { MultiMap } from '../utils/collections.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { TextDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\r\n * from the AST, e.g. the result of scope precomputation.\r\n */\r\nexport interface LangiumDocument<T extends AstNode = AstNode> {\r\n    /** The Uniform Resource Identifier (URI) of the document */\r\n    readonly uri: URI;\r\n    /** The text document used to convert between offsets and positions */\r\n    readonly textDocument: TextDocument;\r\n    /** The current state of the document */\r\n    state: DocumentState;\r\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\r\n    parseResult: ParseResult<T>;\r\n    /** Result of the scope precomputation phase */\r\n    precomputedScopes?: PrecomputedScopes;\r\n    /** An array of all cross-references found in the AST while linking */\r\n    references: Reference[];\r\n    /** Result of the validation phase */\r\n    diagnostics?: Diagnostic[]\r\n}\r\n\r\n/**\r\n * A document is subject to several phases that are run in predefined order. Any state value implies that\r\n * smaller state values are finished as well.\r\n */\r\nexport enum DocumentState {\r\n    /**\r\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\r\n     * document instance is no longer valid.\r\n     */\r\n    Changed = 0,\r\n    /**\r\n     * An AST has been created from the text content. The document structure can be traversed,\r\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\r\n     * at this stage as a preprocessing step.\r\n     */\r\n    Parsed = 1,\r\n    /**\r\n     * The `IndexManager` service has processed AST nodes of this document. This means the\r\n     * exported symbols are available in the global scope and can be resolved from other documents.\r\n     */\r\n    IndexedContent = 2,\r\n    /**\r\n     * The `ScopeComputation` service has processed this document. This means the local symbols\r\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\r\n     * Once a document has reached this state, you may follow every reference - it will lazily\r\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\r\n     * the target is not in scope.\r\n     */\r\n    ComputedScopes = 3,\r\n    /**\r\n     * The `Linker` service has processed this document. All outgoing references have been\r\n     * resolved or marked as erroneous.\r\n     */\r\n    Linked = 4,\r\n    /**\r\n     * The `IndexManager` service has processed AST node references of this document. This is\r\n     * necessary to determine which documents are affected by a change in one of the workspace\r\n     * documents.\r\n     */\r\n    IndexedReferences = 5,\r\n    /**\r\n     * The `DocumentValidator` service has processed this document. The language server listens\r\n     * to the results of this phase and sends diagnostics to the client.\r\n     */\r\n    Validated = 6\r\n}\r\n\r\n/**\r\n * Result of the scope precomputation phase (`ScopeComputation` service).\r\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\r\n */\r\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\r\n\r\nexport interface DocumentSegment {\r\n    readonly range: Range\r\n    readonly offset: number\r\n    readonly length: number\r\n    readonly end: number\r\n}\r\n\r\n/**\r\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\r\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\r\n */\r\nexport type TextDocumentProvider = {\r\n    get(uri: string | URI): TextDocument | undefined\r\n}\r\n\r\n/**\r\n * Shared service for creating `LangiumDocument` instances.\r\n *\r\n * Register a custom implementation if special (additional) behavior is required for your language(s).\r\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\r\n * specialize {@link update}, too!\r\n */\r\nexport interface LangiumDocumentFactory {\r\n    /**\r\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from an in-memory string.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from a model that has been constructed in memory.\r\n     */\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\r\n\r\n    /**\r\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\r\n     */\r\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Update the given document after changes in the corresponding textual representation.\r\n     * Method is called by the document builder after it has been requested to build an existing\r\n     * document and the document's state is {@link DocumentState.Changed}.\r\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\r\n     * and {@link fromString}.\r\n     */\r\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\r\n}\r\n\r\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n    }\r\n\r\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\r\n        const content = await this.fileSystemProvider.readFile(uri);\r\n        return this.createAsync<T>(uri, content, cancellationToken);\r\n    }\r\n\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        uri = uri ?? URI.parse(textDocument.uri);\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, textDocument, token);\r\n        } else {\r\n            return this.create<T>(uri, textDocument, token);\r\n        }\r\n    }\r\n\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, text, token);\r\n        } else {\r\n            return this.create<T>(uri, text, token);\r\n        }\r\n    }\r\n\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\r\n        return this.create<T>(uri, { $model: model });\r\n    }\r\n\r\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }, options?: ParserOptions): LangiumDocument<T> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = this.parse<T>(uri, content, options);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n\r\n        } else if ('$model' in content) {\r\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\r\n            return this.createLangiumDocument<T>(parseResult, uri);\r\n\r\n        } else {\r\n            const parseResult = this.parse<T>(uri, content.getText(), options);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n        } else {\r\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a LangiumDocument from a given parse result.\r\n     *\r\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\r\n     * should not be necessary because the main purpose of the TextDocument is to convert between\r\n     * text ranges and offsets, which is done solely in LSP request handling.\r\n     *\r\n     * With the introduction of {@link update} below this method is supposed to be mainly called\r\n     * during workspace initialization and on addition/recognition of new files, while changes in\r\n     * existing documents are processed via {@link update}.\r\n     */\r\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\r\n        let document: LangiumDocument<T>;\r\n        if (textDocument) {\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                textDocument\r\n            };\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                get textDocument() {\r\n                    return textDocumentGetter();\r\n                }\r\n            };\r\n        }\r\n        (parseResult.value as Mutable<AstNode>).$document = document;\r\n        return document;\r\n    }\r\n\r\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        // The CST full text property contains the original text that was used to create the AST.\r\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\r\n        const textDocument = this.textDocuments?.get(document.uri.toString());\r\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\r\n\r\n        if (textDocument) {\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    value: textDocument\r\n                }\r\n            );\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    get: textDocumentGetter\r\n                }\r\n            );\r\n        }\r\n\r\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\r\n        // Therefore, we only parse if the text has actually changed.\r\n        if (oldText !== text) {\r\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\r\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\r\n        }\r\n        document.state = DocumentState.Parsed;\r\n        return document;\r\n    }\r\n\r\n    protected parse<T extends AstNode>(uri: URI, text: string, options?: ParserOptions): ParseResult<T> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.LangiumParser.parse<T>(text, options);\r\n    }\r\n\r\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\r\n    }\r\n\r\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\r\n        const serviceRegistry = this.serviceRegistry;\r\n        let textDoc: TextDocument | undefined = undefined;\r\n        return () => {\r\n            return textDoc ??= TextDocument.create(\r\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Shared service for managing Langium documents.\r\n */\r\nexport interface LangiumDocuments {\r\n\r\n    /**\r\n     * A stream of all documents managed under this service.\r\n     */\r\n    readonly all: Stream<LangiumDocument>\r\n\r\n    /**\r\n     * Manage a new document under this service.\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    addDocument(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\r\n     */\r\n    getDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\r\n     * The new document will be added to the list of documents managed under this service.\r\n     */\r\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content asynchronously.\r\n     * The process can be interrupted with a cancellation token.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Returns `true` if a document with the given URI is managed under this service.\r\n     */\r\n    hasDocument(uri: URI): boolean;\r\n\r\n    /**\r\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\r\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\r\n     * be dropped to reduce memory footprint.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\r\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\r\n     * URI will create a new document instance.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    deleteDocument(uri: URI): LangiumDocument | undefined;\r\n}\r\n\r\nexport class DefaultLangiumDocuments implements LangiumDocuments {\r\n\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n\r\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get all(): Stream<LangiumDocument> {\r\n        return stream(this.documentMap.values());\r\n    }\r\n\r\n    addDocument(document: LangiumDocument): void {\r\n        const uriString = document.uri.toString();\r\n        if (this.documentMap.has(uriString)) {\r\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\r\n        }\r\n        this.documentMap.set(uriString, document);\r\n    }\r\n\r\n    getDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        return this.documentMap.get(uriString);\r\n    }\r\n\r\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\r\n        let document = this.getDocument(uri);\r\n        if (document) {\r\n            return document;\r\n        }\r\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\r\n        this.addDocument(document);\r\n        return document;\r\n    }\r\n\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\r\n        if (cancellationToken) {\r\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\r\n                this.addDocument(document);\r\n                return document;\r\n            });\r\n        } else {\r\n            const document = this.langiumDocumentFactory.fromString(text, uri);\r\n            this.addDocument(document);\r\n            return document;\r\n        }\r\n    }\r\n\r\n    hasDocument(uri: URI): boolean {\r\n        return this.documentMap.has(uri.toString());\r\n    }\r\n\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\r\n            linker.unlink(langiumDoc);\r\n            langiumDoc.state = DocumentState.Changed;\r\n            langiumDoc.precomputedScopes = undefined;\r\n            langiumDoc.diagnostics = undefined;\r\n        }\r\n        return langiumDoc;\r\n    }\r\n\r\n    deleteDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            langiumDoc.state = DocumentState.Changed;\r\n            this.documentMap.delete(uriString);\r\n        }\r\n        return langiumDoc;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\nimport type { ScopeProvider } from './scope-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\r\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { DocumentState } from '../workspace/documents.js';\r\n\r\n/**\r\n * Language-specific service for resolving cross-references in the AST.\r\n */\r\nexport interface Linker {\r\n\r\n    /**\r\n     * Links all cross-references within the specified document. The default implementation loads only target\r\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\r\n     * stored in the document's `references` property.\r\n     *\r\n     * @param document A LangiumDocument that shall be linked.\r\n     * @param cancelToken A token for cancelling the operation.\r\n     *\r\n     * @throws `OperationCancelled` if a cancellation event is detected\r\n     */\r\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Unlinks all references within the specified document and removes them from the list of `references`.\r\n     *\r\n     * @param document A LangiumDocument that shall be unlinked.\r\n     */\r\n    unlink(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Determines a candidate AST node description for linking the given reference.\r\n     *\r\n     * @param refInfo Information about the reference.\r\n     */\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\r\n\r\n    /**\r\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\r\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\r\n     * as well as the unique cross reference identifier.\r\n     *\r\n     * Default behavior:\r\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\r\n     *    first visit.\r\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\r\n     *    and further resolution attempts will *not* be performed.\r\n     *\r\n     * @param node The containing AST node\r\n     * @param property The AST node property being referenced\r\n     * @param refNode The corresponding CST node\r\n     * @param refText The cross reference text denoting the target AstNode\r\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\r\n     */\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\r\n\r\n}\r\n\r\nconst ref_resolving = Symbol('ref_resolving');\r\n\r\ninterface DefaultReference extends Reference {\r\n    _ref?: AstNode | LinkingError | typeof ref_resolving;\r\n    _nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport class DefaultLinker implements Linker {\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly scopeProvider: ScopeProvider;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly langiumDocuments: () => LangiumDocuments;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\r\n        this.scopeProvider = services.references.ScopeProvider;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const node of streamAst(document.parseResult.value)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\r\n        }\r\n    }\r\n\r\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\r\n        const ref = refInfo.reference as DefaultReference;\r\n        // The reference may already have been resolved lazily by accessing its `ref` property.\r\n        if (ref._ref === undefined) {\r\n            ref._ref = ref_resolving;\r\n            try {\r\n                const description = this.getCandidate(refInfo);\r\n                if (isLinkingError(description)) {\r\n                    ref._ref = description;\r\n                } else {\r\n                    ref._nodeDescription = description;\r\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\r\n                        // The target document is already loaded\r\n                        const linkedNode = this.loadAstNode(description);\r\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\r\n                    } else {\r\n                        // Try to load the target AST node later using the already provided description\r\n                        ref._ref = undefined;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\r\n                const errorMessage = (err as Error).message ?? String(err);\r\n                ref._ref = {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\r\n                };\r\n            }\r\n            // Add the reference to the document's array of references\r\n            // Only add if the reference has been not been resolved earlier\r\n            // Otherwise we end up with duplicates\r\n            // See also implementation of `buildReference`\r\n            document.references.push(ref);\r\n        }\r\n    }\r\n\r\n    unlink(document: LangiumDocument): void {\r\n        for (const ref of document.references) {\r\n            delete (ref as DefaultReference)._ref;\r\n            delete (ref as DefaultReference)._nodeDescription;\r\n        }\r\n        document.references = [];\r\n    }\r\n\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\r\n        const scope = this.scopeProvider.getScope(refInfo);\r\n        const description = scope.getElement(refInfo.reference.$refText);\r\n        return description ?? this.createLinkingError(refInfo);\r\n    }\r\n\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\r\n        // See behavior description in doc of Linker, update that on changes in here.\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const linker = this;\r\n        const reference: DefaultReference = {\r\n            $refNode: refNode,\r\n            $refText: refText,\r\n\r\n            get ref() {\r\n                if (isAstNode(this._ref)) {\r\n                    // Most frequent case: the target is already resolved.\r\n                    return this._ref;\r\n                } else if (isAstNodeDescription(this._nodeDescription)) {\r\n                    // A candidate has been found before, but it is not loaded yet.\r\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\r\n                    this._ref = linkedNode ??\r\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\r\n                } else if (this._ref === undefined) {\r\n                    // The reference has not been linked yet, so do that now.\r\n                    this._ref = ref_resolving;\r\n                    const document = findRootNode(node).$document;\r\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\r\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\r\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\r\n                        return this._ref = undefined;\r\n                    }\r\n                    this._ref = refData.node ?? refData.error;\r\n                    this._nodeDescription = refData.descr;\r\n                    document?.references.push(this);\r\n                } else if (this._ref === ref_resolving) {\r\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\r\n                }\r\n                return isAstNode(this._ref) ? this._ref : undefined;\r\n            },\r\n            get $nodeDescription() {\r\n                return this._nodeDescription;\r\n            },\r\n            get error() {\r\n                return isLinkingError(this._ref) ? this._ref : undefined;\r\n            }\r\n        };\r\n        return reference;\r\n    }\r\n\r\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\r\n        try {\r\n            const description = this.getCandidate(refInfo);\r\n            if (isLinkingError(description)) {\r\n                return { error: description };\r\n            }\r\n            const linkedNode = this.loadAstNode(description);\r\n            if (linkedNode) {\r\n                return { node: linkedNode, descr: description };\r\n            }\r\n            else {\r\n                return {\r\n                    descr: description,\r\n                    error:\r\n                        this.createLinkingError(refInfo, description)\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\r\n            const errorMessage = (err as Error).message ?? String(err);\r\n            return {\r\n                error: {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\r\n        if (nodeDescription.node) {\r\n            return nodeDescription.node;\r\n        }\r\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\r\n        if (!doc) {\r\n            return undefined;\r\n        }\r\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\r\n    }\r\n\r\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\r\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\r\n        // in the language implementation.\r\n        const document = findRootNode(refInfo.container).$document;\r\n        if (document && document.state < DocumentState.ComputedScopes) {\r\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\r\n        }\r\n        const referenceType = this.reflection.getReferenceType(refInfo);\r\n        return {\r\n            ...refInfo,\r\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\r\n            targetDescription\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI, Utils } from 'vscode-uri';\r\n\r\nexport { URI };\r\n\r\nexport namespace UriUtils {\r\n\r\n    export const basename = Utils.basename;\r\n    export const dirname = Utils.dirname;\r\n    export const extname = Utils.extname;\r\n    export const joinPath = Utils.joinPath;\r\n    export const resolvePath = Utils.resolvePath;\r\n\r\n    export function equals(a?: URI | string, b?: URI | string): boolean {\r\n        return a?.toString() === b?.toString();\r\n    }\r\n\r\n    export function relative(from: URI | string, to: URI | string): string {\r\n        const fromPath = typeof from === 'string' ? from : from.path;\r\n        const toPath = typeof to === 'string' ? to : to.path;\r\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\r\n        const toParts = toPath.split('/').filter(e => e.length > 0);\r\n        let i = 0;\r\n        for (; i < fromParts.length; i++) {\r\n            if (fromParts[i] !== toParts[i]) {\r\n                break;\r\n            }\r\n        }\r\n        const backPart = '../'.repeat(fromParts.length - i);\r\n        const toPart = toParts.slice(i).join('/');\r\n        return backPart + toPart;\r\n    }\r\n\r\n    export function normalize(uri: URI | string): string {\r\n        return URI.parse(uri.toString()).toString();\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { findAssignment } from '../utils/grammar-utils.js';\r\nimport { isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for finding references and declaration of a given `CstNode`.\r\n */\r\nexport interface References {\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\r\n\r\n    /**\r\n     * Finds all references to the target node as references (local references) or reference descriptions.\r\n     *\r\n     * @param targetNode Specified target node whose references should be returned\r\n     */\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\r\n}\r\n\r\nexport interface FindReferencesOptions {\r\n    /**\r\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\r\n     */\r\n    onlyLocal?: boolean;\r\n    /**\r\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\r\n     */\r\n    documentUri?: URI;\r\n    /**\r\n     * Whether the returned list of references should include the declaration.\r\n     */\r\n    includeDeclaration?: boolean;\r\n}\r\n\r\nexport class DefaultReferences implements References {\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly index: IndexManager;\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.index = services.shared.workspace.IndexManager;\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\r\n        if (sourceCstNode) {\r\n            const assignment = findAssignment(sourceCstNode);\r\n            const nodeElem = sourceCstNode.astNode;\r\n            if (assignment && nodeElem) {\r\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\r\n\r\n                if (isReference(reference)) {\r\n                    return reference.ref;\r\n                } else if (Array.isArray(reference)) {\r\n                    for (const ref of reference) {\r\n                        if (isReference(ref) && ref.$refNode\r\n                            && ref.$refNode.offset <= sourceCstNode.offset\r\n                            && ref.$refNode.end >= sourceCstNode.end) {\r\n                            return ref.ref;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nodeElem) {\r\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\r\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\r\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\r\n                    return nodeElem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\r\n        const astNode = this.findDeclaration(sourceCstNode);\r\n        if (astNode?.$cstNode) {\r\n            const targetNode = this.nameProvider.getNameNode(astNode);\r\n            return targetNode ?? astNode.$cstNode;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\r\n        const refs: ReferenceDescription[] = [];\r\n        if (options.includeDeclaration) {\r\n            const ref = this.getReferenceToSelf(targetNode);\r\n            if (ref) {\r\n                refs.push(ref);\r\n            }\r\n        }\r\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\r\n        if (options.documentUri) {\r\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\r\n        }\r\n        refs.push(...indexReferences);\r\n        return stream(refs);\r\n    }\r\n\r\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\r\n        const nameNode = this.nameProvider.getNameNode(targetNode);\r\n        if (nameNode) {\r\n            const doc = getDocument(targetNode);\r\n            const path = this.nodeLocator.getAstNodePath(targetNode);\r\n            return {\r\n                sourceUri: doc.uri,\r\n                sourcePath: path,\r\n                targetUri: doc.uri,\r\n                targetPath: path,\r\n                segment: toDocumentSegment(nameNode),\r\n                local: true\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Stream } from './stream.js';\r\nimport { Reduction, stream } from './stream.js';\r\n\r\n/**\r\n * A multimap is a variation of a Map that has potentially multiple values for every key.\r\n */\r\nexport class MultiMap<K, V> {\r\n\r\n    private map = new Map<K, V[]>();\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The total number of values in the multimap.\r\n     */\r\n    get size(): number {\r\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\r\n    }\r\n\r\n    /**\r\n     * Clear all entries in the multimap.\r\n     */\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\r\n     *  * Without a value, all values associated with the given key are deleted.\r\n     *\r\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\r\n     *     key / value does not exist.\r\n     */\r\n    delete(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.delete(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                const index = values.indexOf(value);\r\n                if (index >= 0) {\r\n                    if (values.length === 1) {\r\n                        this.map.delete(key);\r\n                    } else {\r\n                        values.splice(index, 1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all values associated with the given key. If no value exists,\r\n     * an empty array is returned.\r\n     *\r\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\r\n     * value and `delete` to remove a value from the multimap.\r\n     */\r\n    get(key: K): readonly V[] {\r\n        return this.map.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\r\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\r\n     */\r\n    has(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.has(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                return values.indexOf(value) >= 0;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given key / value pair to the multimap.\r\n     */\r\n    add(key: K, value: V): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(value);\r\n        } else {\r\n            this.map.set(key, [value]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the given set of key / value pairs to the multimap.\r\n     */\r\n    addAll(key: K, values: Iterable<V>): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(...values);\r\n        } else {\r\n            this.map.set(key, Array.from(values));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invokes the given callback function for every key / value pair in the multimap.\r\n     */\r\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\r\n        this.map.forEach((array, key) =>\r\n            array.forEach(value => callbackfn(value, key, this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator of key, value pairs for every entry in the map.\r\n     */\r\n    [Symbol.iterator](): Iterator<[K, V]> {\r\n        return this.entries().iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): Stream<[K, V]> {\r\n        return stream(this.map.entries())\r\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of keys in the map.\r\n     */\r\n    keys(): Stream<K> {\r\n        return stream(this.map.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of values in the map.\r\n     */\r\n    values(): Stream<V> {\r\n        return stream(this.map.values()).flat();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value set pairs for every key in the map.\r\n     */\r\n    entriesGroupedByKey(): Stream<[K, V[]]> {\r\n        return stream(this.map.entries());\r\n    }\r\n\r\n}\r\n\r\nexport class BiMap<K, V> {\r\n\r\n    private map = new Map<K, V>();\r\n    private inverse = new Map<V, K>();\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n        this.inverse.clear();\r\n    }\r\n\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        this.inverse.set(value, key);\r\n        return this;\r\n    }\r\n\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n\r\n    getKey(value: V): K | undefined {\r\n        return this.inverse.get(value);\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        const value = this.map.get(key);\r\n        if (value !== undefined) {\r\n            this.map.delete(key);\r\n            this.inverse.delete(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Language-specific service for precomputing global and local scopes. The service methods are executed\r\n * as the first and second phase in the `DocumentBuilder`.\r\n */\r\nexport interface ScopeComputation {\r\n\r\n    /**\r\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\r\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\r\n     * they can be referenced from other documents.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\r\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\r\n     * initial indexing where this method is used.\r\n     *\r\n     * @param document The document from which to gather exported AST nodes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\r\n\r\n    /**\r\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\r\n     * resolving references to symbols in the same document. The result is a multimap assigning a\r\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\r\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\r\n     * resolution depends on the scope computation phase to be completed.\r\n     *\r\n     * @param document The document in which to compute scopes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\r\n\r\n}\r\n\r\n/**\r\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\r\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\r\n * contained child nodes.\r\n *\r\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\r\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\r\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\r\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\r\n * are _invisible_ by default, but that can be changed by customizing this service.\r\n */\r\nexport class DefaultScopeComputation implements ScopeComputation {\r\n\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n    }\r\n\r\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\r\n     * The list of children to be considered is determined by the function parameter {@link children}.\r\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\r\n     *\r\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\r\n     * @param document The document containing the AST node to be exported.\r\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCancelled` if a user action occurs during execution.\r\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\r\n     */\r\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        const exports: AstNodeDescription[] = [];\r\n\r\n        this.exportNode(parentNode, exports, document);\r\n        for (const node of children(parentNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.exportNode(node, exports, document);\r\n        }\r\n        return exports;\r\n    }\r\n\r\n    /**\r\n     * Add a single node to the list of exports if it has a name. Override this method to change how\r\n     * symbols are exported, e.g. by modifying their exported name.\r\n     */\r\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\r\n        const name = this.nameProvider.getName(node);\r\n        if (name) {\r\n            exports.push(this.descriptions.createDescription(node, name, document));\r\n        }\r\n    }\r\n\r\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\r\n        const rootNode = document.parseResult.value;\r\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\r\n        // Here we navigate the full AST - local scopes shall be available in the whole document\r\n        for (const node of streamAllContents(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.processNode(node, document, scopes);\r\n        }\r\n        return scopes;\r\n    }\r\n\r\n    /**\r\n     * Process a single node during scopes computation. The default implementation makes the node visible\r\n     * in the subtree of its container (if the node has a name). Override this method to change this,\r\n     * e.g. by increasing the visibility to a higher level in the AST.\r\n     */\r\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\r\n        const container = node.$container;\r\n        if (container) {\r\n            const name = this.nameProvider.getName(node);\r\n            if (name) {\r\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNodeDescription } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\r\n\r\n/**\r\n * A scope describes what target elements are visible from a specific cross-reference context.\r\n */\r\nexport interface Scope {\r\n\r\n    /**\r\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\r\n     * If multiple matching elements are present, the selection of the returned element should be done\r\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\r\n     *\r\n     * @param name Name of the cross-reference target as it appears in the source text.\r\n     */\r\n    getElement(name: string): AstNodeDescription | undefined;\r\n\r\n    /**\r\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\r\n     * shown in the editor.\r\n     */\r\n    getAllElements(): Stream<AstNodeDescription>;\r\n\r\n}\r\n\r\nexport interface ScopeOptions {\r\n    caseInsensitive?: boolean;\r\n}\r\n\r\n/**\r\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\r\n * the next level of elements, which are queried when a target element is not found in the stream provided\r\n * to this scope.\r\n */\r\nexport class StreamScope implements Scope {\r\n    readonly elements: Stream<AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = elements;\r\n        this.outerScope = outerScope;\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        if (this.outerScope) {\r\n            return this.elements.concat(this.outerScope.getAllElements());\r\n        } else {\r\n            return this.elements;\r\n        }\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const local = this.caseInsensitive\r\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\r\n            : this.elements.find(e => e.name === name);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class MapScope implements Scope {\r\n    readonly elements: Map<string, AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = new Map();\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n        for (const element of elements) {\r\n            const name = this.caseInsensitive\r\n                ? element.name.toLowerCase()\r\n                : element.name;\r\n            this.elements.set(name, element);\r\n        }\r\n        this.outerScope = outerScope;\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\r\n        const local = this.elements.get(localName);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        let elementStream = stream(this.elements.values());\r\n        if (this.outerScope) {\r\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\r\n        }\r\n        return elementStream;\r\n    }\r\n\r\n}\r\n\r\nexport const EMPTY_SCOPE: Scope = {\r\n    getElement(): undefined {\r\n        return undefined;\r\n    },\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        return EMPTY_STREAM;\r\n    }\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Disposable } from './disposable.js';\r\nimport type { URI } from './uri-utils.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { DocumentState } from '../workspace/documents.js';\r\n\r\nexport abstract class DisposableCache implements Disposable {\r\n\r\n    protected toDispose: Disposable[] = [];\r\n    protected isDisposed = false;\r\n\r\n    onDispose(disposable: Disposable): void {\r\n        this.toDispose.push(disposable);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.throwIfDisposed();\r\n        this.clear();\r\n        this.isDisposed = true;\r\n        this.toDispose.forEach(disposable => disposable.dispose());\r\n    }\r\n\r\n    protected throwIfDisposed(): void {\r\n        if (this.isDisposed) {\r\n            throw new Error('This cache has already been disposed');\r\n        }\r\n    }\r\n\r\n    abstract clear(): void;\r\n}\r\n\r\nexport class SimpleCache<K, V> extends DisposableCache {\r\n    protected readonly cache = new Map<K, V>();\r\n\r\n    has(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    set(key: K, value: V): void {\r\n        this.throwIfDisposed();\r\n        this.cache.set(key, value);\r\n    }\r\n\r\n    get(key: K): V | undefined;\r\n    get(key: K, provider: () => V): V;\r\n    get(key: K, provider?: () => V): V | undefined {\r\n        this.throwIfDisposed();\r\n        if (this.cache.has(key)) {\r\n            return this.cache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            this.cache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.throwIfDisposed();\r\n        this.cache.clear();\r\n    }\r\n}\r\n\r\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\r\n\r\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\r\n    private readonly converter: (input: Context) => ContextKey | Context;\r\n\r\n    constructor(converter?: (input: Context) => ContextKey) {\r\n        super();\r\n        this.converter = converter ?? (value => value);\r\n    }\r\n\r\n    has(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).has(key);\r\n    }\r\n\r\n    set(contextKey: Context, key: Key, value: Value): void {\r\n        this.throwIfDisposed();\r\n        this.cacheForContext(contextKey).set(key, value);\r\n    }\r\n\r\n    get(contextKey: Context, key: Key): Value | undefined;\r\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\r\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\r\n        this.throwIfDisposed();\r\n        const contextCache = this.cacheForContext(contextKey);\r\n        if (contextCache.has(key)) {\r\n            return contextCache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            contextCache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).delete(key);\r\n    }\r\n\r\n    clear(): void;\r\n    clear(contextKey: Context): void;\r\n    clear(contextKey?: Context): void {\r\n        this.throwIfDisposed();\r\n        if (contextKey) {\r\n            const mapKey = this.converter(contextKey);\r\n            this.cache.delete(mapKey);\r\n        } else {\r\n            this.cache.clear();\r\n        }\r\n    }\r\n\r\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\r\n        const mapKey = this.converter(contextKey);\r\n        let documentCache = this.cache.get(mapKey);\r\n        if (!documentCache) {\r\n            documentCache = new Map();\r\n            this.cache.set(mapKey, documentCache);\r\n        }\r\n        return documentCache;\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to a document.\r\n * If this document is changed or deleted, all associated key/value pairs are deleted.\r\n */\r\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\r\n\r\n    /**\r\n     * Creates a new document cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     *\r\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\r\n     * which triggers on all documents that have been affected by this change, assuming that the\r\n     * state is `DocumentState.Linked` or a later state.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super(uri => uri.toString());\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\r\n                this.clear(document.uri.toString());\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                for (const uri of deleted) { // react only on deleted documents\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\r\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\r\n                for (const uri of allUris) {\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to the whole workspace.\r\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\r\n */\r\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\r\n\r\n    /**\r\n     * Creates a new workspace cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super();\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\r\n                this.clear();\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                if (deleted.length > 0) { // react only on deleted documents\r\n                    this.clear();\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => { // react on both changed and deleted documents\r\n                this.clear();\r\n            }));\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { Scope, ScopeOptions} from './scope.js';\r\nimport { MapScope, StreamScope } from './scope.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { WorkspaceCache } from '../utils/caching.js';\r\n\r\n/**\r\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\r\n */\r\nexport interface ScopeProvider {\r\n\r\n    /**\r\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\r\n     * identifier.\r\n     *\r\n     * @param context Information about the reference for which a scope is requested.\r\n     */\r\n    getScope(context: ReferenceInfo): Scope;\r\n\r\n}\r\n\r\nexport class DefaultScopeProvider implements ScopeProvider {\r\n\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n    protected readonly indexManager: IndexManager;\r\n\r\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\r\n    }\r\n\r\n    getScope(context: ReferenceInfo): Scope {\r\n        const scopes: Array<Stream<AstNodeDescription>> = [];\r\n        const referenceType = this.reflection.getReferenceType(context);\r\n\r\n        const precomputed = getDocument(context.container).precomputedScopes;\r\n        if (precomputed) {\r\n            let currentNode: AstNode | undefined = context.container;\r\n            do {\r\n                const allDescriptions = precomputed.get(currentNode);\r\n                if (allDescriptions.length > 0) {\r\n                    scopes.push(stream(allDescriptions).filter(\r\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\r\n                }\r\n                currentNode = currentNode.$container;\r\n            } while (currentNode);\r\n        }\r\n\r\n        let result: Scope = this.getGlobalScope(referenceType, context);\r\n        for (let i = scopes.length - 1; i >= 0; i--) {\r\n            result = this.createScope(scopes[i], result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST node descriptions.\r\n     */\r\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        return new StreamScope(stream(elements), outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\r\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\r\n     */\r\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        const s = stream(elements).map(e => {\r\n            const name = this.nameProvider.getName(e);\r\n            if (name) {\r\n                return this.descriptions.createDescription(e, name);\r\n            }\r\n            return undefined;\r\n        }).nonNullable();\r\n        return new StreamScope(s, outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a global scope filtered for the given reference type.\r\n     */\r\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\r\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI } from 'vscode-uri';\r\nimport type { CommentProvider } from '../documentation/comment-provider.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\n\r\nexport interface JsonSerializeOptions {\r\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\r\n    space?: string | number;\r\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\r\n    refText?: boolean;\r\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\r\n    sourceText?: boolean;\r\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\r\n    textRegions?: boolean;\r\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\r\n    comments?: boolean;\r\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\r\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\r\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: URI, reference: Reference) => string\r\n}\r\n\r\nexport interface JsonDeserializeOptions {\r\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: string) => URI\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\r\n */\r\nexport interface AstNodeWithTextRegion extends AstNode {\r\n    $sourceText?: string;\r\n    $textRegion?: AstNodeRegionWithAssignments;\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry a semantically relevant comment.\r\n */\r\nexport interface AstNodeWithComment extends AstNode {\r\n    $comment?: string;\r\n}\r\n\r\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\r\n    return typeof (node as AstNodeWithComment).$comment === 'string';\r\n}\r\n\r\n/**\r\n * A {@link DocumentSegment} representing the definition area of an AstNode within the DSL text.\r\n * Usually contains text region information on all assigned property values of the AstNode,\r\n * and may contain the defining file's URI as string.\r\n */\r\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\r\n    /**\r\n     * A record containing an entry for each assigned property of the AstNode.\r\n     * The key is equal to the property name and the value is an array of the property values'\r\n     * text regions, regardless of whether the property is a single value or list property.\r\n     */\r\n    assignments?: Record<string, DocumentSegment[]>;\r\n    /**\r\n     * The AstNode defining file's URI as string\r\n     */\r\n    documentURI?: string;\r\n}\r\n\r\n/**\r\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\r\n */\r\nexport interface JsonSerializer {\r\n    /**\r\n     * Serialize an `AstNode` into a JSON `string`.\r\n     * @param node The `AstNode` to be serialized.\r\n     * @param options Serialization options\r\n     */\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\r\n    /**\r\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\r\n     */\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\r\n}\r\n\r\n/**\r\n * A cross-reference in the serialized JSON representation of an AstNode.\r\n */\r\ninterface IntermediateReference {\r\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\r\n    $ref?: string\r\n    /** The actual text used to look up the reference target in the surrounding scope. */\r\n    $refText?: string\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    $error?: string\r\n}\r\n\r\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\r\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\r\n}\r\n\r\nexport class DefaultJsonSerializer implements JsonSerializer {\r\n\r\n    /** The set of AstNode properties to be ignored by the serializer. */\r\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\r\n\r\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\r\n    protected currentDocument: LangiumDocument | undefined;\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string {\r\n        const serializeOptions = options ?? {};\r\n        const specificReplacer = options?.replacer;\r\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, serializeOptions);\r\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\r\n\r\n        try {\r\n            this.currentDocument = getDocument(node);\r\n            return JSON.stringify(node, replacer, options?.space);\r\n        } finally {\r\n            this.currentDocument = undefined;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T {\r\n        const deserializeOptions = options ?? {};\r\n        const root = JSON.parse(content);\r\n        this.linkNode(root, root, deserializeOptions);\r\n        return root;\r\n    }\r\n\r\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\r\n        if (this.ignoreProperties.has(key)) {\r\n            return undefined;\r\n        } else if (isReference(value)) {\r\n            const refValue = value.ref;\r\n            const $refText = refText ? value.$refText : undefined;\r\n            if (refValue) {\r\n                const targetDocument = getDocument(refValue);\r\n                let targetUri = '';\r\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\r\n                    if (uriConverter) {\r\n                        targetUri = uriConverter(targetDocument.uri, value);\r\n                    } else {\r\n                        targetUri = targetDocument.uri.toString();\r\n                    }\r\n                }\r\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\r\n                return {\r\n                    $ref: `${targetUri}#${targetPath}`,\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            } else {\r\n                return {\r\n                    $error: value.error?.message ?? 'Could not resolve reference',\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            }\r\n        } else if (isAstNode(value)) {\r\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\r\n            if (textRegions) {\r\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\r\n                if ((!key || value.$document) && astNode?.$textRegion) {\r\n                    // The document URI is added to the root node of the resulting JSON tree\r\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\r\n                }\r\n            }\r\n            if (sourceText && !key) {\r\n                astNode ??= { ...value };\r\n                astNode.$sourceText = value.$cstNode?.text;\r\n            }\r\n            if (comments) {\r\n                astNode ??= { ...value };\r\n                const comment = this.commentProvider.getComment(value);\r\n                if (comment) {\r\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\r\n                }\r\n            }\r\n            return astNode ?? value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\r\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\r\n            offset: cstNode.offset,\r\n            end: cstNode.end,\r\n            length: cstNode.length,\r\n            range: cstNode.range,\r\n        };\r\n\r\n        if (node.$cstNode) {\r\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\r\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\r\n\r\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\r\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\r\n                if (propertyAssignments.length !== 0) {\r\n                    assignments[key] = propertyAssignments;\r\n                }\r\n            });\r\n\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\r\n        for (const [propertyName, item] of Object.entries(node)) {\r\n            if (Array.isArray(item)) {\r\n                for (let index = 0; index < item.length; index++) {\r\n                    const element = item[index];\r\n                    if (isIntermediateReference(element)) {\r\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\r\n                    } else if (isAstNode(element)) {\r\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\r\n                    }\r\n                }\r\n            } else if (isIntermediateReference(item)) {\r\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\r\n            } else if (isAstNode(item)) {\r\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\r\n            }\r\n        }\r\n        const mutable = node as Mutable<AstNode>;\r\n        mutable.$container = container;\r\n        mutable.$containerProperty = containerProperty;\r\n        mutable.$containerIndex = containerIndex;\r\n    }\r\n\r\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\r\n        let refText = reference.$refText;\r\n        let error = reference.$error;\r\n        if (reference.$ref) {\r\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\r\n            if (isAstNode(ref)) {\r\n                if (!refText) {\r\n                    refText = this.nameProvider.getName(ref);\r\n                }\r\n                return {\r\n                    $refText: refText ?? '',\r\n                    ref\r\n                };\r\n            } else {\r\n                error = ref;\r\n            }\r\n        }\r\n        if (error) {\r\n            const ref: Mutable<Reference> = {\r\n                $refText: refText ?? ''\r\n            };\r\n            ref.error = {\r\n                container,\r\n                property,\r\n                message: error,\r\n                reference: ref\r\n            };\r\n            return ref;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\r\n        try {\r\n            const fragmentIndex = uri.indexOf('#');\r\n            if (fragmentIndex === 0) {\r\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\r\n                if (!node) {\r\n                    return 'Could not resolve path: ' + uri;\r\n                }\r\n                return node;\r\n            }\r\n            if (fragmentIndex < 0) {\r\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\r\n                const document = this.langiumDocuments.getDocument(documentUri);\r\n                if (!document) {\r\n                    return 'Could not find document for URI: ' + uri;\r\n                }\r\n                return document.parseResult.value;\r\n            }\r\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\r\n            const document = this.langiumDocuments.getDocument(documentUri);\r\n            if (!document) {\r\n                return 'Could not find document for URI: ' + uri;\r\n            }\r\n            if (fragmentIndex === uri.length - 1) {\r\n                return document.parseResult.value;\r\n            }\r\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\r\n            if (!node) {\r\n                return 'Could not resolve URI: ' + uri;\r\n            }\r\n            return node;\r\n        } catch (err) {\r\n            return String(err);\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { TextDocumentProvider } from './workspace/documents.js';\r\nimport { UriUtils, type URI } from './utils/uri-utils.js';\r\n\r\n/**\r\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\r\n * These are resolved via the URI of a text document.\r\n */\r\nexport interface ServiceRegistry {\r\n\r\n    /**\r\n     * Register a language via its injected services.\r\n     */\r\n    register(language: LangiumCoreServices): void;\r\n\r\n    /**\r\n     * Retrieve the language-specific services for the given URI. In case only one language is\r\n     * registered, it may be used regardless of the URI format.\r\n     */\r\n    getServices(uri: URI): LangiumCoreServices;\r\n\r\n    /**\r\n     * Check whether services are available for the given URI.\r\n     */\r\n    hasServices(uri: URI): boolean;\r\n\r\n    /**\r\n     * The full set of registered language services.\r\n     */\r\n    readonly all: readonly LangiumCoreServices[];\r\n}\r\n\r\n/**\r\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\r\n */\r\nexport class DefaultServiceRegistry implements ServiceRegistry {\r\n\r\n    protected singleton?: LangiumCoreServices;\r\n    protected readonly languageIdMap = new Map<string, LangiumCoreServices>();\r\n    protected readonly fileExtensionMap = new Map<string, LangiumCoreServices>();\r\n\r\n    /**\r\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\r\n     */\r\n    protected get map(): Map<string, LangiumCoreServices> | undefined {\r\n        return this.fileExtensionMap;\r\n    }\r\n\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n\r\n    constructor(services?: LangiumSharedCoreServices) {\r\n        this.textDocuments = services?.workspace.TextDocuments;\r\n    }\r\n\r\n    register(language: LangiumCoreServices): void {\r\n        const data = language.LanguageMetaData;\r\n        for (const ext of data.fileExtensions) {\r\n            if (this.fileExtensionMap.has(ext)) {\r\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\r\n            }\r\n            this.fileExtensionMap.set(ext, language);\r\n        }\r\n        this.languageIdMap.set(data.languageId, language);\r\n        if (this.languageIdMap.size === 1) {\r\n            this.singleton = language;\r\n        } else {\r\n            this.singleton = undefined;\r\n        }\r\n    }\r\n\r\n    getServices(uri: URI): LangiumCoreServices {\r\n        if (this.singleton !== undefined) {\r\n            return this.singleton;\r\n        }\r\n        if (this.languageIdMap.size === 0) {\r\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\r\n        }\r\n        const languageId = this.textDocuments?.get(uri)?.languageId;\r\n        if (languageId !== undefined) {\r\n            const services = this.languageIdMap.get(languageId);\r\n            if (services) {\r\n                return services;\r\n            }\r\n        }\r\n        const ext = UriUtils.extname(uri);\r\n        const services = this.fileExtensionMap.get(ext);\r\n        if (!services) {\r\n            if (languageId) {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\r\n            } else {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\r\n            }\r\n        }\r\n        return services;\r\n    }\r\n\r\n    hasServices(uri: URI): boolean {\r\n        try {\r\n            this.getServices(uri);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get all(): readonly LangiumCoreServices[] {\r\n        return Array.from(this.languageIdMap.values());\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\r\nimport { assertUnreachable } from '../index.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport { isOperationCancelled } from '../utils/promise-utils.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\n\r\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\r\n    /** The AST node to which the diagnostic is attached. */\r\n    node: N;\r\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\r\n    property?: P;\r\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\r\n    keyword?: string;\r\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\r\n    index?: number;\r\n    /** If you want to create a diagnostic independent to any property, use the range property. */\r\n    range?: Range;\r\n    /** The diagnostic's code, which usually appear in the user interface. */\r\n    code?: integer | string;\r\n    /** An optional property to describe the error code. */\r\n    codeDescription?: CodeDescription;\r\n    /** Additional metadata about the diagnostic. */\r\n    tags?: DiagnosticTag[];\r\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\r\n    relatedInformation?: DiagnosticRelatedInformation[];\r\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\r\n    data?: unknown;\r\n}\r\n\r\n/**\r\n * Shape of information commonly used in the `data` field of diagnostics.\r\n */\r\nexport interface DiagnosticData {\r\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\r\n    code: string\r\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\r\n    actionSegment?: DocumentSegment\r\n    /** Specifies where to apply the code action in the form of a `Range`. */\r\n    actionRange?: Range\r\n}\r\n\r\n/**\r\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\r\n */\r\nexport function diagnosticData(code: string): DiagnosticData {\r\n    return { code };\r\n}\r\n\r\nexport type ValidationSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport type ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => void\r\n\r\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for describing functions which will be called once before or after all the AstNodes of an AST/Langium document are validated.\r\n *\r\n * The AST is represented by its root AstNode.\r\n *\r\n * The given validation acceptor helps to report some early or lately detected issues.\r\n *\r\n * The 'categories' indicate, which validation categories are executed for all the AstNodes.\r\n * This helps to tailor the preparations/tear-down logic to the actually executed checks on the nodes.\r\n *\r\n * It is recommended to support interrupts during long-running logic with 'interruptAndCheck(cancelToken)'.\r\n */\r\nexport type ValidationPreparation = (rootNode: AstNode, accept: ValidationAcceptor, categories: ValidationCategory[], cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\r\n *\r\n * ```ts\r\n *   const checks: ValidationChecks<StatemachineAstType> = {\r\n *       State: validator.checkStateNameStartsWithCapital\r\n *    };\r\n * ```\r\n *\r\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\r\n *\r\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\r\n */\r\nexport type ValidationChecks<T> = {\r\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\r\n} & {\r\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\r\n}\r\n\r\n/**\r\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\r\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\r\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\r\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\r\n * or with an explicit command, etc.\r\n *\r\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\r\n * for custom validation checks.\r\n */\r\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\r\n\r\nexport namespace ValidationCategory {\r\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\r\n}\r\n\r\ntype ValidationCheckEntry = {\r\n    check: ValidationCheck\r\n    category: ValidationCategory\r\n}\r\n\r\n/**\r\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\r\n */\r\nexport class ValidationRegistry {\r\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\r\n    private readonly reflection: AstReflection;\r\n\r\n    private entriesBefore: ValidationPreparation[] = [];\r\n    private entriesAfter: ValidationPreparation[] = [];\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n    }\r\n\r\n    /**\r\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\r\n     * or an array of validation checks.\r\n     *\r\n     * @param checksRecord Set of validation checks to register.\r\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\r\n        if (category === 'built-in') {\r\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\r\n        }\r\n        for (const [type, ch] of Object.entries(checksRecord)) {\r\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\r\n            if (Array.isArray(callbacks)) {\r\n                for (const check of callbacks) {\r\n                    const entry: ValidationCheckEntry = {\r\n                        check: this.wrapValidationException(check, thisObj),\r\n                        category\r\n                    };\r\n                    this.addEntry(type, entry);\r\n                }\r\n            } else if (typeof callbacks === 'function') {\r\n                const entry: ValidationCheckEntry = {\r\n                    check: this.wrapValidationException(callbacks, thisObj),\r\n                    category\r\n                };\r\n                this.addEntry(type, entry);\r\n            } else {\r\n                assertUnreachable(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\r\n        return async (node, accept, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\r\n        };\r\n    }\r\n\r\n    protected async handleException(functionality: () => MaybePromise<void>, messageContext: string, accept: ValidationAcceptor, node: AstNode): Promise<void> {\r\n        try {\r\n            await functionality();\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error(`${messageContext}:`, err);\r\n            if (err instanceof Error && err.stack) {\r\n                console.error(err.stack);\r\n            }\r\n            const messageDetails = err instanceof Error ? err.message : String(err);\r\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\r\n        }\r\n    }\r\n\r\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\r\n        if (type === 'AstNode') {\r\n            this.entries.add('AstNode', entry);\r\n            return;\r\n        }\r\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\r\n            this.entries.add(subtype, entry);\r\n        }\r\n    }\r\n\r\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\r\n        let checks = stream(this.entries.get(type))\r\n            .concat(this.entries.get('AstNode'));\r\n        if (categories) {\r\n            checks = checks.filter(entry => categories.includes(entry.category));\r\n        }\r\n        return checks.map(entry => entry.check);\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\r\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map for mapping names to nodes could be established.\r\n     * During the usual checks on the nodes, they are put into this map with their name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerBeforeDocument(checkBefore: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\r\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map with all the collected nodes and their names is checked\r\n     * and validation hints are created for all nodes with the same name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerAfterDocument(checkAfter: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\r\n    }\r\n\r\n    protected wrapPreparationException(check: ValidationPreparation, messageContext: string, thisObj: unknown): ValidationPreparation {\r\n        return async (rootNode, accept, categories, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\r\n        };\r\n    }\r\n\r\n    get checksBefore(): ValidationPreparation[] {\r\n        return this.entriesBefore;\r\n    }\r\n\r\n    get checksAfter(): ValidationPreparation[] {\r\n        return this.entriesAfter;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { MismatchedTokenException } from 'chevrotain';\r\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\r\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry, ValidationSeverity } from './validation-registry.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { diagnosticData } from './validation-registry.js';\r\nimport type { LexingDiagnostic, LexingDiagnosticSeverity } from '../parser/token-builder.js';\r\n\r\nexport interface ValidationOptions {\r\n    /**\r\n     * If this is set, only the checks associated with these categories are executed; otherwise\r\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\r\n     */\r\n    categories?: ValidationCategory[];\r\n    /** If true, no further diagnostics are reported if there are lexing errors. */\r\n    stopAfterLexingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are parsing errors. */\r\n    stopAfterParsingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are linking errors. */\r\n    stopAfterLinkingErrors?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service for validating `LangiumDocument`s.\r\n */\r\nexport interface DocumentValidator {\r\n    /**\r\n     * Validates the whole specified document.\r\n     *\r\n     * @param document specified document to validate\r\n     * @param options options to control the validation process\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\r\n}\r\n\r\nexport class DefaultDocumentValidator implements DocumentValidator {\r\n\r\n    protected readonly validationRegistry: ValidationRegistry;\r\n    protected readonly metadata: LanguageMetaData;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.validationRegistry = services.validation.ValidationRegistry;\r\n        this.metadata = services.LanguageMetaData;\r\n    }\r\n\r\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const parseResult = document.parseResult;\r\n        const diagnostics: Diagnostic[] = [];\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        if (!options.categories || options.categories.includes('built-in')) {\r\n            this.processLexingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processParsingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processLinkingErrors(document, diagnostics, options);\r\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\r\n                return diagnostics;\r\n            }\r\n        }\r\n\r\n        // Process custom validations\r\n        try {\r\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error('An error occurred during validation:', err);\r\n        }\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        return diagnostics;\r\n    }\r\n\r\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...parseResult.lexerReport?.diagnostics ?? []] as LexingDiagnostic[];\r\n        for (const lexerDiagnostic of lexerDiagnostics) {\r\n            const severity = lexerDiagnostic.severity ?? 'error';\r\n            const diagnostic: Diagnostic = {\r\n                severity: toDiagnosticSeverity(severity),\r\n                range: {\r\n                    start: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! - 1\r\n                    },\r\n                    end: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! + lexerDiagnostic.length - 1\r\n                    }\r\n                },\r\n                message: lexerDiagnostic.message,\r\n                data: toDiagnosticData(severity),\r\n                source: this.getSource()\r\n            };\r\n            diagnostics.push(diagnostic);\r\n        }\r\n    }\r\n\r\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const parserError of parseResult.parserErrors) {\r\n            let range: Range | undefined = undefined;\r\n            // We can run into the chevrotain error recovery here\r\n            // The token contained in the parser error might be automatically inserted\r\n            // In this case every position value will be `NaN`\r\n            if (isNaN(parserError.token.startOffset)) {\r\n                // Some special parser error types contain a `previousToken`\r\n                // We can simply append our diagnostic to that token\r\n                if ('previousToken' in parserError) {\r\n                    const token = (parserError as MismatchedTokenException).previousToken;\r\n                    if (!isNaN(token.startOffset)) {\r\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\r\n                        range = { start: position, end: position};\r\n                    } else {\r\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\r\n                        // Point to document start\r\n                        const position: Position = { line: 0, character: 0 };\r\n                        range = { start: position, end: position};\r\n                    }\r\n                }\r\n            } else {\r\n                range = tokenToRange(parserError.token);\r\n            }\r\n            if (range) {\r\n                const diagnostic: Diagnostic = {\r\n                    severity: toDiagnosticSeverity('error'),\r\n                    range,\r\n                    message: parserError.message,\r\n                    data: diagnosticData(DocumentValidator.ParsingError),\r\n                    source: this.getSource()\r\n                };\r\n                diagnostics.push(diagnostic);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const reference of document.references) {\r\n            const linkingError = reference.error;\r\n            if (linkingError) {\r\n                const info: DiagnosticInfo<AstNode, string> = {\r\n                    node: linkingError.container,\r\n                    property: linkingError.property,\r\n                    index: linkingError.index,\r\n                    data: {\r\n                        code: DocumentValidator.LinkingError,\r\n                        containerType: linkingError.container.$type,\r\n                        property: linkingError.property,\r\n                        refText: linkingError.reference.$refText\r\n                    } satisfies LinkingErrorData\r\n                };\r\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const validationItems: Diagnostic[] = [];\r\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => {\r\n            validationItems.push(this.toDiagnostic(severity, message, info));\r\n        };\r\n\r\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\r\n\r\n        return validationItems;\r\n    }\r\n\r\n    protected async validateAstBefore(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksBefore = this.validationRegistry.checksBefore;\r\n        for (const checkBefore of checksBefore) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkBefore(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected async validateAstNodes(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        await Promise.all(streamAst(rootNode).map(async node => {\r\n            await interruptAndCheck(cancelToken);\r\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\r\n            for (const check of checks) {\r\n                await check(node, acceptor, cancelToken);\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected async validateAstAfter(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksAfter = this.validationRegistry.checksAfter;\r\n        for (const checkAfter of checksAfter) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkAfter(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected toDiagnostic<N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N, string>): Diagnostic {\r\n        return {\r\n            message,\r\n            range: getDiagnosticRange(info),\r\n            severity: toDiagnosticSeverity(severity),\r\n            code: info.code,\r\n            codeDescription: info.codeDescription,\r\n            tags: info.tags,\r\n            relatedInformation: info.relatedInformation,\r\n            data: info.data,\r\n            source: this.getSource()\r\n        };\r\n    }\r\n\r\n    protected getSource(): string | undefined {\r\n        return this.metadata.languageId;\r\n    }\r\n}\r\n\r\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\r\n    if (info.range) {\r\n        return info.range;\r\n    }\r\n    let cstNode: CstNode | undefined;\r\n    if (typeof info.property === 'string') {\r\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\r\n    } else if (typeof info.keyword === 'string') {\r\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\r\n    }\r\n    cstNode ??= info.node.$cstNode;\r\n    if (!cstNode) {\r\n        return {\r\n            start: { line: 0, character: 0 },\r\n            end: { line: 0, character: 0 }\r\n        };\r\n    }\r\n    return cstNode.range;\r\n}\r\n\r\n/**\r\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\r\n *\r\n * @param severity The lexing diagnostic severity\r\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\r\n */\r\nexport function toDiagnosticSeverity(severity: LexingDiagnosticSeverity): DiagnosticSeverity {\r\n    switch (severity) {\r\n        case 'error':\r\n            return 1 satisfies typeof DiagnosticSeverity.Error;\r\n        case 'warning':\r\n            return 2 satisfies typeof DiagnosticSeverity.Warning;\r\n        case 'info':\r\n            return 3 satisfies typeof DiagnosticSeverity.Information;\r\n        case 'hint':\r\n            return 4 satisfies typeof DiagnosticSeverity.Hint;\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport function toDiagnosticData(severity: LexingDiagnosticSeverity): DiagnosticData {\r\n    switch (severity) {\r\n        case 'error':\r\n            return diagnosticData(DocumentValidator.LexingError);\r\n        case 'warning':\r\n            return diagnosticData(DocumentValidator.LexingWarning);\r\n        case 'info':\r\n            return diagnosticData(DocumentValidator.LexingInfo);\r\n        case 'hint':\r\n            return diagnosticData(DocumentValidator.LexingHint);\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport namespace DocumentValidator {\r\n    export const LexingError = 'lexing-error';\r\n    export const LexingWarning = 'lexing-warning';\r\n    export const LexingInfo = 'lexing-info';\r\n    export const LexingHint = 'lexing-hint';\r\n    export const ParsingError = 'parsing-error';\r\n    export const LinkingError = 'linking-error';\r\n}\r\n\r\nexport interface LinkingErrorData extends DiagnosticData {\r\n    containerType: string\r\n    property: string\r\n    refText: string\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from './ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isLinkingError } from '../syntax-tree.js';\r\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\r\n */\r\nexport interface AstNodeDescriptionProvider {\r\n\r\n    /**\r\n     * Create a description for the given AST node. This service method is typically used while indexing\r\n     * the contents of a document and during scope computation.\r\n     *\r\n     * @param node An AST node.\r\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\r\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\r\n     *     of your language.\r\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\r\n     */\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\r\n\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n    }\r\n\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription {\r\n        const doc = document ?? getDocument(node);\r\n        name ??= this.nameProvider.getName(node);\r\n        const path = this.astNodeLocator.getAstNodePath(node);\r\n        if (!name) {\r\n            throw new Error(`Node at path ${path} has no name.`);\r\n        }\r\n        let nameNodeSegment: DocumentSegment | undefined;\r\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\r\n        return {\r\n            node,\r\n            name,\r\n            get nameSegment() {\r\n                return nameSegmentGetter();\r\n            },\r\n            selectionSegment: toDocumentSegment(node.$cstNode),\r\n            type: node.$type,\r\n            documentUri: doc.uri,\r\n            path\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a cross-reference within a document or between two documents.\r\n */\r\nexport interface ReferenceDescription {\r\n    /** URI of the document that holds a reference */\r\n    sourceUri: URI\r\n    /** Path to AstNode that holds a reference */\r\n    sourcePath: string\r\n    /** Target document uri */\r\n    targetUri: URI\r\n    /** Path to the target AstNode inside the document */\r\n    targetPath: string\r\n    /** Segment of the reference text. */\r\n    segment: DocumentSegment\r\n    /** Marks a local reference i.e. a cross reference inside a document.   */\r\n    local?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\r\n * to determine which documents are affected and should be rebuilt when a document is changed.\r\n */\r\nexport interface ReferenceDescriptionProvider {\r\n    /**\r\n     * Create descriptions of all cross-references found in the given document. These descriptions are\r\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\r\n     * a document change is reported by the client.\r\n     *\r\n     * @param document The document in which to gather cross-references.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\r\n}\r\n\r\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\r\n\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\r\n        const descr: ReferenceDescription[] = [];\r\n        const rootNode = document.parseResult.value;\r\n        for (const astNode of streamAst(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\r\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\r\n                const description = this.createDescription(refInfo);\r\n                if (description) {\r\n                    descr.push(description);\r\n                }\r\n            });\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\r\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\r\n        const refCstNode = refInfo.reference.$refNode;\r\n        if (!targetNodeDescr || !refCstNode) {\r\n            return undefined;\r\n        }\r\n        const docUri = getDocument(refInfo.container).uri;\r\n        return {\r\n            sourceUri: docUri,\r\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\r\n            targetUri: targetNodeDescr.documentUri,\r\n            targetPath: targetNodeDescr.path,\r\n            segment: toDocumentSegment(refCstNode),\r\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode } from '../syntax-tree.js';\r\n\r\n/**\r\n * Language-specific service for locating an `AstNode` in a document.\r\n */\r\nexport interface AstNodeLocator {\r\n\r\n    /**\r\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\r\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\r\n     *\r\n     * @param node The `AstNode` for which to create the path.\r\n     * @returns a path represented by a `string` that identifies `node` inside its document.\r\n     * @see AstNodeLocator.getAstNode\r\n     */\r\n    getAstNodePath(node: AstNode): string;\r\n\r\n    /**\r\n     * Locates an `AstNode` inside another node by following the given path.\r\n     *\r\n     * @param node Parent element.\r\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\r\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\r\n     * @see AstNodeLocator.getAstNodePath\r\n     */\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeLocator implements AstNodeLocator {\r\n    protected segmentSeparator = '/';\r\n    protected indexSeparator = '@';\r\n\r\n    getAstNodePath(node: AstNode): string {\r\n        if (node.$container) {\r\n            const containerPath = this.getAstNodePath(node.$container);\r\n            const newSegment = this.getPathSegment(node);\r\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\r\n            return nodePath;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\r\n        if (!$containerProperty) {\r\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\r\n        }\r\n        if ($containerIndex !== undefined) {\r\n            return $containerProperty + this.indexSeparator + $containerIndex;\r\n        }\r\n        return $containerProperty;\r\n    }\r\n\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\r\n        const segments = path.split(this.segmentSeparator);\r\n        return segments.reduce((previousValue, currentValue) => {\r\n            if (!previousValue || currentValue.length === 0) {\r\n                return previousValue;\r\n            }\r\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\r\n            if (propertyIndex > 0) {\r\n                const property = currentValue.substring(0, propertyIndex);\r\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\r\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\r\n                return array?.[arrayIndex];\r\n            }\r\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\r\n        }, node) as T;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\nexport interface AsyncDisposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport namespace Disposable {\r\n    export function create(callback: () => Promise<void>): AsyncDisposable;\r\n    export function create(callback: () => void): Disposable;\r\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\r\n        return {\r\n            dispose: async () => await callback()\r\n        };\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Emitter } from '../utils/event.js';\r\nimport type {\r\n    ConfigurationItem,\r\n    DidChangeConfigurationParams,\r\n    DidChangeConfigurationRegistrationOptions,\r\n    Disposable,\r\n    Event,\r\n    InitializeParams,\r\n    InitializedParams\r\n} from 'vscode-languageserver-protocol';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { Deferred } from '../utils/promise-utils.js';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nexport interface ConfigurationProvider {\r\n\r\n    /**\r\n     * A promise that resolves when the configuration provider is ready to be used.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Returns a configuration value stored for the given language.\r\n     *\r\n     * @param language The language id\r\n     * @param configuration Configuration name\r\n     */\r\n    getConfiguration(language: string, configuration: string): Promise<any>;\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void;\r\n\r\n    /**\r\n     * Get notified after a configuration section has been updated.\r\n     */\r\n    onConfigurationSectionUpdate(callback: ConfigurationSectionUpdateListener): Disposable\r\n}\r\n\r\nexport interface ConfigurationInitializedParams extends InitializedParams {\r\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\r\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\r\n}\r\n\r\nexport interface ConfigurationSectionUpdate {\r\n    /**\r\n     * The name of the configuration section that has been updated.\r\n     */\r\n    section: string;\r\n\r\n    /**\r\n     * The updated configuration section.\r\n     */\r\n    configuration: any;\r\n}\r\n\r\nexport type ConfigurationSectionUpdateListener = (update: ConfigurationSectionUpdate) => void;\r\n\r\n/**\r\n * Base configuration provider for building up other configuration providers\r\n */\r\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected settings: Record<string, Record<string, any>> = {};\r\n    protected workspaceConfig = false;\r\n    protected onConfigurationSectionUpdateEmitter = new Emitter<ConfigurationSectionUpdate>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\r\n    }\r\n\r\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\r\n        if (this.workspaceConfig) {\r\n            if (params.register) {\r\n                // params.register(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n\r\n                const languages = this.serviceRegistry.all;\r\n                params.register({\r\n                    // Listen to configuration changes for all languages\r\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\r\n                });\r\n            }\r\n\r\n            if (params.fetchConfiguration) {\r\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\r\n                    // Fetch the configuration changes for all languages\r\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\r\n                });\r\n\r\n                // get workspace configurations (default scope URI)\r\n                const configs = await params.fetchConfiguration(configToUpdate);\r\n                configToUpdate.forEach((conf, idx) => {\r\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\r\n                });\r\n            }\r\n        }\r\n        this._ready.resolve();\r\n    }\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void {\r\n        if (!change.settings) {\r\n            return;\r\n        }\r\n        Object.keys(change.settings).forEach(section => {\r\n            const configuration = change.settings[section];\r\n            this.updateSectionConfiguration(section, configuration);\r\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\r\n        });\r\n    }\r\n\r\n    protected updateSectionConfiguration(section: string, configuration: any): void {\r\n        this.settings[section] = configuration;\r\n    }\r\n\r\n    /**\r\n    * Returns a configuration value stored for the given language.\r\n    *\r\n    * @param language The language id\r\n    * @param configuration Configuration name\r\n    */\r\n    async getConfiguration(language: string, configuration: string): Promise<any> {\r\n        await this.ready;\r\n\r\n        const sectionName = this.toSectionName(language);\r\n        if (this.settings[sectionName]) {\r\n            return this.settings[sectionName][configuration];\r\n        }\r\n    }\r\n\r\n    protected toSectionName(languageId: string): string {\r\n        return `${languageId}`;\r\n    }\r\n\r\n    get onConfigurationSectionUpdate(): Event<ConfigurationSectionUpdate> {\r\n        return this.onConfigurationSectionUpdateEmitter.event;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Disposable } from '../utils/disposable.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport type { Deferred } from '../utils/promise-utils.js';\r\nimport type { ValidationOptions } from '../validation/document-validator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory, TextDocumentProvider } from './documents.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { ValidationCategory } from '../validation/validation-registry.js';\r\nimport { DocumentState } from './documents.js';\r\n\r\nexport interface BuildOptions {\r\n    /**\r\n     * Control the validation phase with this option:\r\n     *  - `true` enables all validation checks and forces revalidating the documents\r\n     *  - `false` or `undefined` disables all validation checks\r\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\r\n     */\r\n    validation?: boolean | ValidationOptions\r\n}\r\n\r\nexport interface DocumentBuildState {\r\n    /** Whether a document has completed its last build process. */\r\n    completed: boolean\r\n    /** The options used for the last build process. */\r\n    options: BuildOptions\r\n    /** Additional information about the last build result. */\r\n    result?: {\r\n        validationChecks?: ValidationCategory[]\r\n    }\r\n}\r\n\r\n/**\r\n * Shared-service for building and updating `LangiumDocument`s.\r\n */\r\nexport interface DocumentBuilder {\r\n\r\n    /** The options used for rebuilding documents after an update. */\r\n    updateBuildOptions: BuildOptions;\r\n\r\n    /**\r\n     * Execute all necessary build steps for the given documents.\r\n     *\r\n     * @param documents Set of documents to be built.\r\n     * @param options Options for the document builder.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * This method is called when a document change is detected. It updates the state of all\r\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\r\n     *\r\n     * @param changed URIs of changed or created documents\r\n     * @param deleted URIs of deleted documents\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCancelled` if cancellation is detected during execution\r\n     */\r\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Notify the given callback when a document update was triggered, but before any document\r\n     * is rebuilt. Listeners to this event should not perform any long-running task.\r\n     */\r\n    onUpdate(callback: DocumentUpdateListener): Disposable;\r\n\r\n    /**\r\n     * Notify the given callback when a set of documents has been built reaching the specified target state.\r\n     */\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\r\n\r\n    /**\r\n     * Notify the specified callback when a document has been built reaching the specified target state.\r\n     * Unlike {@link onBuildPhase} the listener is called for every single document.\r\n     *\r\n     * There are two main advantages compared to {@link onBuildPhase}:\r\n     * 1. If the build is cancelled, {@link onDocumentPhase} will still fire for documents that have reached a specific state.\r\n     *    Meanwhile, {@link onBuildPhase} won't fire for that state.\r\n     * 2. The {@link DocumentBuilder} ensures that all {@link DocumentPhaseListener} instances are called for a built document.\r\n     *    Even if the build is cancelled before those listeners were called.\r\n     */\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable;\r\n\r\n    /**\r\n     * Wait until the workspace has reached the specified state for all documents.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Wait until the document specified by the {@link uri} has reached the specified state.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\r\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\r\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n}\r\n\r\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\r\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\r\nexport type DocumentPhaseListener = (built: LangiumDocument, cancelToken: CancellationToken) => void | Promise<void>\r\nexport class DefaultDocumentBuilder implements DocumentBuilder {\r\n\r\n    updateBuildOptions: BuildOptions = {\r\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\r\n        validation: {\r\n            categories: ['built-in', 'fast']\r\n        }\r\n    };\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly textDocuments: TextDocumentProvider | undefined;\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\r\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\r\n    protected readonly documentPhaseListeners = new MultiMap<DocumentState, DocumentPhaseListener>();\r\n    protected readonly buildState = new Map<string, DocumentBuildState>();\r\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\r\n    protected currentState = DocumentState.Changed;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.indexManager = services.workspace.IndexManager;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const document of documents) {\r\n            const key = document.uri.toString();\r\n            if (document.state === DocumentState.Validated) {\r\n                if (typeof options.validation === 'boolean' && options.validation) {\r\n                    // Force re-running all validation checks\r\n                    document.state = DocumentState.IndexedReferences;\r\n                    document.diagnostics = undefined;\r\n                    this.buildState.delete(key);\r\n                } else if (typeof options.validation === 'object') {\r\n                    const buildState = this.buildState.get(key);\r\n                    const previousCategories = buildState?.result?.validationChecks;\r\n                    if (previousCategories) {\r\n                        // Validation with explicit options was requested for a document that has already been partly validated.\r\n                        // In this case, we need to merge the previous validation categories with the new ones.\r\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\r\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\r\n                        if (categories.length > 0) {\r\n                            this.buildState.set(key, {\r\n                                completed: false,\r\n                                options: {\r\n                                    validation: {\r\n                                        ...options.validation,\r\n                                        categories\r\n                                    }\r\n                                },\r\n                                result: buildState.result\r\n                            });\r\n                            document.state = DocumentState.IndexedReferences;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Default: forget any previous build options\r\n                this.buildState.delete(key);\r\n            }\r\n        }\r\n        this.currentState = DocumentState.Changed;\r\n        await this.emitUpdate(documents.map(e => e.uri), []);\r\n        await this.buildDocuments(documents, options, cancelToken);\r\n    }\r\n\r\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\r\n        this.currentState = DocumentState.Changed;\r\n        // Remove all metadata of documents that are reported as deleted\r\n        for (const deletedUri of deleted) {\r\n            this.langiumDocuments.deleteDocument(deletedUri);\r\n            this.buildState.delete(deletedUri.toString());\r\n            this.indexManager.remove(deletedUri);\r\n        }\r\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\r\n        for (const changedUri of changed) {\r\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\r\n            if (!invalidated) {\r\n                // We create an unparsed, invalid document.\r\n                // This will be parsed as soon as we reach the first document builder phase.\r\n                // This allows to cancel the parsing process later in case we need it.\r\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\r\n                newDocument.state = DocumentState.Changed;\r\n                this.langiumDocuments.addDocument(newDocument);\r\n            }\r\n            this.buildState.delete(changedUri.toString());\r\n        }\r\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\r\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\r\n        this.langiumDocuments.all\r\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\r\n            .forEach(doc => {\r\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n                linker.unlink(doc);\r\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\r\n                doc.diagnostics = undefined;\r\n            });\r\n        // Notify listeners of the update\r\n        await this.emitUpdate(changed, deleted);\r\n        // Only allow interrupting the execution after all state changes are done\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        // Collect and sort all documents that we should rebuild\r\n        const rebuildDocuments = this.sortDocuments(\r\n            this.langiumDocuments.all\r\n                .filter(doc =>\r\n                    // This includes those that were reported as changed and those that we selected for relinking\r\n                    doc.state < DocumentState.Linked\r\n                    // This includes those for which a previous build has been cancelled\r\n                    || !this.buildState.get(doc.uri.toString())?.completed\r\n                )\r\n                .toArray()\r\n        );\r\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\r\n    }\r\n\r\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\r\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\r\n    }\r\n\r\n    /**\r\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\r\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\r\n     *\r\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\r\n     * in files that are currently not opened in the editor.\r\n     */\r\n    protected sortDocuments(documents: LangiumDocument[]): LangiumDocument[] {\r\n        let left = 0;\r\n        let right = documents.length - 1;\r\n\r\n        while (left < right) {\r\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\r\n                left++;\r\n            }\r\n\r\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\r\n                right--;\r\n            }\r\n\r\n            if (left < right) {\r\n                [documents[left], documents[right]] = [documents[right], documents[left]];\r\n            }\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    private hasTextDocument(doc: LangiumDocument): boolean {\r\n        return Boolean(this.textDocuments?.get(doc.uri));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given document should be relinked after changes were found in the given URIs.\r\n     */\r\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        // Relink documents with linking errors -- maybe those references can be resolved now\r\n        if (document.references.some(ref => ref.error !== undefined)) {\r\n            return true;\r\n        }\r\n        // Check whether the document is affected by any of the changed URIs\r\n        return this.indexManager.isAffected(document, changedUris);\r\n    }\r\n\r\n    onUpdate(callback: DocumentUpdateListener): Disposable {\r\n        this.updateListeners.push(callback);\r\n        return Disposable.create(() => {\r\n            const index = this.updateListeners.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.updateListeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the given documents by stepping through all build phases. If a document's state indicates\r\n     * that a certain build phase is already done, the phase is skipped for that document.\r\n     *\r\n     * @param documents The documents to build.\r\n     * @param options the {@link BuildOptions} to use.\r\n     * @param cancelToken A cancellation token that can be used to cancel the build.\r\n     * @returns A promise that resolves when the build is done.\r\n     */\r\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\r\n        this.prepareBuild(documents, options);\r\n        // 0. Parse content\r\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\r\n            this.langiumDocumentFactory.update(doc, cancelToken)\r\n        );\r\n        // 1. Index content\r\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\r\n            this.indexManager.updateContent(doc, cancelToken)\r\n        );\r\n        // 2. Compute scopes\r\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\r\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\r\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\r\n        });\r\n        // 3. Linking\r\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\r\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n            return linker.link(doc, cancelToken);\r\n        });\r\n        // 4. Index references\r\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\r\n            this.indexManager.updateReferences(doc, cancelToken)\r\n        );\r\n        // 5. Validation\r\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\r\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\r\n            this.validate(doc, cancelToken)\r\n        );\r\n\r\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\r\n        for (const doc of documents) {\r\n            const state = this.buildState.get(doc.uri.toString());\r\n            if (state) {\r\n                state.completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\r\n     *\r\n     * @param documents collection of documents to be built\r\n     * @param options the {@link BuildOptions} to use\r\n     */\r\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\r\n        for (const doc of documents) {\r\n            const key = doc.uri.toString();\r\n            const state = this.buildState.get(key);\r\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\r\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\r\n            // and continue where it was cancelled.\r\n            if (!state || state.completed) {\r\n                this.buildState.set(key, {\r\n                    completed: false,\r\n                    options,\r\n                    result: state?.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\r\n     *\r\n     * @param documents The array of documents to process.\r\n     * @param targetState The target {@link DocumentState} to bring the documents to.\r\n     * @param cancelToken A token that can be used to cancel the operation.\r\n     * @param callback A function to be called for each document.\r\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\r\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\r\n     */\r\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\r\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\r\n        const filtered = documents.filter(doc => doc.state < targetState);\r\n        for (const document of filtered) {\r\n            await interruptAndCheck(cancelToken);\r\n            await callback(document);\r\n            document.state = targetState;\r\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\r\n        }\r\n\r\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\r\n        // For example, this happens in case the cancellation triggers between the processing of two documents\r\n        // Or files that were picked up during the workspace initialization\r\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\r\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\r\n        this.currentState = targetState;\r\n    }\r\n\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\r\n        this.buildPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.buildPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable {\r\n        this.documentPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.documentPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\r\n        let uri: URI | undefined = undefined;\r\n        if (uriOrToken && 'path' in uriOrToken) {\r\n            uri = uriOrToken;\r\n        } else {\r\n            cancelToken = uriOrToken;\r\n        }\r\n        cancelToken ??= CancellationToken.None;\r\n        if (uri) {\r\n            const document = this.langiumDocuments.getDocument(uri);\r\n            if (document && document.state > state) {\r\n                return Promise.resolve(uri);\r\n            }\r\n        }\r\n        if (this.currentState >= state) {\r\n            return Promise.resolve(undefined);\r\n        } else if (cancelToken.isCancellationRequested) {\r\n            return Promise.reject(OperationCancelled);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const buildDisposable = this.onBuildPhase(state, () => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                if (uri) {\r\n                    const document = this.langiumDocuments.getDocument(uri);\r\n                    resolve(document?.uri);\r\n                } else {\r\n                    resolve(undefined);\r\n                }\r\n            });\r\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                reject(OperationCancelled);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async notifyDocumentPhase(document: LangiumDocument, state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        const listeners = this.documentPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            try {\r\n                await listener(document, cancelToken);\r\n            } catch (err) {\r\n                // Ignore cancellation errors\r\n                // We want to finish the listeners before throwing\r\n                if (!isOperationCancelled(err)) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        if (documents.length === 0) {\r\n            // Don't notify when no document has been processed\r\n            return;\r\n        }\r\n        const listeners = this.buildPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            await interruptAndCheck(cancelToken);\r\n            await listener(documents, cancelToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given document should be validated during a build. The default\r\n     * implementation checks the `validation` property of the build options. If it's set to `true`\r\n     * or a `ValidationOptions` object, the document is included in the validation phase.\r\n     */\r\n    protected shouldValidate(document: LangiumDocument): boolean {\r\n        return Boolean(this.getBuildOptions(document).validation);\r\n    }\r\n\r\n    /**\r\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\r\n     * If the document already contains diagnostics, the new ones are added to the list.\r\n     */\r\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\r\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\r\n        const validationSetting = this.getBuildOptions(document).validation;\r\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\r\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\r\n        if (document.diagnostics) {\r\n            document.diagnostics.push(...diagnostics);\r\n        } else {\r\n            document.diagnostics = diagnostics;\r\n        }\r\n\r\n        // Store information about the executed validation in the build state\r\n        const state = this.buildState.get(document.uri.toString());\r\n        if (state) {\r\n            state.result ??= {};\r\n            const newCategories = options?.categories ?? ValidationCategory.all;\r\n            if (state.result.validationChecks) {\r\n                state.result.validationChecks.push(...newCategories);\r\n            } else {\r\n                state.result.validationChecks = [...newCategories];\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\r\n        return this.buildState.get(document.uri.toString())?.options ?? {};\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { ContextCache } from '../utils/caching.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\nimport type { ReferenceDescription } from './ast-descriptions.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\n\r\n/**\r\n * The index manager is responsible for keeping metadata about symbols and cross-references\r\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\r\n * and completion. This service is shared between all languages of a language server.\r\n */\r\nexport interface IndexManager {\r\n\r\n    /**\r\n     * Removes the specified document URI from the index.\r\n     * Necessary when documents are deleted and not referenceable anymore.\r\n     *\r\n     * @param uri The URI of the document for which index data shall be removed\r\n     */\r\n    remove(uri: URI): void;\r\n\r\n    /**\r\n     * Updates the information about the exportable content of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Updates the information about the cross-references of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Determine whether the given document could be affected by changes of the documents\r\n     * identified by the given URIs (second parameter). The document is typically regarded as\r\n     * affected if it contains a reference to any of the changed files.\r\n     *\r\n     * @param document Document to check whether it's affected\r\n     * @param changedUris URIs of the changed documents\r\n     */\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\r\n\r\n    /**\r\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\r\n     *\r\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\r\n     * @param uris If specified, only returns elements from the given URIs.\r\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\r\n     */\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\r\n\r\n    /**\r\n     * Returns all known references that are pointing to the given `targetNode`.\r\n     *\r\n     * @param targetNode the `AstNode` to look up references for\r\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\r\n     *\r\n     * @returns a `Stream` of references that are targeting the `targetNode`\r\n     */\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\r\n\r\n}\r\n\r\nexport class DefaultIndexManager implements IndexManager {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly documents: LangiumDocuments;\r\n    protected readonly astReflection: AstReflection;\r\n\r\n    /**\r\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\r\n     * The key used in this map is the string representation of the specific document URI.\r\n     */\r\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\r\n    /**\r\n     * This is a cache for the `allElements()` method.\r\n     * It caches the descriptions from `symbolIndex` grouped by types.\r\n     */\r\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\r\n    /**\r\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\r\n     * This is used to compute which elements are affected by a document change\r\n     * and for finding references to an AST node.\r\n     */\r\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.documents = services.workspace.LangiumDocuments;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.astReflection = services.AstReflection;\r\n    }\r\n\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\r\n        const targetDocUri = getDocument(targetNode).uri;\r\n        const result: ReferenceDescription[] = [];\r\n        this.referenceIndex.forEach(docRefs => {\r\n            docRefs.forEach(refDescr => {\r\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\r\n                    result.push(refDescr);\r\n                }\r\n            });\r\n        });\r\n        return stream(result);\r\n    }\r\n\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\r\n        let documentUris = stream(this.symbolIndex.keys());\r\n        if (uris) {\r\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\r\n        }\r\n        return documentUris\r\n            .map(uri => this.getFileDescriptions(uri, nodeType))\r\n            .flat();\r\n    }\r\n\r\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\r\n        if (!nodeType) {\r\n            return this.symbolIndex.get(uri) ?? [];\r\n        }\r\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\r\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\r\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\r\n        });\r\n        return descriptions;\r\n    }\r\n\r\n    remove(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        this.symbolIndex.delete(uriString);\r\n        this.symbolByTypeIndex.clear(uriString);\r\n        this.referenceIndex.delete(uriString);\r\n    }\r\n\r\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\r\n        const uri = document.uri.toString();\r\n        this.symbolIndex.set(uri, exports);\r\n        this.symbolByTypeIndex.clear(uri);\r\n    }\r\n\r\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\r\n        this.referenceIndex.set(document.uri.toString(), indexData);\r\n    }\r\n\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        const references = this.referenceIndex.get(document.uri.toString());\r\n        if (!references) {\r\n            return false;\r\n        }\r\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\r\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { URI, UriUtils } from '../utils/uri-utils.js';\r\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\r\nimport type { WorkspaceLock } from './workspace-lock.js';\r\n\r\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\r\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\r\nexport type { WorkspaceFolder };\r\n\r\n/**\r\n * The workspace manager is responsible for finding source files in the workspace.\r\n * This service is shared between all languages of a language server.\r\n */\r\nexport interface WorkspaceManager {\r\n\r\n    /** The options used for the initial workspace build. */\r\n    initialBuildOptions: BuildOptions | undefined;\r\n\r\n    /**\r\n     * A promise that resolves when the workspace manager is ready to be used.\r\n     * Use this to ensure that the workspace manager has finished its initialization.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * The workspace folders of the current workspace.\r\n     * Available only after the `ready` promise resolves.\r\n     */\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: InitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Does the initial indexing of workspace folders.\r\n     * Collects information about exported and referenced AstNodes in\r\n     * each language file and stores it locally.\r\n     *\r\n     * @param folders The set of workspace folders to be indexed.\r\n     * @param cancelToken A cancellation token that can be used to cancel the operation.\r\n     *\r\n     * @throws OperationCancelled if a cancellation event has been detected\r\n     */\r\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n}\r\n\r\nexport class DefaultWorkspaceManager implements WorkspaceManager {\r\n\r\n    initialBuildOptions: BuildOptions = {};\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly documentBuilder: DocumentBuilder;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n    protected readonly mutex: WorkspaceLock;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected folders?: WorkspaceFolder[];\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.documentBuilder = services.workspace.DocumentBuilder;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n        this.mutex = services.workspace.WorkspaceLock;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined {\r\n        return this.folders;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.folders = params.workspaceFolders ?? undefined;\r\n    }\r\n\r\n    initialized(_params: InitializedParams): Promise<void> {\r\n        // Initialize the workspace even if there are no workspace folders\r\n        // We still want to load additional documents (language library or similar) during initialization\r\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\r\n    }\r\n\r\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\r\n        const documents = await this.performStartup(folders);\r\n        // Only after creating all documents do we check whether we need to cancel the initialization\r\n        // The document builder will later pick up on all unprocessed documents\r\n        await interruptAndCheck(cancelToken);\r\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Performs the uninterruptable startup sequence of the workspace manager.\r\n     * This methods loads all documents in the workspace and other documents and returns them.\r\n     */\r\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\r\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\r\n        const documents: LangiumDocument[] = [];\r\n        const collector = (document: LangiumDocument) => {\r\n            documents.push(document);\r\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\r\n                this.langiumDocuments.addDocument(document);\r\n            }\r\n        };\r\n        // Even though we don't await the initialization of the workspace manager,\r\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\r\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\r\n        await this.loadAdditionalDocuments(folders, collector);\r\n        await Promise.all(\r\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\r\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\r\n        );\r\n        this._ready.resolve();\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Load all additional documents that shall be visible in the context of the given workspace\r\n     * folders and add them to the collector. This can be used to include built-in libraries of\r\n     * your language, which can be either loaded from provided files or constructed in memory.\r\n     */\r\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Determine the root folder of the source documents in the given workspace folder.\r\n     * The default implementation returns the URI of the workspace folder, but you can override\r\n     * this to return a subfolder like `src` instead.\r\n     */\r\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\r\n        return URI.parse(workspaceFolder.uri);\r\n    }\r\n\r\n    /**\r\n     * Traverse the file system folder identified by the given URI and its subfolders. All\r\n     * contained files that match the file extensions are added to the collector.\r\n     */\r\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\r\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\r\n        await Promise.all(content.map(async entry => {\r\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\r\n                if (entry.isDirectory) {\r\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\r\n                } else if (entry.isFile) {\r\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\r\n                    collector(document);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given folder entry shall be included while indexing the workspace.\r\n     */\r\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\r\n        const name = UriUtils.basename(entry.uri);\r\n        if (name.startsWith('.')) {\r\n            return false;\r\n        }\r\n        if (entry.isDirectory) {\r\n            return name !== 'node_modules' && name !== 'out';\r\n        } else if (entry.isFile) {\r\n            const extname = UriUtils.extname(entry.uri);\r\n            return fileExtensions.includes(extname);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ILexerErrorMessageProvider, ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\r\nimport type { LexingReport, TokenBuilder } from './token-builder.js';\r\n\r\nexport class DefaultLexerErrorMessageProvider implements ILexerErrorMessageProvider {\r\n\r\n    buildUnexpectedCharactersMessage(fullText: string, startOffset: number, length: number, line?: number, column?: number): string {\r\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\r\n    }\r\n\r\n    buildUnableToPopLexerModeMessage(token: IToken): string {\r\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\r\n    }\r\n}\r\n\r\nexport interface LexerResult {\r\n    /**\r\n     * A list of all tokens that were lexed from the input.\r\n     *\r\n     * Note that Langium requires the optional properties\r\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\r\n     */\r\n    tokens: IToken[];\r\n    /**\r\n     * Contains hidden tokens, usually comments.\r\n     */\r\n    hidden: IToken[];\r\n    errors: ILexingError[];\r\n    report?: LexingReport;\r\n}\r\n\r\nexport type TokenizeMode = 'full' | 'partial';\r\n\r\nexport interface TokenizeOptions {\r\n    mode?: TokenizeMode;\r\n}\r\n\r\nexport const DEFAULT_TOKENIZE_OPTIONS: TokenizeOptions = { mode: 'full' };\r\n\r\nexport interface Lexer {\r\n    readonly definition: TokenTypeDictionary;\r\n    tokenize(text: string, options?: TokenizeOptions): LexerResult;\r\n}\r\n\r\nexport class DefaultLexer implements Lexer {\r\n\r\n    protected readonly tokenBuilder: TokenBuilder;\r\n    protected readonly errorMessageProvider: ILexerErrorMessageProvider;\r\n    protected tokenTypes: TokenTypeDictionary;\r\n    protected chevrotainLexer: ChevrotainLexer;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\r\n        this.tokenBuilder = services.parser.TokenBuilder;\r\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\r\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\r\n        });\r\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\r\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\r\n            positionTracking: 'full',\r\n            skipValidations: production,\r\n            errorMessageProvider: this.errorMessageProvider\r\n        });\r\n    }\r\n\r\n    get definition(): TokenTypeDictionary {\r\n        return this.tokenTypes;\r\n    }\r\n\r\n    tokenize(text: string, _options: TokenizeOptions = DEFAULT_TOKENIZE_OPTIONS): LexerResult {\r\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\r\n        return {\r\n            tokens: chevrotainResult.tokens,\r\n            errors: chevrotainResult.errors,\r\n            hidden: chevrotainResult.groups.hidden ?? [],\r\n            report: this.tokenBuilder.flushLexingReport?.(text)\r\n        };\r\n    }\r\n\r\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\r\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\r\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\r\n        const res: TokenTypeDictionary = {};\r\n        tokens.forEach(token => res[token.name] = token);\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenType array\r\n */\r\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\r\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\r\n */\r\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\r\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\r\n */\r\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\r\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Position, Range } from 'vscode-languageserver-types';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface JSDocComment extends JSDocValue {\r\n    readonly elements: JSDocElement[]\r\n    getTag(name: string): JSDocTag | undefined\r\n    getTags(name: string): JSDocTag[]\r\n}\r\n\r\nexport type JSDocElement = JSDocParagraph | JSDocTag;\r\n\r\nexport type JSDocInline = JSDocTag | JSDocLine;\r\n\r\nexport interface JSDocValue {\r\n    /**\r\n     * Represents the range that this JSDoc element occupies.\r\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\r\n     */\r\n    readonly range: Range\r\n    /**\r\n     * Renders this JSDoc element to a plain text representation.\r\n     */\r\n    toString(): string\r\n    /**\r\n     * Renders this JSDoc element to a markdown representation.\r\n     *\r\n     * @param options Rendering options to customize the markdown result.\r\n     */\r\n    toMarkdown(options?: JSDocRenderOptions): string\r\n}\r\n\r\nexport interface JSDocParagraph extends JSDocValue {\r\n    readonly inlines: JSDocInline[]\r\n}\r\n\r\nexport interface JSDocLine extends JSDocValue {\r\n    readonly text: string\r\n}\r\n\r\nexport interface JSDocTag extends JSDocValue {\r\n    readonly name: string\r\n    readonly content: JSDocParagraph\r\n    readonly inline: boolean\r\n}\r\n\r\nexport interface JSDocParseOptions {\r\n    /**\r\n     * The start symbol of your comment format. Defaults to `/**`.\r\n     */\r\n    readonly start?: RegExp | string\r\n    /**\r\n     * The symbol that start a line of your comment format. Defaults to `*`.\r\n     */\r\n    readonly line?: RegExp | string\r\n    /**\r\n     * The end symbol of your comment format. Defaults to `*\\/`.\r\n     */\r\n    readonly end?: RegExp | string\r\n}\r\n\r\nexport interface JSDocRenderOptions {\r\n    /**\r\n     * Determines the style for rendering tags. Defaults to `italic`.\r\n     */\r\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\r\n    /**\r\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\r\n     */\r\n    link?: 'code' | 'plain'\r\n    /**\r\n     * Custom tag rendering function.\r\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\r\n     */\r\n    renderTag?(tag: JSDocTag): string | undefined\r\n    /**\r\n     * Custom link rendering function. Accepts a link target and a display value for the link.\r\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\r\n     */\r\n    renderLink?(link: string, display: string): string | undefined\r\n}\r\n\r\n/**\r\n * Parses a JSDoc from a `CstNode` containing a comment.\r\n *\r\n * @param node A `CstNode` from a parsed Langium document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\r\n/**\r\n * Parses a JSDoc from a string comment.\r\n *\r\n * @param content A string containing the source of the JSDoc comment.\r\n * @param start The start position the comment occupies in the source document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\r\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\r\n    let opts: JSDocParseOptions | undefined;\r\n    let position: Position | undefined;\r\n    if (typeof node === 'string') {\r\n        position = start as Position | undefined;\r\n        opts = options as JSDocParseOptions | undefined;\r\n    } else {\r\n        position = node.range.start;\r\n        opts = start as JSDocParseOptions | undefined;\r\n    }\r\n    if (!position) {\r\n        position = Position.create(0, 0);\r\n    }\r\n\r\n    const lines = getLines(node);\r\n    const normalizedOptions = normalizeOptions(opts);\r\n\r\n    const tokens = tokenize({\r\n        lines,\r\n        position,\r\n        options: normalizedOptions\r\n    });\r\n\r\n    return parseJSDocComment({\r\n        index: 0,\r\n        tokens,\r\n        position\r\n    });\r\n}\r\n\r\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\r\n    const normalizedOptions = normalizeOptions(options);\r\n    const lines = getLines(node);\r\n    if (lines.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const first = lines[0];\r\n    const last = lines[lines.length - 1];\r\n    const firstRegex = normalizedOptions.start;\r\n    const lastRegex = normalizedOptions.end;\r\n\r\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\r\n}\r\n\r\nfunction getLines(node: CstNode | string): string[] {\r\n    let content = '';\r\n    if (typeof node === 'string') {\r\n        content = node;\r\n    } else {\r\n        content = node.text;\r\n    }\r\n    const lines = content.split(NEWLINE_REGEXP);\r\n    return lines;\r\n}\r\n\r\n// Tokenization\r\n\r\ninterface JSDocToken {\r\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\r\n    content: string\r\n    range: Range\r\n}\r\n\r\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\r\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\r\n\r\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n    let currentLine = context.position.line;\r\n    let currentCharacter = context.position.character;\r\n    for (let i = 0; i < context.lines.length; i++) {\r\n        const first = i === 0;\r\n        const last = i === context.lines.length - 1;\r\n        let line = context.lines[i];\r\n        let index = 0;\r\n\r\n        if (first && context.options.start) {\r\n            const match = context.options.start?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        } else {\r\n            const match = context.options.line?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        }\r\n        if (last) {\r\n            const match = context.options.end?.exec(line);\r\n            if (match) {\r\n                line = line.substring(0, match.index);\r\n            }\r\n        }\r\n\r\n        line = line.substring(0, lastCharacter(line));\r\n        const whitespaceEnd = skipWhitespace(line, index);\r\n\r\n        if (whitespaceEnd >= line.length) {\r\n            // Only create a break token when we already have previous tokens\r\n            if (tokens.length > 0) {\r\n                const position = Position.create(currentLine, currentCharacter);\r\n                tokens.push({\r\n                    type: 'break',\r\n                    content: '',\r\n                    range: Range.create(position, position)\r\n                });\r\n            }\r\n        } else {\r\n            tagRegex.lastIndex = index;\r\n            const tagMatch = tagRegex.exec(line);\r\n            if (tagMatch) {\r\n                const fullMatch = tagMatch[0];\r\n                const value = tagMatch[1];\r\n                const start = Position.create(currentLine, currentCharacter + index);\r\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\r\n                tokens.push({\r\n                    type: 'tag',\r\n                    content: value,\r\n                    range: Range.create(start, end)\r\n                });\r\n                index += fullMatch.length;\r\n                index = skipWhitespace(line, index);\r\n            }\r\n\r\n            if (index < line.length) {\r\n                const rest = line.substring(index);\r\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\r\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\r\n            }\r\n        }\r\n\r\n        currentLine++;\r\n        currentCharacter = 0;\r\n    }\r\n\r\n    // Remove last break token if there is one\r\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\r\n        return tokens.slice(0, -1);\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n\r\n    if (tags.length === 0) {\r\n        const start = Position.create(lineIndex, characterIndex);\r\n        const end = Position.create(lineIndex, characterIndex + line.length);\r\n        tokens.push({\r\n            type: 'text',\r\n            content: line,\r\n            range: Range.create(start, end)\r\n        });\r\n    } else {\r\n        let lastIndex = 0;\r\n        for (const match of tags) {\r\n            const matchIndex = match.index!;\r\n            const startContent = line.substring(lastIndex, matchIndex);\r\n            if (startContent.length > 0) {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: line.substring(lastIndex, matchIndex),\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + characterIndex),\r\n                        Position.create(lineIndex, matchIndex + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            let offset = startContent.length + 1;\r\n            const tagName = match[1];\r\n            tokens.push({\r\n                type: 'inline-tag',\r\n                content: tagName,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\r\n                )\r\n            });\r\n            offset += tagName.length;\r\n            if (match.length === 4) {\r\n                offset += match[2].length;\r\n                const value = match[3];\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: value,\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\r\n                    )\r\n                });\r\n            } else {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: '',\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            lastIndex = matchIndex + match[0].length;\r\n        }\r\n        const endContent = line.substring(lastIndex);\r\n        if (endContent.length > 0) {\r\n            tokens.push({\r\n                type: 'text',\r\n                content: endContent,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nconst nonWhitespaceRegex = /\\S/;\r\nconst whitespaceEndRegex = /\\s*$/;\r\n\r\nfunction skipWhitespace(line: string, index: number): number {\r\n    const match = line.substring(index).match(nonWhitespaceRegex);\r\n    if (match) {\r\n        return index + match.index!;\r\n    } else {\r\n        return line.length;\r\n    }\r\n}\r\n\r\nfunction lastCharacter(line: string): number | undefined {\r\n    const match = line.match(whitespaceEndRegex);\r\n    if (match && typeof match.index === 'number') {\r\n        return match.index;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Parsing\r\n\r\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\r\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\r\n    if (context.tokens.length === 0) {\r\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\r\n    }\r\n    const elements: JSDocElement[] = [];\r\n    while (context.index < context.tokens.length) {\r\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\r\n        if (element) {\r\n            elements.push(element);\r\n        }\r\n    }\r\n    const start = elements[0]?.range.start ?? startPosition;\r\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\r\n    return new JSDocCommentImpl(elements, Range.create(start, end));\r\n}\r\n\r\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\r\n    const next = context.tokens[context.index];\r\n    if (next.type === 'tag') {\r\n        return parseJSDocTag(context, false);\r\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\r\n        return parseJSDocText(context);\r\n    } else {\r\n        appendEmptyLine(next, last);\r\n        context.index++;\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\r\n    if (element) {\r\n        const line = new JSDocLineImpl('', token.range);\r\n        if ('inlines' in element) {\r\n            element.inlines.push(line);\r\n        } else {\r\n            element.content.inlines.push(line);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\r\n    let token = context.tokens[context.index];\r\n    const firstToken = token;\r\n    let lastToken = token;\r\n    const lines: JSDocInline[] = [];\r\n    while (token && token.type !== 'break' && token.type !== 'tag') {\r\n        lines.push(parseJSDocInline(context));\r\n        lastToken = token;\r\n        token = context.tokens[context.index];\r\n    }\r\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\r\n}\r\n\r\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\r\n    const token = context.tokens[context.index];\r\n    if (token.type === 'inline-tag') {\r\n        return parseJSDocTag(context, true);\r\n    } else {\r\n        return parseJSDocLine(context);\r\n    }\r\n}\r\n\r\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\r\n    const tagToken = context.tokens[context.index++];\r\n    const name = tagToken.content.substring(1);\r\n    const nextToken = context.tokens[context.index];\r\n    if (nextToken?.type === 'text') {\r\n        if (inline) {\r\n            const docLine = parseJSDocLine(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                new JSDocTextImpl([docLine], docLine.range),\r\n                inline,\r\n                Range.create(tagToken.range.start, docLine.range.end)\r\n            );\r\n        } else {\r\n            const textDoc = parseJSDocText(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                textDoc,\r\n                inline,\r\n                Range.create(tagToken.range.start, textDoc.range.end)\r\n            );\r\n        }\r\n    } else {\r\n        const range = tagToken.range;\r\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\r\n    }\r\n}\r\n\r\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\r\n    const token = context.tokens[context.index++];\r\n    return new JSDocLineImpl(token.content, token.range);\r\n}\r\n\r\ninterface NormalizedOptions {\r\n    start?: RegExp\r\n    end?: RegExp\r\n    line?: RegExp\r\n}\r\n\r\ninterface TokenizationContext {\r\n    position: Position\r\n    lines: string[]\r\n    options: NormalizedOptions\r\n}\r\n\r\ninterface ParseContext {\r\n    position: Position\r\n    tokens: JSDocToken[]\r\n    index: number\r\n}\r\n\r\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\r\n    if (!options) {\r\n        return normalizeOptions({\r\n            start: '/**',\r\n            end: '*/',\r\n            line: '*'\r\n        });\r\n    }\r\n    const { start, end, line } = options;\r\n    return {\r\n        start: normalizeOption(start, true),\r\n        end: normalizeOption(end, false),\r\n        line: normalizeOption(line, true)\r\n    };\r\n}\r\n\r\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\r\n    if (typeof option === 'string' || typeof option === 'object') {\r\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\r\n        if (start) {\r\n            return new RegExp(`^\\\\s*${escaped}`);\r\n        } else {\r\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\r\n        }\r\n    } else {\r\n        return option;\r\n    }\r\n}\r\n\r\nclass JSDocCommentImpl implements JSDocComment {\r\n\r\n    readonly elements: JSDocElement[];\r\n    readonly range: Range;\r\n\r\n    constructor(elements: JSDocElement[], range: Range) {\r\n        this.elements = elements;\r\n        this.range = range;\r\n    }\r\n\r\n    getTag(name: string): JSDocTag | undefined {\r\n        return this.getAllTags().find(e => e.name === name);\r\n    }\r\n\r\n    getTags(name: string): JSDocTag[] {\r\n        return this.getAllTags().filter(e => e.name === name);\r\n    }\r\n\r\n    private getAllTags(): JSDocTag[] {\r\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\r\n    }\r\n\r\n    toString(): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toString();\r\n            } else {\r\n                const text = element.toString();\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toMarkdown(options);\r\n            } else {\r\n                const text = element.toMarkdown(options);\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n}\r\n\r\nclass JSDocTagImpl implements JSDocTag {\r\n    name: string;\r\n    content: JSDocParagraph;\r\n    range: Range;\r\n    inline: boolean;\r\n\r\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\r\n        this.name = name;\r\n        this.content = content;\r\n        this.inline = inline;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = `@${this.name}`;\r\n        const content = this.content.toString();\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\r\n    }\r\n\r\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\r\n        const content = this.content.toMarkdown(options);\r\n        if (this.inline) {\r\n            const rendered = renderInlineTag(this.name, content, options ?? {});\r\n            if (typeof rendered === 'string') {\r\n                return rendered;\r\n            }\r\n        }\r\n        let marker = '';\r\n        if (options?.tag === 'italic' || options?.tag === undefined) {\r\n            marker = '*';\r\n        } else if (options?.tag === 'bold') {\r\n            marker = '**';\r\n        } else if (options?.tag === 'bold-italic') {\r\n            marker = '***';\r\n        }\r\n        let text = `${marker}@${this.name}${marker}`;\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} — ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\r\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\r\n        const index = content.indexOf(' ');\r\n        let display = content;\r\n        if (index > 0) {\r\n            const displayStart = skipWhitespace(content, index);\r\n            display = content.substring(displayStart);\r\n            content = content.substring(0, index);\r\n        }\r\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\r\n            // Surround the display value in a markdown inline code block\r\n            display = `\\`${display}\\``;\r\n        }\r\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\r\n        return renderedLink;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction renderLinkDefault(content: string, display: string): string {\r\n    try {\r\n        URI.parse(content, true);\r\n        return `[${display}](${content})`;\r\n    } catch {\r\n        return content;\r\n    }\r\n}\r\n\r\nclass JSDocTextImpl implements JSDocParagraph {\r\n    inlines: JSDocInline[];\r\n    range: Range;\r\n\r\n    constructor(lines: JSDocInline[], range: Range) {\r\n        this.inlines = lines;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toString();\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toMarkdown(options);\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nclass JSDocLineImpl implements JSDocLine {\r\n    text: string;\r\n    range: Range;\r\n\r\n    constructor(text: string, range: Range) {\r\n        this.text = text;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n    toMarkdown(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\nfunction fillNewlines(text: string): string {\r\n    if (text.endsWith('\\n')) {\r\n        return '\\n';\r\n    } else {\r\n        return '\\n\\n';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { CommentProvider } from './comment-provider.js';\r\nimport type { JSDocTag } from './jsdoc.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\r\n\r\n/**\r\n * Provides documentation for AST nodes.\r\n */\r\nexport interface DocumentationProvider {\r\n    /**\r\n     * Returns a markdown documentation string for the specified AST node.\r\n     *\r\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\r\n     */\r\n    getDocumentation(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class JSDocDocumentationProvider implements DocumentationProvider {\r\n\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    getDocumentation(node: AstNode): string | undefined {\r\n        const comment = this.commentProvider.getComment(node);\r\n        if (comment && isJSDoc(comment)) {\r\n            const parsedJSDoc = parseJSDoc(comment);\r\n            return parsedJSDoc.toMarkdown({\r\n                renderLink: (link, display) => {\r\n                    return this.documentationLinkRenderer(node, link, display);\r\n                },\r\n                renderTag: (tag) => {\r\n                    return this.documentationTagRenderer(node, tag);\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\r\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\r\n        if (description && description.nameSegment) {\r\n            const line = description.nameSegment.range.start.line + 1;\r\n            const character = description.nameSegment.range.start.character + 1;\r\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\r\n            return `[${display}](${uri.toString()})`;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\r\n        // Fall back to the default tag rendering\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const document = getDocument(node);\r\n        const precomputed = document.precomputedScopes;\r\n        if (!precomputed) {\r\n            return undefined;\r\n        }\r\n        let currentNode: AstNode | undefined = node;\r\n        do {\r\n            const allDescriptions = precomputed.get(currentNode);\r\n            const description = allDescriptions.find(e => e.name === name);\r\n            if (description) {\r\n                return description;\r\n            }\r\n            currentNode = currentNode.$container;\r\n        } while (currentNode);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const description = this.indexManager.allElements().find(e => e.name === name);\r\n        return description;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\r\nimport type { Hydrator } from '../serializer/hydrator.js';\r\nimport type { Event } from '../utils/event.js';\r\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\r\nimport { Emitter } from '../utils/event.js';\r\n\r\n/**\r\n * Async parser that allows cancellation of the current parsing process.\r\n *\r\n * @remarks\r\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\r\n * The default implementation is not actually async. It just wraps the sync parser in a promise. A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport interface AsyncParser {\r\n    /**\r\n     * Parses the given text and returns the parse result.\r\n     *\r\n     * @param text The text to parse.\r\n     * @param cancelToken A cancellation token that can be used to cancel the parsing process.\r\n     * @returns A promise that resolves to the parse result.\r\n     *\r\n     * @throws `OperationCancelled` if the parsing process is cancelled.\r\n     */\r\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\r\n}\r\n\r\n/**\r\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\r\n *\r\n * @remarks\r\n * A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport class DefaultAsyncParser implements AsyncParser {\r\n\r\n    protected readonly syncParser: LangiumParser;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.syncParser = services.parser.LangiumParser;\r\n    }\r\n\r\n    parse<T extends AstNode>(text: string, _cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        return Promise.resolve(this.syncParser.parse<T>(text));\r\n    }\r\n}\r\n\r\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\r\n\r\n    /**\r\n     * The thread count determines how many threads are used to parse files in parallel.\r\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\r\n     */\r\n    protected threadCount = 8;\r\n    /**\r\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\r\n     * The default value is 200(ms).\r\n     */\r\n    protected terminationDelay = 200;\r\n    protected workerPool: ParserWorker[] = [];\r\n    protected queue: Array<Deferred<ParserWorker>> = [];\r\n\r\n    protected readonly hydrator: Hydrator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.hydrator = services.serializer.Hydrator;\r\n    }\r\n\r\n    protected initializeWorkers(): void {\r\n        while (this.workerPool.length < this.threadCount) {\r\n            const worker = this.createWorker();\r\n            worker.onReady(() => {\r\n                if (this.queue.length > 0) {\r\n                    const deferred = this.queue.shift();\r\n                    if (deferred) {\r\n                        worker.lock();\r\n                        deferred.resolve(worker);\r\n                    }\r\n                }\r\n            });\r\n            this.workerPool.push(worker);\r\n        }\r\n    }\r\n\r\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const worker = await this.acquireParserWorker(cancelToken);\r\n        const deferred = new Deferred<ParseResult<T>>();\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\r\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\r\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\r\n        const cancellation = cancelToken.onCancellationRequested(() => {\r\n            timeout = setTimeout(() => {\r\n                this.terminateWorker(worker);\r\n            }, this.terminationDelay);\r\n        });\r\n        worker.parse(text).then(result => {\r\n            const hydrated = this.hydrator.hydrate<T>(result);\r\n            deferred.resolve(hydrated);\r\n        }).catch(err => {\r\n            deferred.reject(err);\r\n        }).finally(() => {\r\n            cancellation.dispose();\r\n            clearTimeout(timeout);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected terminateWorker(worker: ParserWorker): void {\r\n        worker.terminate();\r\n        const index = this.workerPool.indexOf(worker);\r\n        if (index >= 0) {\r\n            this.workerPool.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\r\n        this.initializeWorkers();\r\n        for (const worker of this.workerPool) {\r\n            if (worker.ready) {\r\n                worker.lock();\r\n                return worker;\r\n            }\r\n        }\r\n        const deferred = new Deferred<ParserWorker>();\r\n        cancelToken.onCancellationRequested(() => {\r\n            const index = this.queue.indexOf(deferred);\r\n            if (index >= 0) {\r\n                this.queue.splice(index, 1);\r\n            }\r\n            deferred.reject(OperationCancelled);\r\n        });\r\n        this.queue.push(deferred);\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected abstract createWorker(): ParserWorker;\r\n}\r\n\r\nexport type WorkerMessagePost = (message: unknown) => void;\r\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\r\n\r\nexport class ParserWorker {\r\n\r\n    protected readonly sendMessage: WorkerMessagePost;\r\n    protected readonly _terminate: () => void;\r\n    protected readonly onReadyEmitter = new Emitter<void>();\r\n\r\n    protected deferred = new Deferred<ParseResult>();\r\n    protected _ready = true;\r\n    protected _parsing = false;\r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n\r\n    get onReady(): Event<void> {\r\n        return this.onReadyEmitter.event;\r\n    }\r\n\r\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\r\n        this.sendMessage = sendMessage;\r\n        this._terminate = terminate;\r\n        onMessage(result => {\r\n            const parseResult = result as ParseResult;\r\n            this.deferred.resolve(parseResult);\r\n            this.unlock();\r\n        });\r\n        onError(error => {\r\n            this.deferred.reject(error);\r\n            this.unlock();\r\n        });\r\n    }\r\n\r\n    terminate(): void {\r\n        this.deferred.reject(OperationCancelled);\r\n        this._terminate();\r\n    }\r\n\r\n    lock(): void {\r\n        this._ready = false;\r\n    }\r\n\r\n    unlock(): void {\r\n        this._parsing = false;\r\n        this._ready = true;\r\n        this.onReadyEmitter.fire();\r\n    }\r\n\r\n    parse(text: string): Promise<ParseResult> {\r\n        if (this._parsing) {\r\n            throw new Error('Parser worker is busy');\r\n        }\r\n        this._parsing = true;\r\n        this.deferred = new Deferred();\r\n        this.sendMessage(text);\r\n        return this.deferred.promise;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { type AbstractCancellationTokenSource, CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\r\nimport { Deferred, isOperationCancelled, startCancelableOperation, type MaybePromise } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Utility service to execute mutually exclusive actions.\r\n */\r\nexport interface WorkspaceLock {\r\n    /**\r\n     * Performs a single async action, like initializing the workspace or processing document changes.\r\n     * Only one action will be executed at a time.\r\n     *\r\n     * When another action is queued up, the token provided for the action will be cancelled.\r\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\r\n     */\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\r\n\r\n    /**\r\n     * Performs a single action, like computing completion results or providing workspace symbols.\r\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\r\n     *\r\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\r\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\r\n     *\r\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\r\n     */\r\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\r\n\r\n    /**\r\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\r\n     */\r\n    cancelWrite(): void;\r\n}\r\n\r\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\r\n\r\ninterface LockEntry {\r\n    action: LockAction<unknown>;\r\n    deferred: Deferred<unknown>;\r\n    cancellationToken: CancellationToken;\r\n}\r\n\r\nexport class DefaultWorkspaceLock implements WorkspaceLock {\r\n\r\n    private previousTokenSource: AbstractCancellationTokenSource = new CancellationTokenSource();\r\n    private writeQueue: LockEntry[] = [];\r\n    private readQueue: LockEntry[] = [];\r\n    private done = true;\r\n\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\r\n        this.cancelWrite();\r\n        const tokenSource = startCancelableOperation();\r\n        this.previousTokenSource = tokenSource;\r\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\r\n    }\r\n\r\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\r\n        return this.enqueue(this.readQueue, action);\r\n    }\r\n\r\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken = CancellationToken.None): Promise<T> {\r\n        const deferred = new Deferred<unknown>();\r\n        const entry: LockEntry = {\r\n            action,\r\n            deferred,\r\n            cancellationToken\r\n        };\r\n        queue.push(entry);\r\n        this.performNextOperation();\r\n        return deferred.promise as Promise<T>;\r\n    }\r\n\r\n    private async performNextOperation(): Promise<void> {\r\n        if (!this.done) {\r\n            return;\r\n        }\r\n        const entries: LockEntry[] = [];\r\n        if (this.writeQueue.length > 0) {\r\n            // Just perform the next write action\r\n            entries.push(this.writeQueue.shift()!);\r\n        } else if (this.readQueue.length > 0) {\r\n            // Empty the read queue and perform all actions in parallel\r\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\r\n        } else {\r\n            return;\r\n        }\r\n        this.done = false;\r\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\r\n            try {\r\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\r\n                const result = await Promise.resolve().then(() => action(cancellationToken));\r\n                deferred.resolve(result);\r\n            } catch (err) {\r\n                if (isOperationCancelled(err)) {\r\n                    // If the operation was cancelled, we don't want to reject the promise\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            }\r\n        }));\r\n        this.done = true;\r\n        this.performNextOperation();\r\n    }\r\n\r\n    cancelWrite(): void {\r\n        this.previousTokenSource.cancel();\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2024 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\r\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { Lexer } from '../parser/lexer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\r\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { BiMap } from '../utils/collections.js';\r\nimport { streamCst } from '../utils/cst-utils.js';\r\nimport type { LexingReport } from '../parser/token-builder.js';\r\n\r\n/**\r\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\r\n */\r\nexport interface Hydrator {\r\n    /**\r\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\r\n     */\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\r\n    /**\r\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\r\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\r\n     */\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\r\n}\r\n\r\nexport interface DehydrateContext {\r\n    astNodes: Map<AstNode, any>;\r\n    cstNodes: Map<CstNode, any>;\r\n}\r\n\r\nexport interface HydrateContext {\r\n    astNodes: Map<any, AstNode>;\r\n    cstNodes: Map<any, CstNode>;\r\n}\r\n\r\nexport class DefaultHydrator implements Hydrator {\r\n\r\n    protected readonly grammar: Grammar;\r\n    protected readonly lexer: Lexer;\r\n    protected readonly linker: Linker;\r\n\r\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\r\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammar = services.Grammar;\r\n        this.lexer = services.parser.Lexer;\r\n        this.linker = services.references.Linker;\r\n    }\r\n\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\r\n            // We need to create shallow copies of the errors\r\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\r\n            parserErrors: result.parserErrors.map(e => ({ ...e, message: e.message })),\r\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\r\n        };\r\n    }\r\n\r\n    protected dehydrateLexerReport(lexerReport: LexingReport): LexingReport {\r\n        // By default, lexer reports are serializable\r\n        return lexerReport;\r\n    }\r\n\r\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\r\n        const astNodes = new Map<AstNode, any>();\r\n        const cstNodes = new Map<CstNode, any>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {});\r\n        }\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                cstNodes.set(cstNode, {});\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\r\n        const obj = context.astNodes.get(node) as Record<string, any>;\r\n        obj.$type = node.$type;\r\n        obj.$containerIndex = node.$containerIndex;\r\n        obj.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode !== undefined) {\r\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: any[] = [];\r\n                obj[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.dehydrateAstNode(item, context));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.dehydrateReference(item, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                obj[name] = this.dehydrateAstNode(value, context);\r\n            } else if (isReference(value)) {\r\n                obj[name] = this.dehydrateReference(value, context);\r\n            } else if (value !== undefined) {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\r\n        const obj: Record<string, unknown> = {};\r\n        obj.$refText = reference.$refText;\r\n        if (reference.$refNode) {\r\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\r\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\r\n        if (isRootCstNode(node)) {\r\n            cstNode.fullText = node.fullText;\r\n        } else {\r\n            // Note: This returns undefined for hidden nodes (i.e. comments)\r\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\r\n        }\r\n        cstNode.hidden = node.hidden;\r\n        cstNode.astNode = context.astNodes.get(node.astNode);\r\n        if (isCompositeCstNode(node)) {\r\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\r\n        } else if (isLeafCstNode(node)) {\r\n            cstNode.tokenType = node.tokenType.name;\r\n            cstNode.offset = node.offset;\r\n            cstNode.length = node.length;\r\n            cstNode.startLine = node.range.start.line;\r\n            cstNode.startColumn = node.range.start.character;\r\n            cstNode.endLine = node.range.end.line;\r\n            cstNode.endColumn = node.range.end.character;\r\n        }\r\n        return cstNode;\r\n    }\r\n\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\r\n        const node = result.value;\r\n        const context = this.createHydrationContext(node);\r\n        if ('$cstNode' in node) {\r\n            this.hydrateCstNode(node.$cstNode, context);\r\n        }\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport,\r\n            parserErrors: result.parserErrors,\r\n            value: this.hydrateAstNode(node, context) as T\r\n        };\r\n    }\r\n\r\n    protected createHydrationContext(node: any): HydrateContext {\r\n        const astNodes = new Map<any, AstNode>();\r\n        const cstNodes = new Map<any, CstNode>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {} as AstNode);\r\n        }\r\n        let root: RootCstNode;\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                let cst: Mutable<CstNode> | undefined;\r\n                if ('fullText' in cstNode) {\r\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\r\n                    root = cst as RootCstNode;\r\n                } else if ('content' in cstNode) {\r\n                    cst = new CompositeCstNodeImpl();\r\n                } else if ('tokenType' in cstNode) {\r\n                    cst = this.hydrateCstLeafNode(cstNode);\r\n                }\r\n                if (cst) {\r\n                    cstNodes.set(cstNode, cst);\r\n                    cst.root = root!;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\r\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\r\n        astNode.$type = node.$type;\r\n        astNode.$containerIndex = node.$containerIndex;\r\n        astNode.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode) {\r\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: unknown[] = [];\r\n                astNode[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.hydrateReference(item, astNode, name, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\r\n            } else if (isReference(value)) {\r\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\r\n            } else if (value !== undefined) {\r\n                astNode[name] = value;\r\n            }\r\n        }\r\n        return astNode;\r\n    }\r\n\r\n    protected setParent(node: any, parent: any): any {\r\n        node.$container = parent as AstNode;\r\n        return node;\r\n    }\r\n\r\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\r\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\r\n    }\r\n\r\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\r\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\r\n        if (typeof cstNode.grammarSource === 'number') {\r\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\r\n        }\r\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\r\n        if (isCompositeCstNode(cstNodeObj)) {\r\n            for (const child of cstNode.content) {\r\n                const hydrated = this.hydrateCstNode(child, context, num++);\r\n                cstNodeObj.content.push(hydrated);\r\n            }\r\n        }\r\n        return cstNodeObj;\r\n    }\r\n\r\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\r\n        const tokenType = this.getTokenType(cstNode.tokenType);\r\n        const offset = cstNode.offset;\r\n        const length = cstNode.length;\r\n        const startLine = cstNode.startLine;\r\n        const startColumn = cstNode.startColumn;\r\n        const endLine = cstNode.endLine;\r\n        const endColumn = cstNode.endColumn;\r\n        const hidden = cstNode.hidden;\r\n        const node = new LeafCstNodeImpl(\r\n            offset,\r\n            length,\r\n            {\r\n                start: {\r\n                    line: startLine,\r\n                    character: startColumn\r\n                },\r\n                end: {\r\n                    line: endLine,\r\n                    character: endColumn\r\n                }\r\n            },\r\n            tokenType,\r\n            hidden\r\n        );\r\n        return node;\r\n    }\r\n\r\n    protected getTokenType(name: string): TokenType {\r\n        return this.lexer.definition[name];\r\n    }\r\n\r\n    protected getGrammarElementId(node: AbstractElement | undefined): number | undefined {\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        return this.grammarElementIdMap.get(node);\r\n    }\r\n\r\n    protected getGrammarElement(id: number): AbstractElement | undefined {\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        const element = this.grammarElementIdMap.getKey(id);\r\n        return element;\r\n    }\r\n\r\n    protected createGrammarElementIdMap(): void {\r\n        let id = 0;\r\n        for (const element of streamAst(this.grammar)) {\r\n            if (isAbstractElement(element)) {\r\n                this.grammarElementIdMap.set(element, id++);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\r\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { isMultilineComment } from '../utils/regexp-utils.js';\r\nimport { isTerminalRule } from './generated/ast.js';\r\n\r\nexport interface GrammarConfig {\r\n    /**\r\n     * Lists all rule names which are classified as multiline comment rules\r\n     */\r\n    multilineCommentRules: string[]\r\n    /**\r\n     * A regular expression which matches characters of names\r\n     */\r\n    nameRegexp: RegExp\r\n}\r\n\r\n/**\r\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\r\n * language-specific module.\r\n */\r\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\r\n    const rules: string[] = [];\r\n    const grammar = services.Grammar;\r\n    for (const rule of grammar.rules) {\r\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\r\n            rules.push(rule.name);\r\n        }\r\n    }\r\n    return {\r\n        multilineCommentRules: rules,\r\n        nameRegexp: DefaultNameRegexp\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumCompletionParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumCompletionParser(services);\r\n    createParser(grammar, parser, lexer.definition);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport type { URI } from './utils/uri-utils.js';\r\nimport type { AbstractElement } from './languages/generated/ast.js';\r\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\r\n\r\n/**\r\n * A node in the Abstract Syntax Tree (AST).\r\n */\r\nexport interface AstNode {\r\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\r\n    readonly $type: string;\r\n    /** The container node in the AST; every node except the root node has a container. */\r\n    readonly $container?: AstNode;\r\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\r\n    readonly $containerProperty?: string;\r\n    /** In case `$containerProperty` is an array, the array index is stored here. */\r\n    readonly $containerIndex?: number;\r\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\r\n    readonly $cstNode?: CstNode;\r\n    /** The document containing the AST; only the root node has a direct reference to the document. */\r\n    readonly $document?: LangiumDocument;\r\n}\r\n\r\nexport function isAstNode(obj: unknown): obj is AstNode {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\r\n}\r\n\r\nexport interface GenericAstNode extends AstNode {\r\n    [key: string]: unknown\r\n}\r\n\r\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\r\n\r\n/**\r\n * The property names of a given AST node type.\r\n */\r\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\r\n\r\n/**\r\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\r\n */\r\nexport interface Reference<T extends AstNode = AstNode> {\r\n    /**\r\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\r\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\r\n     * the value is `undefined`.\r\n     */\r\n    readonly ref?: T;\r\n\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    readonly error?: LinkingError;\r\n    /** The CST node from which the reference was parsed */\r\n    readonly $refNode?: CstNode;\r\n    /** The actual text used to look up in the surrounding scope */\r\n    readonly $refText: string;\r\n    /** The node description for the AstNode returned by `ref`  */\r\n    readonly $nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isReference(obj: unknown): obj is Reference {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n}\r\n\r\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\r\n    readonly ref: T;\r\n}\r\n\r\n/**\r\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\r\n */\r\nexport interface AstNodeDescription {\r\n    /** The target node; should be present only for local references (linking to the same document). */\r\n    node?: AstNode;\r\n    /**\r\n     * The document segment that represents the range of the name of the AST node.\r\n     */\r\n    nameSegment?: DocumentSegment;\r\n    /**\r\n     * The document segment that represents the full range of the AST node.\r\n     */\r\n    selectionSegment?: DocumentSegment;\r\n    /** `$type` property value of the AST node */\r\n    type: string;\r\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\r\n    name: string;\r\n    /** URI to the document containing the AST node */\r\n    documentUri: URI;\r\n    /** Navigation path inside the document */\r\n    path: string;\r\n}\r\n\r\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\r\n    return typeof obj === 'object' && obj !== null\r\n        && typeof (obj as AstNodeDescription).name === 'string'\r\n        && typeof (obj as AstNodeDescription).type === 'string'\r\n        && typeof (obj as AstNodeDescription).path === 'string';\r\n}\r\n\r\n/**\r\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\r\n * unresolved references.\r\n */\r\nexport interface ReferenceInfo {\r\n    reference: Reference\r\n    container: AstNode\r\n    property: string\r\n    index?: number\r\n}\r\n\r\n/**\r\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\r\n */\r\nexport interface LinkingError extends ReferenceInfo {\r\n    message: string;\r\n    targetDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isLinkingError(obj: unknown): obj is LinkingError {\r\n    return typeof obj === 'object' && obj !== null\r\n        && isAstNode((obj as LinkingError).container)\r\n        && isReference((obj as LinkingError).reference)\r\n        && typeof (obj as LinkingError).message === 'string';\r\n}\r\n\r\n/**\r\n * Service used for generic access to the structure of the AST. This service is shared between\r\n * all involved languages, so it operates on the superset of types of these languages.\r\n */\r\nexport interface AstReflection {\r\n    getAllTypes(): string[]\r\n    getAllSubTypes(type: string): string[]\r\n    getReferenceType(refInfo: ReferenceInfo): string\r\n    getTypeMetaData(type: string): TypeMetaData\r\n    isInstance(node: unknown, type: string): boolean\r\n    isSubtype(subtype: string, supertype: string): boolean\r\n}\r\n\r\n/**\r\n * An abstract implementation of the {@link AstReflection} interface.\r\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\r\n */\r\nexport abstract class AbstractAstReflection implements AstReflection {\r\n\r\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\r\n    protected allSubtypes: Record<string, string[] | undefined> = {};\r\n\r\n    abstract getAllTypes(): string[];\r\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\r\n    abstract getTypeMetaData(type: string): TypeMetaData;\r\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\r\n\r\n    isInstance(node: unknown, type: string): boolean {\r\n        return isAstNode(node) && this.isSubtype(node.$type, type);\r\n    }\r\n\r\n    isSubtype(subtype: string, supertype: string): boolean {\r\n        if (subtype === supertype) {\r\n            return true;\r\n        }\r\n        let nested = this.subtypes[subtype];\r\n        if (!nested) {\r\n            nested = this.subtypes[subtype] = {};\r\n        }\r\n        const existing = nested[supertype];\r\n        if (existing !== undefined) {\r\n            return existing;\r\n        } else {\r\n            const result = this.computeIsSubtype(subtype, supertype);\r\n            nested[supertype] = result;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    getAllSubTypes(type: string): string[] {\r\n        const existing = this.allSubtypes[type];\r\n        if (existing) {\r\n            return existing;\r\n        } else {\r\n            const allTypes = this.getAllTypes();\r\n            const types: string[] = [];\r\n            for (const possibleSubType of allTypes) {\r\n                if (this.isSubtype(possibleSubType, type)) {\r\n                    types.push(possibleSubType);\r\n                }\r\n            }\r\n            this.allSubtypes[type] = types;\r\n            return types;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents runtime meta data about a meta model type.\r\n */\r\nexport interface TypeMetaData {\r\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\r\n    name: string\r\n    /** A list of properties. They can contain default values for their respective property in the AST. */\r\n    properties: TypeProperty[]\r\n}\r\n\r\n/**\r\n * Describes the meta data of a property of an AST node.\r\n *\r\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\r\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\r\n */\r\nexport interface TypeProperty {\r\n    name: string\r\n    defaultValue?: PropertyType\r\n}\r\n\r\n/**\r\n * Represents a default value for an AST property.\r\n */\r\nexport type PropertyType = number | string | boolean | PropertyType[];\r\n\r\n/**\r\n * A node in the Concrete Syntax Tree (CST).\r\n */\r\nexport interface CstNode extends DocumentSegment {\r\n    /** The container node in the CST */\r\n    readonly container?: CompositeCstNode;\r\n    /** @deprecated use `container` instead. */\r\n    readonly parent?: CompositeCstNode;\r\n    /** The actual text */\r\n    readonly text: string;\r\n    /** The root CST node */\r\n    readonly root: RootCstNode;\r\n    /** The grammar element from which this node was parsed */\r\n    readonly grammarSource?: AbstractElement;\r\n    /** @deprecated use `grammarSource` instead. */\r\n    readonly feature?: AbstractElement;\r\n    /** The AST node created from this CST node */\r\n    readonly astNode: AstNode;\r\n    /** @deprecated use `astNode` instead. */\r\n    readonly element: AstNode;\r\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\r\n    readonly hidden: boolean;\r\n}\r\n\r\n/**\r\n * A composite CST node contains other nodes, but no directly associated token.\r\n */\r\nexport interface CompositeCstNode extends CstNode {\r\n    readonly content: CstNode[];\r\n    /** @deprecated use `content` instead. */\r\n    readonly children: CstNode[];\r\n}\r\n\r\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\r\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\r\n}\r\n\r\n/**\r\n * A leaf CST node corresponds to a token in the input token stream.\r\n */\r\nexport interface LeafCstNode extends CstNode {\r\n    readonly tokenType: TokenType;\r\n}\r\n\r\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\r\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\r\n}\r\n\r\nexport interface RootCstNode extends CompositeCstNode {\r\n    readonly fullText: string\r\n}\r\n\r\nexport function isRootCstNode(node: unknown): node is RootCstNode {\r\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\r\n}\r\n\r\n/**\r\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\r\n */\r\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\r\n\r\n/**\r\n * Returns the property names (!) of an AstNode that are cross-references.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\r\n */\r\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\r\n    ExtractKeysOfValueType<N, Reference|undefined>\r\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) & {};\r\n\r\n/**\r\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\r\n */\r\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\r\n\r\n/**\r\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\r\n */\r\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\r\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\r\n}[keyof A];\r\n\r\nexport type Mutable<T> = {\r\n    -readonly [P in keyof T]: T[P]\r\n};\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\r\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\r\n\r\n/**\r\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\r\n */\r\nexport interface ValueConverter {\r\n    /**\r\n     * Converts a string value from the source text format into a value to be held in the AST.\r\n     */\r\n    convert(input: string, cstNode: CstNode): ValueType;\r\n}\r\n\r\nexport type ValueType = string | number | boolean | bigint | Date;\r\n\r\nexport class DefaultValueConverter implements ValueConverter {\r\n\r\n    convert(input: string, cstNode: CstNode): ValueType {\r\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\r\n        if (isCrossReference(feature)) {\r\n            feature = getCrossReferenceTerminal(feature);\r\n        }\r\n        if (isRuleCall(feature)) {\r\n            const rule = feature.rule.ref;\r\n            if (!rule) {\r\n                throw new Error('This cst node was not parsed by a rule.');\r\n            }\r\n            return this.runConverter(rule, input, cstNode);\r\n        }\r\n        return input;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\r\n        switch (rule.name.toUpperCase()) {\r\n            case 'INT': return ValueConverter.convertInt(input);\r\n            case 'STRING': return ValueConverter.convertString(input);\r\n            case 'ID': return ValueConverter.convertID(input);\r\n        }\r\n        switch (getRuleType(rule)?.toLowerCase()) {\r\n            case 'number': return ValueConverter.convertNumber(input);\r\n            case 'boolean': return ValueConverter.convertBoolean(input);\r\n            case 'bigint': return ValueConverter.convertBigint(input);\r\n            case 'date': return ValueConverter.convertDate(input);\r\n            default: return input;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ValueConverter {\r\n\r\n    export function convertString(input: string): string {\r\n        let result = '';\r\n        for (let i = 1; i < input.length - 1; i++) {\r\n            const c = input.charAt(i);\r\n            if (c === '\\\\') {\r\n                const c1 = input.charAt(++i);\r\n                result += convertEscapeCharacter(c1);\r\n            } else {\r\n                result += c;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertEscapeCharacter(char: string): string {\r\n        switch (char) {\r\n            case 'b': return '\\b';\r\n            case 'f': return '\\f';\r\n            case 'n': return '\\n';\r\n            case 'r': return '\\r';\r\n            case 't': return '\\t';\r\n            case 'v': return '\\v';\r\n            case '0': return '\\0';\r\n            default: return char;\r\n        }\r\n    }\r\n\r\n    export function convertID(input: string): string {\r\n        if (input.charAt(0) === '^') {\r\n            return input.substring(1);\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n\r\n    export function convertInt(input: string): number {\r\n        return parseInt(input);\r\n    }\r\n\r\n    export function convertBigint(input: string): bigint {\r\n        return BigInt(input);\r\n    }\r\n\r\n    export function convertDate(input: string): Date {\r\n        return new Date(input);\r\n    }\r\n\r\n    export function convertNumber(input: string): number {\r\n        return Number(input);\r\n    }\r\n\r\n    export function convertBoolean(input: string): boolean {\r\n        return input.toLowerCase() === 'true';\r\n    }\r\n\r\n}\r\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\r\nimport { inRange } from './cst-utils.js';\r\n\r\n/**\r\n * Link the `$container` and other related properties of every AST node that is directly contained\r\n * in the given `node`.\r\n */\r\nexport function linkContentToContainer(node: AstNode): void {\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach((item, index) => {\r\n                    if (isAstNode(item)) {\r\n                        (item as Mutable<AstNode>).$container = node;\r\n                        (item as Mutable<AstNode>).$containerProperty = name;\r\n                        (item as Mutable<AstNode>).$containerIndex = index;\r\n                    }\r\n                });\r\n            } else if (isAstNode(value)) {\r\n                (value as Mutable<AstNode>).$container = node;\r\n                (value as Mutable<AstNode>).$containerProperty = name;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\r\n * node that matches the type predicate. If the start node itself matches, it is returned.\r\n * If no container matches, `undefined` is returned.\r\n */\r\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\r\n    let item = node;\r\n    while (item) {\r\n        if (typePredicate(item)) {\r\n            return item;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\r\n * of a container that matches the given predicate. The start node is included in the checks.\r\n */\r\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\r\n    let item = node;\r\n    while (item) {\r\n        if (predicate(item)) {\r\n            return true;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Retrieve the document in which the given AST node is contained. A reference to the document is\r\n * usually held by the root node of the AST.\r\n *\r\n * @throws an error if the node is not contained in a document.\r\n */\r\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\r\n    const rootNode = findRootNode(node);\r\n    const result = rootNode.$document;\r\n    if (!result) {\r\n        throw new Error('AST node has no document.');\r\n    }\r\n    return result as LangiumDocument<T>;\r\n}\r\n\r\n/**\r\n * Returns the root node of the given AST node by following the `$container` references.\r\n */\r\nexport function findRootNode(node: AstNode): AstNode {\r\n    while (node.$container) {\r\n        node = node.$container;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport interface AstStreamOptions {\r\n    /**\r\n     * Optional target range that the nodes in the stream need to intersect\r\n     */\r\n    range?: Range\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\r\n    if (!node) {\r\n        throw new Error('Node must be an AstNode.');\r\n    }\r\n    const range = options?.range;\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, AstNode>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isAstNode(value)) {\r\n                    state.keyIndex++;\r\n                    if (isAstNodeInRange(value, range)) {\r\n                        return { done: false, value };\r\n                    }\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\r\n                            return { done: false, value: element };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\r\n * This does not include the root node itself.\r\n */\r\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options));\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\r\n        // Return an empty stream if the root node isn't in range\r\n        return new TreeStreamImpl(root, () => []);\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\r\n}\r\n\r\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\r\n    if (!range) {\r\n        return true;\r\n    }\r\n    const nodeRange = astNode.$cstNode?.range;\r\n    if (!nodeRange) {\r\n        return false;\r\n    }\r\n    return inRange(nodeRange, range);\r\n}\r\n\r\n/**\r\n * Create a stream of all cross-references that are held by the given AST node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, ReferenceInfo>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isReference(value)) {\r\n                    state.keyIndex++;\r\n                    return { done: false, value: { reference: value, container: node, property } };\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isReference(element)) {\r\n                            return { done: false, value: { reference: element, container: node, property, index } };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a Stream of references to the target node from the AstNode tree\r\n *\r\n * @param targetNode AstNode we are looking for\r\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\r\n */\r\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\r\n    const refs: Reference[] = [];\r\n    streamAst(lookup).forEach(node => {\r\n        streamReferences(node).forEach(refInfo => {\r\n            if (refInfo.reference.ref === targetNode) {\r\n                refs.push(refInfo.reference);\r\n            }\r\n        });\r\n    });\r\n    return stream(refs);\r\n}\r\n\r\n/**\r\n * Assigns all mandatory AST properties to the specified node.\r\n *\r\n * @param reflection Reflection object used to gather mandatory properties for the node.\r\n * @param node Specified node is modified in place and properties are directly assigned.\r\n */\r\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\r\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\r\n    const genericNode = node as GenericAstNode;\r\n    for (const property of typeMetaData.properties) {\r\n        // Only set the value if the property is not already set and if it has a default value\r\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\r\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\r\n    if (Array.isArray(propertyType)) {\r\n        return [...propertyType.map(copyDefaultValue)];\r\n    } else {\r\n        return propertyType;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the specified AST node.\r\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\r\n *\r\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\r\n */\r\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\r\n    const copy: GenericAstNode = { $type: node.$type };\r\n\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (isAstNode(value)) {\r\n                copy[name] = copyAstNode(value, buildReference);\r\n            } else if (isReference(value)) {\r\n                copy[name] = buildReference(\r\n                    copy,\r\n                    name,\r\n                    value.$refNode,\r\n                    value.$refText\r\n                );\r\n            } else if (Array.isArray(value)) {\r\n                const copiedArray: unknown[] = [];\r\n                for (const element of value) {\r\n                    if (isAstNode(element)) {\r\n                        copiedArray.push(copyAstNode(element, buildReference));\r\n                    } else if (isReference(element)) {\r\n                        copiedArray.push(\r\n                            buildReference(\r\n                                copy,\r\n                                name,\r\n                                element.$refNode,\r\n                                element.$refText\r\n                            )\r\n                        );\r\n                    } else {\r\n                        copiedArray.push(element);\r\n                    }\r\n                }\r\n                copy[name] = copiedArray;\r\n            } else {\r\n                copy[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    linkContentToContainer(copy);\r\n    return copy as unknown as T;\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CustomPatternMatcherFunc, ILexingError, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { Lexer } from 'chevrotain';\r\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\r\nimport { streamAllContents } from '../utils/ast-utils.js';\r\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\n\r\nexport interface TokenBuilderOptions {\r\n    caseInsensitive?: boolean\r\n}\r\n\r\nexport interface TokenBuilder {\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\r\n    /**\r\n     * Produces a lexing report for the given text that was just tokenized using the tokens provided by this builder.\r\n     *\r\n     * @param text The text that was tokenized.\r\n     */\r\n    flushLexingReport?(text: string): LexingReport;\r\n}\r\n\r\n/**\r\n * A custom lexing report that can be produced by the token builder during the lexing process.\r\n * Adopters need to ensure that the any custom fields are serializable so they can be sent across worker threads.\r\n */\r\nexport interface LexingReport {\r\n    diagnostics: LexingDiagnostic[];\r\n}\r\n\r\nexport type LexingDiagnosticSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport interface LexingDiagnostic extends ILexingError {\r\n    severity?: LexingDiagnosticSeverity;\r\n}\r\n\r\nexport class DefaultTokenBuilder implements TokenBuilder {\r\n    /**\r\n     * The list of diagnostics stored during the lexing process of a single text.\r\n     */\r\n    protected diagnostics: LexingDiagnostic[] = [];\r\n\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\r\n        const reachableRules = stream(getAllReachableRules(grammar, false));\r\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\r\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\r\n\r\n        terminalTokens.forEach(terminalToken => {\r\n            const pattern = terminalToken.PATTERN;\r\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\r\n                tokens.unshift(terminalToken);\r\n            } else {\r\n                tokens.push(terminalToken);\r\n            }\r\n        });\r\n        // We don't need to add the EOF token explicitly.\r\n        // It is automatically available at the end of the token stream.\r\n        return tokens;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    flushLexingReport(text: string): LexingReport {\r\n        return { diagnostics: this.popDiagnostics() };\r\n    }\r\n\r\n    protected popDiagnostics(): LexingDiagnostic[] {\r\n        const diagnostics = [...this.diagnostics];\r\n        this.diagnostics = [];\r\n        return diagnostics;\r\n    }\r\n\r\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\r\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\r\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\r\n    }\r\n\r\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\r\n        const regex = terminalRegex(terminal);\r\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\r\n        const tokenType: TokenType = {\r\n            name: terminal.name,\r\n            PATTERN: pattern,\r\n        };\r\n        if (typeof pattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n        if (terminal.hidden) {\r\n            // Only skip tokens that are able to accept whitespace\r\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\r\n        }\r\n        return tokenType;\r\n    }\r\n\r\n    protected requiresCustomPattern(regex: RegExp): boolean {\r\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\r\n            // Unicode and dotall regexes are not supported by Chevrotain.\r\n            return true;\r\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\r\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\r\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\r\n        return (text, offset) => {\r\n            stickyRegex.lastIndex = offset;\r\n            const execResult = stickyRegex.exec(text);\r\n            return execResult;\r\n        };\r\n    }\r\n\r\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\r\n        return rules\r\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\r\n            .filter(isParserRule)\r\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\r\n            .distinct(e => e.value).toArray()\r\n            // Sort keywords by descending length\r\n            .sort((a, b) => b.value.length - a.value.length)\r\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\r\n    }\r\n\r\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\r\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\r\n        const tokenType: TokenType = {\r\n            name: keyword.value,\r\n            PATTERN: keywordPattern,\r\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\r\n        };\r\n\r\n        if (typeof keywordPattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n\r\n        return tokenType;\r\n    }\r\n\r\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\r\n        return caseInsensitive ?\r\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\r\n            keyword.value;\r\n    }\r\n\r\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\r\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\r\n            const pattern = token?.PATTERN as RegExp;\r\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\r\n                longerAlts.push(token);\r\n            }\r\n            return longerAlts;\r\n        }, []);\r\n    }\r\n}\r\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-YDWR4PMV.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-OKEFYU3C.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-CY4NQLBY.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-SI5TIVW2.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-2EOCH6SN.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-K7TBWW4H.mjs\";\nimport {\n  TreemapModule,\n  createTreemapServices\n} from \"./chunks/mermaid-parser.core/chunk-QKX3RCWE.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  TreemapDoc,\n  TreemapGeneratedModule,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemapDoc\n} from \"./chunks/mermaid-parser.core/chunk-ORCS5NZH.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-3VTXS3R3.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-DSR6H3E6.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-GAM7RPQU.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-I2MV5QL6.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-PIIEIUND.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-NEH6LVNW.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\"),\n  treemap: /* @__PURE__ */ __name(async () => {\n    const { createTreemapServices: createTreemapServices2 } = await import(\"./chunks/mermaid-parser.core/treemap-FKARHQ26.mjs\");\n    const parser = createTreemapServices2().Treemap.parser.LangiumParser;\n    parsers.treemap = parser;\n  }, \"treemap\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  TreemapDoc,\n  TreemapGeneratedModule,\n  TreemapModule,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  createTreemapServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemapDoc,\n  parse\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\r\n * both sequentially and randomly (via index), a stream allows only sequential access.\r\n *\r\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\r\n * to store intermediate values. This can boost performance when a large sequence is\r\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\r\n * evaluation means that all processing is repeated when you access the sequence multiple\r\n * times; in such a case, it may be better to store the resulting sequence into an array.\r\n */\r\nexport interface Stream<T> extends Iterable<T> {\r\n\r\n    /**\r\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\r\n     */\r\n    iterator(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Determines whether this stream contains no elements.\r\n     */\r\n    isEmpty(): boolean;\r\n\r\n    /**\r\n     * Determines the number of elements in this stream.\r\n     */\r\n    count(): number;\r\n\r\n    /**\r\n     * Collects all elements of this stream into an array.\r\n     */\r\n    toArray(): T[];\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Set.\r\n     */\r\n    toSet(): Set<T>;\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\r\n     *\r\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\r\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\r\n     */\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\r\n\r\n    /**\r\n     * Returns a string representation of a stream.\r\n     */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\r\n     *\r\n     * @param other Stream to be concatenated with this one.\r\n     */\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\r\n\r\n    /**\r\n     * Adds all elements of the stream into a string, separated by the specified separator string.\r\n     *\r\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\r\n     *        If omitted, the steam elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\r\n     *\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\r\n     *        starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Determines whether all members of the stream satisfy the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\r\n     *        of the stream.\r\n     */\r\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Determines whether any member of the stream satisfies the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\r\n     *        of the stream.\r\n     */\r\n    some(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Performs the specified action for each element in the stream.\r\n     *\r\n     * @param callbackfn Function called once for each element in the stream.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number) => void): void;\r\n\r\n    /**\r\n     * Returns a stream that yields the results of calling the specified callback function on each element\r\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\r\n     * accessing the resulting stream multiple times means the function is also called multiple times for\r\n     * each element of the stream.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that meet the condition specified in a callback function.\r\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\r\n     * resulting stream multiple times means the function is also called multiple times for each element\r\n     * of the stream.\r\n     *\r\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\r\n     */\r\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\r\n    filter(predicate: (value: T) => unknown): Stream<T>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\r\n     * nor `null`.\r\n     */\r\n    nonNullable(): Stream<NonNullable<T>>;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream. The return value of the\r\n     * callback function is the accumulated result, and is provided as an argument in the next call to\r\n     * the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of a stream value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    findIndex(predicate: (value: T) => unknown): number;\r\n\r\n    /**\r\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\r\n     *\r\n     * @param searchElement The element to search for.\r\n     */\r\n    includes(searchElement: T): boolean;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of the stream and then flattens the result into\r\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\r\n\r\n    /**\r\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\r\n     * to the specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth. Defaults to 1.\r\n     */\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\r\n\r\n    /**\r\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\r\n     */\r\n    head(): T | undefined;\r\n\r\n    /**\r\n     * Returns a stream that skips the first `skipCount` elements from this stream.\r\n     *\r\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\r\n     *        the stream, an empty stream is returned. Defaults to 1.\r\n     */\r\n    tail(skipCount?: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\r\n     * in length.\r\n     *\r\n     * @param maxSize The number of elements the stream should be limited to\r\n     */\r\n    limit(maxSize: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream containing only the distinct elements from this stream.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     *\r\n     * @param by A function returning the key used to check equality with a previous stream element.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     * @param other The elements that should be exluded from this stream.\r\n     * @param key A function returning the key used to check quality.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\r\n\r\n}\r\n\r\nexport type FlatStream<T, Depth extends number> = {\r\n    'done': Stream<T>,\r\n    'recur': T extends Iterable<infer Content>\r\n        ? FlatStream<Content, MinusOne<Depth>>\r\n        : Stream<T>\r\n}[Depth extends 0 ? 'done' : 'recur'];\r\n\r\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\r\n\r\n/**\r\n * The default implementation of `Stream` works with two input functions:\r\n *  - The first function creates the initial state of an iteration.\r\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\r\n */\r\nexport class StreamImpl<S, T> implements Stream<T> {\r\n    protected readonly startFn: () => S;\r\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\r\n\r\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\r\n        this.startFn = startFn;\r\n        this.nextFn = nextFn;\r\n    }\r\n\r\n    iterator(): IterableIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        return this.iterator();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        const iterator = this.iterator();\r\n        return Boolean(iterator.next().done);\r\n    }\r\n\r\n    count(): number {\r\n        const iterator = this.iterator();\r\n        let count = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            count++;\r\n            next = iterator.next();\r\n        }\r\n        return count;\r\n    }\r\n\r\n    toArray(): T[] {\r\n        const result: T[] = [];\r\n        const iterator = this.iterator();\r\n        let next: IteratorResult<T>;\r\n        do {\r\n            next = iterator.next();\r\n            if (next.value !== undefined) {\r\n                result.push(next.value);\r\n            }\r\n        } while (!next.done);\r\n        return result;\r\n    }\r\n\r\n    toSet(): Set<T> {\r\n        return new Set(this);\r\n    }\r\n\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\r\n        const entryStream = this.map(element => <[K, V]>[\r\n            keyFn ? keyFn(element) : element,\r\n            valueFn ? valueFn(element) : element\r\n        ]);\r\n        return new Map(entryStream);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join();\r\n    }\r\n\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\r\n        return new StreamImpl<{ first: S, firstDone: boolean, iterator: Iterator<T2, unknown, undefined> }, T | T2>(\r\n            () => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }),\r\n            state => {\r\n                let result: IteratorResult<T | T2>;\r\n                if (!state.firstDone) {\r\n                    do {\r\n                        result = this.nextFn(state.first);\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    } while (!result.done);\r\n                    state.firstDone = true;\r\n                }\r\n                do {\r\n                    result = state.iterator.next();\r\n                    if (!result.done) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    join(separator = ','): string {\r\n        const iterator = this.iterator();\r\n        let value = '';\r\n        let result: IteratorResult<T>;\r\n        let addSeparator = false;\r\n        do {\r\n            result = iterator.next();\r\n            if (!result.done) {\r\n                if (addSeparator) {\r\n                    value += separator;\r\n                }\r\n                value += toString(result.value);\r\n            }\r\n            addSeparator = true;\r\n        } while (!result.done);\r\n        return value;\r\n    }\r\n\r\n    indexOf(searchElement: T, fromIndex = 0): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (index >= fromIndex && next.value === searchElement) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // In the following definition the '& this' part in the return type is important\r\n    // _and_ the order within 'Stream<U> & this' is crucial!\r\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\r\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\r\n    // ```\r\n    //  const stream = new StreamImpl(...);\r\n    //  ... stream.every(<typeGuard>) & stream....\r\n    // ```\r\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\r\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\r\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\r\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n    every(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (!predicate(next.value)) {\r\n                return false;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    some(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, index: number) => void): void {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            callbackfn(next.value, index);\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n    }\r\n\r\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\r\n        return new StreamImpl<S, U>(\r\n            this.startFn,\r\n            (state) => {\r\n                const { done, value } = this.nextFn(state);\r\n                if (done) {\r\n                    return DONE_RESULT;\r\n                } else {\r\n                    return { done: false, value: callbackfn(value) };\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\r\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            this.startFn,\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state);\r\n                    if (!result.done && predicate(result.value)) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    nonNullable(): Stream<NonNullable<T>> {\r\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\r\n    }\r\n\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const iterator = this.iterator();\r\n        let previousValue: U | T | undefined = initialValue;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (previousValue === undefined) {\r\n                previousValue = next.value;\r\n            } else {\r\n                previousValue = callbackfn(previousValue, next.value);\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return previousValue;\r\n    }\r\n\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\r\n    }\r\n\r\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const next = iterator.next();\r\n        if (next.done) {\r\n            return initialValue;\r\n        }\r\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\r\n        if (previousValue === undefined) {\r\n            return next.value;\r\n        }\r\n        return callbackfn(previousValue, next.value);\r\n    }\r\n\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return next.value;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findIndex(predicate: (value: T) => unknown): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    includes(searchElement: T): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (next.value === searchElement) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\r\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\r\n        return new StreamImpl<FlatMapState, U>(\r\n            () => ({ this: this.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = this.nextFn(state.this);\r\n                    if (!done) {\r\n                        const mapped = callbackfn(value);\r\n                        if (isIterable(mapped)) {\r\n                            state.iterator = mapped[Symbol.iterator]();\r\n                        } else {\r\n                            return { done: false, value: mapped };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\r\n        if (depth === undefined) {\r\n            depth = 1 as D;\r\n        }\r\n        if (depth <= 0) {\r\n            return this as unknown as FlatStream<T, D>;\r\n        }\r\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\r\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\r\n        return new StreamImpl<FlatMapState, T>(\r\n            () => ({ this: stream.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = stream.nextFn(state.this);\r\n                    if (!done) {\r\n                        if (isIterable(value)) {\r\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\r\n                        } else {\r\n                            return { done: false, value: value };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        ) as unknown as FlatStream<T, D>;\r\n    }\r\n\r\n    head(): T | undefined {\r\n        const iterator = this.iterator();\r\n        const result = iterator.next();\r\n        if (result.done) {\r\n            return undefined;\r\n        }\r\n        return result.value;\r\n    }\r\n\r\n    tail(skipCount = 1): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            () => {\r\n                const state = this.startFn();\r\n                for (let i = 0; i < skipCount; i++) {\r\n                    const next = this.nextFn(state);\r\n                    if (next.done) {\r\n                        return state;\r\n                    }\r\n                }\r\n                return state;\r\n            },\r\n            this.nextFn\r\n        );\r\n    }\r\n\r\n    limit(maxSize: number): Stream<T> {\r\n        return new StreamImpl<{ size: number, state: S }, T>(\r\n            () => ({ size: 0, state: this.startFn() }),\r\n            state => {\r\n                state.size++;\r\n                if (state.size > maxSize) {\r\n                    return DONE_RESULT;\r\n                }\r\n                return this.nextFn(state.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\r\n        return new StreamImpl<{ set: Set<Key | T>, internalState: S }, T>(\r\n            () => ({ set: new Set<Key | T>(), internalState: this.startFn() }),\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state.internalState);\r\n                    if (!result.done) {\r\n                        const value = by ? by(result.value) : result.value;\r\n                        if (!state.set.has(value)) {\r\n                            state.set.add(value);\r\n                            return result;\r\n                        }\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\r\n        const otherKeySet = new Set<Key | T>();\r\n        for (const item of other) {\r\n            const value = key ? key(item) : item;\r\n            otherKeySet.add(value);\r\n        }\r\n        return this.filter(e => {\r\n            const ownKey = key ? key(e) : e;\r\n            return !otherKeySet.has(ownKey);\r\n        });\r\n    }\r\n}\r\n\r\nfunction toString(item: unknown): string {\r\n    if (typeof item === 'string') {\r\n        return item as string;\r\n    }\r\n    if (typeof item === 'undefined') {\r\n        return 'undefined';\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof (item as any).toString === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return (item as any).toString();\r\n    }\r\n    return Object.prototype.toString.call(item);\r\n}\r\n\r\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\r\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * An empty stream of any type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\r\n\r\n/**\r\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\r\n */\r\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\r\n\r\n/**\r\n * Create a stream from one or more iterables or array-likes.\r\n */\r\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\r\n    if (collections.length === 1) {\r\n        const collection = collections[0];\r\n        if (collection instanceof StreamImpl) {\r\n            return collection as Stream<T>;\r\n        }\r\n        if (isIterable(collection)) {\r\n            return new StreamImpl<Iterator<T, undefined>, T>(\r\n                () => collection[Symbol.iterator](),\r\n                (iterator) => iterator.next()\r\n            );\r\n        }\r\n        if (typeof collection.length === 'number') {\r\n            return new StreamImpl<{ index: number }, T>(\r\n                () => ({ index: 0 }),\r\n                (state) => {\r\n                    if (state.index < collection.length) {\r\n                        return { done: false, value: collection[state.index++] };\r\n                    } else {\r\n                        return DONE_RESULT;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    if (collections.length > 1) {\r\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\r\n        return new StreamImpl<State, T>(\r\n            () => ({ collIndex: 0, arrIndex: 0 }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (!next.done) {\r\n                            return next;\r\n                        }\r\n                        state.iterator = undefined;\r\n                    }\r\n                    if (state.array) {\r\n                        if (state.arrIndex < state.array.length) {\r\n                            return { done: false, value: state.array[state.arrIndex++] };\r\n                        }\r\n                        state.array = undefined;\r\n                        state.arrIndex = 0;\r\n                    }\r\n                    if (state.collIndex < collections.length) {\r\n                        const collection = collections[state.collIndex++];\r\n                        if (isIterable(collection)) {\r\n                            state.iterator = collection[Symbol.iterator]();\r\n                        } else if (collection && typeof collection.length === 'number') {\r\n                            state.array = collection;\r\n                        }\r\n                    }\r\n                } while (state.iterator || state.array || state.collIndex < collections.length);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n    return EMPTY_STREAM;\r\n}\r\n\r\n/**\r\n * A tree iterator adds the ability to prune the current iteration.\r\n */\r\nexport interface TreeIterator<T> extends IterableIterator<T> {\r\n    /**\r\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\r\n     * element had no children.\r\n     */\r\n    prune(): void\r\n}\r\n\r\n/**\r\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\r\n */\r\nexport interface TreeStream<T> extends Stream<T> {\r\n    iterator(): TreeIterator<T>\r\n}\r\n\r\n/**\r\n * The default implementation of `TreeStream` takes a root element and a function that computes the\r\n * children of its argument. Whether the root node included in the stream is controlled with the\r\n * `includeRoot` option, which defaults to `false`.\r\n */\r\nexport class TreeStreamImpl<T>\r\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\r\n    implements TreeStream<T> {\r\n\r\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\r\n        super(\r\n            () => ({\r\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\r\n                pruned: false\r\n            }),\r\n            state => {\r\n                if (state.pruned) {\r\n                    state.iterators.pop();\r\n                    state.pruned = false;\r\n                }\r\n                while (state.iterators.length > 0) {\r\n                    const iterator = state.iterators[state.iterators.length - 1];\r\n                    const next = iterator.next();\r\n                    if (next.done) {\r\n                        state.iterators.pop();\r\n                    } else {\r\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\r\n                        return next;\r\n                    }\r\n                }\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    override iterator(): TreeIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            prune: () => {\r\n                iterator.state.pruned = true;\r\n            },\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of utility functions that reduce a stream to a single value.\r\n */\r\nexport namespace Reduction {\r\n\r\n    /**\r\n     * Compute the sum of a number stream.\r\n     */\r\n    export function sum(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a + b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the product of a number stream.\r\n     */\r\n    export function product(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a * b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function min(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.min(a, b));\r\n    }\r\n\r\n    /**\r\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function max(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.max(a, b));\r\n    }\r\n\r\n}\r\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken } from '@chevrotain/types';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\r\nimport { TreeStreamImpl } from './stream.js';\r\n\r\n/**\r\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\r\n    return new TreeStreamImpl(node, element => {\r\n        if (isCompositeCstNode(element)) {\r\n            return element.content;\r\n        } else {\r\n            return [];\r\n        }\r\n    }, { includeRoot: true });\r\n}\r\n\r\n/**\r\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\r\n */\r\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\r\n    return streamCst(node).filter(isLeafCstNode);\r\n}\r\n\r\n/**\r\n * Determines whether the specified cst node is a child of the specified parent node.\r\n */\r\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\r\n    while (child.container) {\r\n        child = child.container;\r\n        if (child === parent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function tokenToRange(token: IToken): Range {\r\n    // Chevrotain uses 1-based indices everywhere\r\n    // So we subtract 1 from every value to align with the LSP\r\n    return {\r\n        start: {\r\n            character: token.startColumn! - 1,\r\n            line: token.startLine! - 1\r\n        },\r\n        end: {\r\n            character: token.endColumn!, // endColumn uses the correct index\r\n            line: token.endLine! - 1\r\n        }\r\n    };\r\n}\r\n\r\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const { offset, end, range } = node;\r\n    return {\r\n        range,\r\n        offset,\r\n        end,\r\n        length: end - offset\r\n    };\r\n}\r\n\r\nexport enum RangeComparison {\r\n    Before = 0,\r\n    After = 1,\r\n    OverlapFront = 2,\r\n    OverlapBack = 3,\r\n    Inside = 4,\r\n    Outside = 5,\r\n}\r\n\r\nexport function compareRange(range: Range, to: Range): RangeComparison {\r\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\r\n        return RangeComparison.Before;\r\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\r\n        return RangeComparison.After;\r\n    }\r\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\r\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\r\n    if (startInside && endInside) {\r\n        return RangeComparison.Inside;\r\n    } else if (startInside) {\r\n        return RangeComparison.OverlapBack;\r\n    } else if (endInside) {\r\n        return RangeComparison.OverlapFront;\r\n    } else {\r\n        return RangeComparison.Outside;\r\n    }\r\n}\r\n\r\nexport function inRange(range: Range, to: Range): boolean {\r\n    const comparison = compareRange(range, to);\r\n    return comparison > RangeComparison.After;\r\n}\r\n\r\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\r\n// Together with \\w it matches any kind of character which can commonly appear in IDs\r\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\r\n\r\n/**\r\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\r\n * it will instead return the leaf node at the `offset - 1` position.\r\n *\r\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\r\n */\r\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\r\n    if (cstNode) {\r\n        if (offset > 0) {\r\n            const localOffset = offset - cstNode.offset;\r\n            const textAtOffset = cstNode.text.charAt(localOffset);\r\n            if (!nameRegexp.test(textAtOffset)) {\r\n                offset--;\r\n            }\r\n        }\r\n        return findLeafNodeAtOffset(cstNode, offset);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\r\n    if (cstNode) {\r\n        const previous = getPreviousNode(cstNode, true);\r\n        if (previous && isCommentNode(previous, commentNames)) {\r\n            return previous;\r\n        }\r\n        if (isRootCstNode(cstNode)) {\r\n            // Go from the first non-hidden node through all nodes in reverse order\r\n            // We do this to find the comment node which directly precedes the root node\r\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\r\n            for (let i = endIndex - 1; i >= 0; i--) {\r\n                const child = cstNode.content[i];\r\n                if (isCommentNode(child, commentNames)) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\r\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * Note that the given offset will be within the range of the returned leaf node.\r\n *\r\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node at the specified offset.\r\n */\r\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, false);\r\n        if (searchResult) {\r\n            return findLeafNodeAtOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * If no CST node exists at the specified position, it will return the leaf node before it.\r\n *\r\n * If there is no leaf node before the specified offset, this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node closest to the specified offset.\r\n */\r\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, true);\r\n        if (searchResult) {\r\n            return findLeafNodeBeforeOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\r\n    let left = 0;\r\n    let right = node.content.length - 1;\r\n    let closestNode: CstNode | undefined = undefined;\r\n\r\n    while (left <= right) {\r\n        const middle = Math.floor((left + right) / 2);\r\n        const middleNode = node.content[middle];\r\n\r\n        if (middleNode.offset <= offset && middleNode.end > offset) {\r\n            // Found an exact match\r\n            return middleNode;\r\n        }\r\n\r\n        if (middleNode.end <= offset) {\r\n            // Update the closest node (less than offset) and move to the right half\r\n            closestNode = closest ? middleNode : undefined;\r\n            left = middle + 1;\r\n        } else {\r\n            // Move to the left half\r\n            right = middle - 1;\r\n        }\r\n    }\r\n\r\n    return closestNode;\r\n}\r\n\r\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        while (index > 0) {\r\n            index--;\r\n            const previous = parent.content[index];\r\n            if (hidden || !previous.hidden) {\r\n                return previous;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        const last = parent.content.length - 1;\r\n        while (index < last) {\r\n            index++;\r\n            const next = parent.content[index];\r\n            if (hidden || !next.hidden) {\r\n                return next;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getStartlineNode(node: CstNode): CstNode {\r\n    if (node.range.start.character === 0) {\r\n        return node;\r\n    }\r\n    const line = node.range.start.line;\r\n    let last = node;\r\n    let index: number | undefined;\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const selfIndex = index ?? parent.content.indexOf(node);\r\n        if (selfIndex === 0) {\r\n            node = parent;\r\n            index = undefined;\r\n        } else {\r\n            index = selfIndex - 1;\r\n            node = parent.content[index];\r\n        }\r\n        if (node.range.start.line !== line) {\r\n            break;\r\n        }\r\n        last = node;\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\r\n    const commonParent = getCommonParent(start, end);\r\n    if (!commonParent) {\r\n        return [];\r\n    }\r\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\r\n}\r\n\r\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\r\n    const aParents = getParentChain(a);\r\n    const bParents = getParentChain(b);\r\n    let current: CommonParent | undefined;\r\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\r\n        const aParent = aParents[i];\r\n        const bParent = bParents[i];\r\n        if (aParent.parent === bParent.parent) {\r\n            current = {\r\n                parent: aParent.parent,\r\n                a: aParent.index,\r\n                b: bParent.index\r\n            };\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\ninterface CommonParent {\r\n    parent: CompositeCstNode\r\n    a: number\r\n    b: number\r\n}\r\n\r\nfunction getParentChain(node: CstNode): ParentLink[] {\r\n    const chain: ParentLink[] = [];\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const index = parent.content.indexOf(node);\r\n        chain.push({\r\n            parent,\r\n            index\r\n        });\r\n        node = parent;\r\n    }\r\n    return chain.reverse();\r\n}\r\n\r\ninterface ParentLink {\r\n    parent: CompositeCstNode\r\n    index: number\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CstNode } from '../syntax-tree.js';\r\n\r\nexport class ErrorWithLocation extends Error {\r\n    constructor(node: CstNode | undefined, message: string) {\r\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\r\n    }\r\n}\r\n\r\nexport function assertUnreachable(_: never): never {\r\n    throw new Error('Error! The input value was not handled.');\r\n}\r\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-ORCS5NZH.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\r\nimport type { Module } from '../dependency-injection.js';\r\nimport { inject } from '../dependency-injection.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\r\nimport type { Mutable } from '../syntax-tree.js';\r\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\r\nimport { URI } from './uri-utils.js';\r\n\r\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\r\n    Grammar: () => undefined as unknown as ast.Grammar,\r\n    LanguageMetaData: () => ({\r\n        caseInsensitive: false,\r\n        fileExtensions: ['.langium'],\r\n        languageId: 'langium'\r\n    })\r\n};\r\n\r\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\r\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\r\n};\r\n\r\nfunction createMinimalGrammarServices(): LangiumCoreServices {\r\n    const shared = inject(\r\n        createDefaultSharedCoreModule(EmptyFileSystem),\r\n        minimalSharedGrammarModule\r\n    );\r\n    const grammar = inject(\r\n        createDefaultCoreModule({ shared }),\r\n        minimalGrammarModule\r\n    );\r\n    shared.ServiceRegistry.register(grammar);\r\n    return grammar;\r\n}\r\n\r\n/**\r\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\r\n * most notably the parser builder which interprets the grammar to create a parser.\r\n */\r\nexport function loadGrammarFromJson(json: string): ast.Grammar {\r\n    const services = createMinimalGrammarServices();\r\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\r\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\r\n    return astNode;\r\n}\r\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar ClassDefStatement = \"ClassDefStatement\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Item = \"Item\";\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar TreemapDoc = \"TreemapDoc\";\nfunction isTreemapDoc(item) {\n  return reflection.isInstance(item, TreemapDoc);\n}\n__name(isTreemapDoc, \"isTreemapDoc\");\nvar TreemapRow = \"TreemapRow\";\nvar Direction = \"Direction\";\nvar Leaf = \"Leaf\";\nvar Section = \"Section\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, ClassDefStatement, Commit, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Item, Junction, Leaf, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Section, Service, Statement, TreemapDoc, TreemapRow];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      case Leaf:\n      case Section: {\n        return this.isSubtype(Item, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case ClassDefStatement: {\n        return {\n          name: ClassDefStatement,\n          properties: [\n            { name: \"className\" },\n            { name: \"styleText\" }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Item: {\n        return {\n          name: Item,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"bits\" },\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case TreemapDoc: {\n        return {\n          name: TreemapDoc,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" },\n            { name: \"TreemapRows\", defaultValue: [] }\n          ]\n        };\n      }\n      case TreemapRow: {\n        return {\n          name: TreemapRow,\n          properties: [\n            { name: \"indent\" },\n            { name: \"item\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Leaf: {\n        return {\n          name: Leaf,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Section: {\n        return {\n          name: Section,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"bits\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]}]},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"REFERENCE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@2\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@2\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\nvar loadedTreemapGrammar;\nvar TreemapGrammar = /* @__PURE__ */ __name(() => loadedTreemapGrammar ?? (loadedTreemapGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Treemap\",\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"TreemapDoc\",\"returnType\":{\"$ref\":\"#/interfaces@4\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"TreemapRows\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"TREEMAP_KEYWORD\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap-beta\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"CLASS_DEF\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/classDef\\\\\\\\s+([a-zA-Z_][a-zA-Z0-9_]+)(?:\\\\\\\\s+([^;\\\\\\\\r\\\\\\\\n]*))?(?:;)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STYLE_SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":::\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"COMMA\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\",\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WS\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"ML_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\%\\\\\\\\%[^\\\\\\\\n]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"NL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"TreemapRow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"indent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"item\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"ClassDef\",\"dataType\":\"string\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Item\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Section\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Leaf\",\"returnType\":{\"$ref\":\"#/interfaces@2\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INDENTATION\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]{1,}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[a-zA-Z_][a-zA-Z0-9_]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9_\\\\\\\\.\\\\\\\\,]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"MyNumber\",\"dataType\":\"number\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Item\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"name\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"classSelector\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Section\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[]},{\"$type\":\"Interface\",\"name\":\"Leaf\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}]},{\"$type\":\"Interface\",\"name\":\"ClassDefStatement\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"className\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"styleText\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"TreemapDoc\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"TreemapRows\",\"type\":{\"$type\":\"ArrayType\",\"elementType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@14\"}}},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[],\"$comment\":\"/**\\\\n * Treemap grammar for Langium\\\\n * Converted from mindmap grammar\\\\n *\\\\n * The ML_COMMENT and NL hidden terminals handle whitespace, comments, and newlines\\\\n * before the treemap keyword, allowing for empty lines and comments before the\\\\n * treemap declaration.\\\\n */\"}`)), \"TreemapGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar TreemapLanguageMetaData = {\n  languageId: \"treemap\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar TreemapGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => TreemapGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => TreemapLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  TreemapDoc,\n  isTreemapDoc,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  TreemapGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface FileSystemNode {\r\n    readonly isFile: boolean;\r\n    readonly isDirectory: boolean;\r\n    readonly uri: URI;\r\n}\r\n\r\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\r\n\r\n/**\r\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\r\n */\r\nexport interface FileSystemProvider {\r\n    /**\r\n     * Reads a document asynchronously from a given URI.\r\n     * @returns The string content of the file with the specified URI.\r\n     */\r\n    readFile(uri: URI): Promise<string>;\r\n    /**\r\n     * Reads the directory information for the given URI.\r\n     * @returns The list of file system entries that are contained within the specified directory.\r\n     */\r\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\r\n}\r\n\r\nexport class EmptyFileSystemProvider implements FileSystemProvider {\r\n\r\n    readFile(): Promise<string> {\r\n        throw new Error('No file system is available.');\r\n    }\r\n\r\n    async readDirectory(): Promise<FileSystemNode[]> {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const EmptyFileSystem = {\r\n    fileSystemProvider: () => new EmptyFileSystemProvider()\r\n};\r\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * A `Module<I>` is a description of possibly grouped service factories.\r\n *\r\n * Given a type I = { group: { service: A } },\r\n * Module<I> := { group: { service: (injector: I) => A } }\r\n *\r\n * Making `I` available during the creation of `I` allows us to create cyclic\r\n * dependencies.\r\n */\r\nexport type Module<I, T = I> = {\r\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\r\n}\r\n\r\nexport namespace Module {\r\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\r\n}\r\n\r\n/**\r\n * Given a set of modules, the inject function returns a lazily evaluated injector\r\n * that injects dependencies into the requested service when it is requested the\r\n * first time. Subsequent requests will return the same service.\r\n *\r\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\r\n * by injecting a provider `() => T` instead of a `T`.\r\n *\r\n * Please note that the arguments may be objects or arrays. However, the result will\r\n * be an object. Using it with for..of will have no effect.\r\n *\r\n * @param module1 first Module\r\n * @param module2 (optional) second Module\r\n * @param module3 (optional) third Module\r\n * @param module4 (optional) fourth Module\r\n * @param module5 (optional) fifth Module\r\n * @param module6 (optional) sixth Module\r\n * @param module7 (optional) seventh Module\r\n * @param module8 (optional) eighth Module\r\n * @param module9 (optional) ninth Module\r\n * @returns a new object of type I\r\n */\r\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\r\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\r\n): I {\r\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\r\n    return _inject(module);\r\n}\r\n\r\nconst isProxy = Symbol('isProxy');\r\n\r\n/**\r\n * Eagerly load all services in the given dependency injection container. This is sometimes\r\n * necessary because services can register event listeners in their constructors.\r\n */\r\nexport function eagerLoad<T>(item: T): T {\r\n    if (item && (item as any)[isProxy]) {\r\n        for (const value of Object.values(item)) {\r\n            eagerLoad(value);\r\n        }\r\n    }\r\n    return item;\r\n}\r\n\r\n/**\r\n * Helper function that returns an injector by creating a proxy.\r\n * Invariant: injector is of type I. If injector is undefined, then T = I.\r\n */\r\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\r\n    const proxy: any = new Proxy({} as any, {\r\n        deleteProperty: () => false,\r\n        set: () => {\r\n            throw new Error('Cannot set property on injected service container');\r\n        },\r\n        get: (obj, prop) => {\r\n            if (prop === isProxy) {\r\n                return true;\r\n            } else {\r\n                return _resolve(obj, prop, module, injector || proxy);\r\n            }\r\n        },\r\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\r\n        has: (_, prop) => prop in module, // used by ..in..\r\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\r\n    });\r\n    return proxy;\r\n}\r\n\r\n/**\r\n * Internally used to tag a requested dependency, directly before calling the factory.\r\n * This allows us to find cycles during instance creation.\r\n */\r\nconst __requested__ = Symbol();\r\n\r\n/**\r\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\r\n * the module description. The result of service factories is cached. Groups are\r\n * recursively proxied.\r\n *\r\n * @param obj an object holding all group proxies and services\r\n * @param prop the key of a value within obj\r\n * @param module an object containing groups and service factories\r\n * @param injector the first level proxy that provides access to all values\r\n * @returns the requested value `obj[prop]`\r\n * @throws Error if a dependency cycle is detected\r\n */\r\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\r\n    if (prop in obj) {\r\n        if (obj[prop] instanceof Error) {\r\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\r\n        }\r\n        if (obj[prop] === __requested__) {\r\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\r\n        }\r\n        return obj[prop];\r\n    } else if (prop in module) {\r\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\r\n        obj[prop] = __requested__;\r\n        try {\r\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\r\n        } catch (error) {\r\n            obj[prop] = error instanceof Error ? error : undefined;\r\n            throw error;\r\n        }\r\n        return obj[prop];\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a deep-merge of two modules by writing source entries into the target module.\r\n *\r\n * @param target the module which is written\r\n * @param source the module which is read\r\n * @returns the target module\r\n */\r\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\r\n    if (source) {\r\n        for (const [key, value2] of Object.entries(source)) {\r\n            if (value2 !== undefined) {\r\n                const value1 = target[key];\r\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\r\n                    target[key] = _merge(value1, value2);\r\n                } else {\r\n                    target[key] = value2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n"],"names":["findIndexFunc","collection","predicate","fromIndex","iterable","Object","isArrayLike","iteratee","baseIteratee","keys","key","index","undefined","nativeMax","Math","max","createFind","array","length","toInteger","baseFindIndex","PacketTokenBuilder","AbstractMermaidTokenBuilder","__name","this","constructor","super","PacketModule","parser","TokenBuilder","ValueConverter","CommonValueConverter","createPacketServices","context","arguments","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Packet","createDefaultCoreModule","PacketGeneratedModule","ServiceRegistry","register","NEWLINE_REGEXP","regexpParser","RegExpParser","TerminalRegExpVisitor","BaseRegExpVisitor","isStarting","endRegexpStack","multiline","endRegex","join","reset","regex","startRegexp","visitGroup","node","quantifier","visitCharacter","char","String","fromCharCode","value","escapedChar","escapeRegExp","push","visitSet","set","substring","loc","begin","end","RegExp","Boolean","match","visitChildren","type","visitor","isMultilineComment","regexp","toString","visit","pattern","_a","whitespaceCharacters","split","isWhitespace","some","ws","test","replace","getCaseInsensitivePattern","keyword","Array","prototype","map","call","letter","toLowerCase","toUpperCase","partialMatches","input","partial","re","source","i","process","tmp","result","appendRaw","nbChars","substr","appendOptional","unicode","indexOf","lastIndex","exec","flags","partialRegExp","getAllReachableRules","grammar","allTerminals","ruleNames","Set","entryRule","rules","find","e","ast","entry","getEntryRule","topMostRules","concat","filter","hidden","getHiddenRules","rule","ruleDfs","has","name","add","visitedSet","streamAllContents","forEach","refRule","ref","getCrossReferenceTerminal","crossRef","terminal","nameAssigment","findNameAssignment","isCommentTerminal","terminalRule","terminalRegex","findNodesForProperty","property","findNodesForPropertyInternal","astNode","findNodeForProperty","nodes","min","element","first","nodeFeature","getContainerOfType","grammarSource","feature","isCompositeCstNode","content","flatMap","findNodeForKeyword","findNodesForKeywordInternal","treeIterator","streamCst","iterator","keywordNodes","next","done","childNode","prune","findAssignment","cstNode","container","assignment","startNode","$container","assertUnreachable","findNameAssignmentInternal","Map","cache","go","refType","childAssignment","get","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","getActionType","Error","getRuleType","_b","_c","s","u","abstractElementToRegex","flagText","entries","_ref","_ref2","WILDCARD","withCardinality","alternatives","elements","cardinality","lookahead","group","range","right","keywordToRegex","left","wrap","characterRangeToRegex","negate","until","lastSlash","lastIndexOf","regexFlags","includes","$type","options","_ral","RAL","defineProperty","exports","install","ral","ArchitectureTokenBuilder","ArchitectureValueConverter","AbstractMermaidValueConverter","runCustomConverter","_cstNode","trim","ArchitectureModule","createArchitectureServices","Architecture","ArchitectureGeneratedModule","TreemapTokenBuilder","classDefRegex","TreemapValueConverter","parseFloat","className","styleText","registerValidationChecks","services","validator","validation","TreemapValidator","registry","ValidationRegistry","checks","TreemapDoc","checkSingleRoot","bind","doc","accept","rootNodeIndentation","row","TreemapRows","item","indent","parseInt","TreemapModule","createTreemapServices","Treemap","TreemapGeneratedModule","isArray","arrayMap","baseMap","string","stringArray","func","error","number","boolean","Number","every","elem","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","isAbstractElement","reflection","isInstance","ArrayLiteral","ArrayType","BooleanLiteral","isBooleanLiteral","Conjunction","isConjunction","Disjunction","isDisjunction","Grammar","GrammarImport","InferredType","isInferredType","Interface","isInterface","NamedArgument","Negation","isNegation","NumberLiteral","Parameter","ParameterReference","isParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","isReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","TypeAttribute","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","isCharacterRange","CrossReference","isCrossReference","EndOfFile","isEndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","isNegatedToken","RegexToken","isRegexToken","RuleCall","isRuleCall","TerminalAlternatives","isTerminalAlternatives","TerminalGroup","isTerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","isUntilToken","Wildcard","isWildcard","LangiumGrammarAstReflection","AbstractAstReflection","getAllTypes","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","getTypeMetaData","properties","defaultValue","Emitter","Event","ral_1","require","_disposable","dispose","None","CallbackList","callback","bucket","_callbacks","_contexts","remove","foundCallbackWithDifferentContext","len","splice","invoke","ret","callbacks","slice","contexts","_len","args","_key","apply","default","console","isEmpty","_options","event","_event","listener","thisArgs","disposables","onFirstListenerAdd","_noop","onLastListenerRemove","fire","hasOwnProperty","object","path","hasPath","baseHas","buildATNKey","occurrence","AbstractTransition","target","isEpsilon","AtomTransition","tokenType","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","start","newState","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","atom","production","Terminal","tokenRef","terminalType","NonTerminal","currentRule","nonTerminal","referencedRule","addTransition","ruleRef","Alternation","alternation","defineDecisionState","alts","handle","makeAlts","Option","option","optional","epsilon","idx","Repetition","repetition","starState","star","RepetitionWithSeparator","sep","separator","repetitionSep","RepetitionMandatory","plusState","plus","repetitionMandatory","RepetitionMandatoryWithSeparator","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","last","makeBlock","blkStart","blkEnd","loop","loopback","loopEnd","state","decision","alt","getProdType","a","b","t","assign","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","DFA_ERROR","ATNConfigSet","configs","size","finalize","config","getATNConfigKey","k","stack","baseUniq","createDFACache","startState","predicateSet","existing","atnStartState","PredicateSet","predicates","is","EMPTY_PREDICATES","LLStarLookaheadStrategy","LLkLookaheadStrategy","logging","message","log","initialize","dfas","decisionLength","decisionToDFA","initATNSimulator","validateAmbiguousAlternationAlternatives","validateEmptyOrAlternatives","buildLookaheadForAlternation","prodOccurrence","hasPredicates","dynamicTokensEnabled","decisionIndex","partialAlts","getLookaheadPaths","maxLookahead","prodType","currAlt","isLL1Sequence","choiceToAlt","reduce","currTokType","tokenTypeIdx","categoryMatches","currExtendingType","orAlts","nextToken","LA","prediction","gate","GATE","adaptivePredict","buildLookaheadForOptional","g","singleTokensTypes","flatten","expectedTokenUniqueKey","sequences","allowEmpty","fullSet","altSet","tokType","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","s0","previousD","d","getExistingTargetState","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","token","reach","intermediate","skippedStopStates","c","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","from","values","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","reportLookaheadAmbiguity","ambiguityIndices","prefixPath","atnState","pathMsg","currtok","tokenLabel","currMessage","prod","getProductionDslName","topLevelRule","buildAmbiguityError","previous","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","edges","tokenMatcher","to","mapKey","numberOfTransitions","p","atnStack","pop","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","create","line","character","candidate","Is","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","label","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startLine","endLine","startCharacter","endCharacter","kind","collapsedText","defined","location","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","code","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","description","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","languageId","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Module","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","_len2","parameters","_key2","Read","Write","Namespace","Package","Key","Null","containerName","selectionRange","children","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","leftIdx","rightIdx","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","startOffset","endOffset","_uri","_languageId","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","low","high","mid","floor","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","rootNode","buildRootNode","RootCstNodeImpl","root","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","image","tokenToRange","removeNode","addHiddenNodes","tokens","added","unshift","construct","$cstNode","AbstractCstNode","_astNode","fullText","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","child","setPrototypeOf","addParents","count","_len3","_key3","_text","DatatypeSymbol","Symbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","_unorderedGroups","allRules","lexer","Lexer","LanguageMetaData","mode","wrapper","ChevrotainWrapper","ParserConfig","skipValidations","errorMessageProvider","ParserErrorMessageProvider","choices","wrapOr","wrapOption","many","wrapMany","atLeastOne","wrapAtLeastOne","getRule","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","RULE_STACK","wrapSelfAnalysis","LangiumParser","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","AstReflection","impl","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","mainRule","fragment","explicit","parse","lexerResult","tokenize","clear","lexerErrors","errors","lexerReport","report","parserErrors","implementation","createNode","err","extractHiddenTokens","hiddenTokens","consume","wrapConsume","isValidToken","isCrossRef","getAssignment","convertedValue","convert","operator","isInsertedInRecovery","isNaN","subrule","subruleResult","wrapSubrule","performSubruleAssignment","newItem","assignWithoutOverride","obj","linkContentToContainer","assignMandatoryProperties","buildReference","existingValue","newValue","targetCstNode","definitionErrors","AbstractParserErrorMessageProvider","buildMismatchTokenMessage","defaultParserErrorProvider","buildNotAllInputParsedMessage","buildNoViableAltMessage","buildEarlyExitMessage","LangiumParserErrorMessageProvider","expected","actual","LABEL","firstRedundant","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","currIdx","before","after","defaultConfig","recoveryEnabled","nodeLocationTracking","EmbeddedActionsParser","useDefaultLookahead","lookaheadStrategy","RECORDING_PHASE","RULE","performSelfAnalysis","ARGS","or","createParser","parserContext","reachable","parserRules","stream","ctx","buildElement","buildRules","method","ignoreGuard","buildKeyword","buildAction","buildCrossReference","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getToken","ErrorWithLocation","$refText","buildRuleCall","methods","predicatedMethod","ALT","guard","getGuardCondition","buildAlternatives","orIdx","idFunc","groupIdx","lParser","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","buildGroup","EOF","condition","parameter","true","guardCondition","assignTerminal","EMPTY_ALT","DEF","ruleName","getRuleName","createLangiumParser","prepareLangiumParser","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","async","interruptAndCheck","CancellationToken","performance","now","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","reject","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","charCodeAt","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","DocumentState","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","$document","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getDocument","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","unlink","Changed","precomputedScopes","deleteDocument","ref_resolving","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","streamAst","streamReferences","doLink","reference","getCandidate","isLinkingError","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","errorMessage","getScope","getElement","refNode","refText","$refNode","isAstNode","isAstNodeDescription","findRootNode","refData","getLinkedNode","ComputedScopes","descr","getAstNodePath","$nodeDescription","nodeDescription","getAstNode","targetDescription","warn","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","UriUtils","basename","Utils","dirname","extname","joinPath","resolvePath","equals","relative","fromPath","toPath","fromParts","toParts","repeat","normalize","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","nodeElem","isReference","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","targetPath","segment","toDocumentSegment","local","MultiMap","Reduction","sum","addAll","callbackfn","flat","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","streamContents","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","caseInsensitive","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","nonNullable","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","JSON","stringify","space","deserialize","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","startsWith","propertyAssignments","containerProperty","containerIndex","propertyName","reviveReference","mutable","$containerProperty","$containerIndex","getRefNode","fragmentIndex","DefaultServiceRegistry","fileExtensionMap","languageIdMap","ext","fileExtensions","singleton","hasServices","diagnosticData","ValidationCategory","DocumentValidator","entriesBefore","entriesAfter","checksRecord","thisObj","category","wrapValidationException","addEntry","handleException","functionality","messageContext","getAllSubTypes","getChecks","categories","registerBeforeDocument","checkBefore","wrapPreparationException","registerAfterDocument","checkAfter","checksBefore","checksAfter","DefaultDocumentValidator","validationRegistry","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","column","toDiagnosticData","getSource","parserError","previousToken","endColumn","linkingError","info","containerType","toDiagnostic","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","getDiagnosticRange","LexingWarning","LexingInfo","LexingHint","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","previousValue","currentValue","propertyIndex","arrayIndex","Disposable","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","onConfigurationSectionUpdate","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deletedUri","changedUri","newDocument","allChangedUris","toSet","shouldRelink","rebuildDocuments","sortDocuments","Linked","toArray","hasTextDocument","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","validate","targetState","filtered","notifyDocumentPhase","targetStateDocs","notifyBuildPhase","onDocumentPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","listenersCopy","getBuildOptions","validationSetting","newCategories","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","workspaceFolders","folders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexerErrorMessageProvider","buildUnexpectedCharactersMessage","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","buildTokens","tokenTypes","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","positionTracking","chevrotainResult","groups","flushLexingReport","isIMultiModeLexerDefinition","modes","res","tokenVocabulary","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","rest","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","with","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","isRootCstNode","getGrammarElementId","isLeafCstNode","startColumn","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","cst","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","DocumentationProvider","nameRegexp","DefaultNameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","DefaultValueConverter","DefaultTokenBuilder","References","serializer","Hydrator","JsonSerializer","WorkspaceManager","ConfigurationProvider","comparator","computed","isSymbol","subtypes","allSubtypes","nested","allTypes","types","possibleSubType","runConverter","convertInt","convertString","convertID","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","Date","other","toFinite","remainder","typePredicate","StreamImpl","keyIndex","isAstNodeInRange","DONE_RESULT","TreeStreamImpl","includeRoot","nodeRange","inRange","typeMetaData","genericNode","copyDefaultValue","propertyType","InfoTokenBuilder","InfoModule","createInfoServices","Info","InfoGeneratedModule","RadarTokenBuilder","RadarModule","createRadarServices","Radar","RadarGeneratedModule","reachableRules","terminalTokens","buildTerminalTokens","buildKeywordTokens","terminalToken","PATTERN","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","LINE_BREAKS","GROUP","SKIPPED","stickyRegex","distinct","sort","buildKeywordToken","keywordPattern","buildKeywordPattern","LONGER_ALT","findLongerAlt","longerAlts","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","isObject","valueOf","baseTrim","isBinary","INFINITY","toNumber","parsers","initializers","createInfoServices2","packet","createPacketServices2","pie","createPieServices","createPieServices2","Pie","architecture","createArchitectureServices2","gitGraph","createGitGraphServices","createGitGraphServices2","GitGraph","radar","createRadarServices2","treemap","createTreemapServices2","diagramType","initializer","MermaidParseError","startFn","nextFn","toMap","keyFn","valueFn","entryStream","firstDone","addSeparator","searchElement","initialValue","reduceRight","recursiveReduce","findIndex","mapped","isIterable","depth","head","tail","skipCount","limit","maxSize","by","internalState","exclude","otherKeySet","ownKey","EMPTY_STREAM","freeze","collections","collIndex","arrIndex","iterators","pruned","product","GitGraphTokenBuilder","GitGraphModule","GitGraphGeneratedModule","RangeComparison","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","Outside","compareRange","commentNames","getPreviousNode","isCommentNode","_","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","baseSlice","createAssigner","isPrototype","copyObject","assignValue","props","getAllKeysIn","prop","basePickBy","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","isString","AbstractProduction","_definition","pickBy","v","Rule","orgText","Alternative","ignoreAmbiguities","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitAlternative","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","baseEach","arraySome","baseSome","isIterateeCall","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","prodWrapper","repSepProd","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","valuesIndex","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","PRINT_WARNING","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","ignoreCase","msgSuffix","terms","term","addOptimizedIdxToResult","complement","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","atLeast","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","visitLookahead","visitNegativeLookahead","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","sticky","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","currType","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","clazz","groupName","isUndefined","longerAltType","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","visitEndAnchor","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","visitStartAnchor","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","global","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","charsOrCodes","numOrString","charCode","timer","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","searching","CATEGORIES","expandCategories","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","traceInitPerf","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","traceInitMaxIdent","traceMethod","traceInitVal","Infinity","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","initialMode","tokenizeInternal","j","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","matchedTokens","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","currTok","buildAlternationAmbiguityError","buildEmptyRepetitionError","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","numOfAlts","areAllOneTokenLookahead","currNumOfPaths","currPredicate","currPathLength","singleTokenAlts","buildSingleAlternativeLookaheadFunction","numOfPaths","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","alternative","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","manySep","atLeastOneSep","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","captureStackTrace","MismatchedTokenException","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","DEFAULT_PARSER_CONFIG","leftRecursionErrors","emptyAltErrors","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","laFuncBuilder","buildLookaheadFuncForOr","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","setNodeLocationFull","defineNameProp","nameValue","enumerable","configurable","writable","defaultVisit","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","Parser","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","fullRuleName","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","howMuch","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","noTokenCategoriesUsed","tokenConstructor","defineRule","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","invokeRuleCatch","ruleFinallyStateUpdate","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","configClone","PieTokenBuilder","PieValueConverter","PieModule","PieGeneratedModule","minimalGrammarModule","minimalSharedGrammarModule","loadGrammarFromJson","json","createMinimalGrammarServices","__defProp","Statement","Axis","Branch","Checkout","CherryPicking","ClassDefStatement","Commit","Curve","Edge","Entry","Item","Junction","Merge","PacketBlock","PieSection","Service","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","loadedTreemapGrammar","TreemapRow","Direction","Leaf","Section","MermaidAstReflection","InfoGrammar","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","RadarGrammar","TreemapGrammar","InfoLanguageMetaData","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","TreemapLanguageMetaData","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","runCommonConverter","_rule","_input","keywords","baseExtremum","baseLt","baseClone","events_1","Cancelled","shortcutEvent","MutableToken","_isCancelled","_emitter","_token","EmptyFileSystemProvider","r","o","h","cwd","isAbsolute","f","l","_makeLong","format","dir","base","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","cc","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","saveState","restoreState","consumeChar","disjunction","multiLine","isRegExpFlag","popChar","peekChar","isTerm","isAssertion","assertion","isBacktracking","atMost","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","isPatternCharacter","patternCharacter","isQuantifier","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","parseHexDigits","classPatternCharacterAtom","isClassAtom","classAtom","isRangeDash","classEscape","capturing","groupAst","nextChar","isAtom","prevState","howMany","hexString","hexChar","subChild","visitPattern","visitFlags","visitDisjunction","visitWordBoundary","visitNonWordBoundary","visitGroupBackReference","visitQuantifier","customizer","castPath","toKey","objValue","isIndex","paths","baseGet","baseSet","objectProto","sources","keysIn","propsIndex","propsLength","eq","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","__requested__","cause","value2","value1"],"sourceRoot":""}